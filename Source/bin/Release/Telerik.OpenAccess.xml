<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Telerik.OpenAccess</name>
  </assembly>
  <members>
    <member name="T:Telerik.OpenAccess.AbstractBlob">
      <summary>
            Base class for binary large objects.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.AbstractBlob.STANDARD">
      <summary>
            Indicates, that standard behavior is requested: blob is 
            loaded completely into memory.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.AbstractBlob.INCREMENTAL">
      <summary>
            Indicates, that non-standard behavior is requested: blob is 
            loaded chunkwise into memory. Only available with the 
            FastObjects backend.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Sets the position within the current Blob.
            There must be an active transaction, when this method is called.
            </summary>
      <param name="offset">
            A byte offset relative to the origin parameter.</param>
      <param name="origin">A value of type SeekOrigin indicating the 
            reference point used to obtain the new position.
            </param>
      <returns>The new position within the current Blob.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.SetLength(System.Int64)">
      <summary>
            Changes the size of a Blob.
            There must be an active transaction, when this method is called.
            </summary>
      <param name="value">The new length of the Blob in bytes.</param>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Close">
      <summary>
            Flushes the content of the Blob.
            There must be an active transaction, when this method is called.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Flush">
      <summary>
            Clears all buffers for this Blob and causes any buffered data to 
            be written to the underlying device. 
            There must be an active transaction, when this method is called.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.ReadByte">
      <summary>
            Reads a byte from the Blob and advances the position 
            within the Blob by one byte, or returns -1 if at the end 
            of the Blob. 
            There must be an active transaction, when this method is called.
            </summary>
      <para>An active transaction is required.</para>
      <returns>The value at the current position of <c>-1</c> if
            the end has been reached.</returns>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Read(System.Byte[],System.Int32)">
      <summary>
            Reads a sequence of bytes from the specified 
            position. The current position within the Blob is not modified. 
            There must be an active transaction, when this method is called.
            </summary>
      <param name="buffer"> The byte array to contain the data read. The 
            length of the array determines the number of bytes to be read.
            </param>
      <param name="pos">The position in the Blob to begin reading from
            (zero based). </param>
      <returns>The total number of bytes read into the buffer. This can 
            be less than the number of bytes requested if that many bytes are 
            not available, or zero (0) if the end of the Blob has been reached.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a number of bytes from to the specified position and 
            advances the 
            position within the Blob by the number of bytes read.
            There must be an active transaction, when this method is called.
            </summary>
      <param name="buffer">An array of bytes. 
            Contains the byte values of the Blob
            between offset and (offset + count - 1) when this method returns.
            </param>
      <param name="offset">The zero-based byte offset in buffer at which
            to begin storing the data read from the current Blob.</param>
      <param name="count"> 
            The maximum number of bytes to be read from the current 
            Blob position.
            </param>
      <returns>The total number of bytes read into the buffer. This can 
            be less than the number of bytes requested if that many bytes are 
            not available, or zero (0) if the end of the Blob has been reached.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> is too small.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Illegal value of
            <paramref name="offset" /> or <paramref name="count" />.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.WriteByte(System.Byte)">
      <summary>
             Writes a byte to the Blob and advances the position 
             within the Blob by one byte. 
             There must be an active transaction, when this method is called.
             </summary>
      <param name="value">The byte value to write to the current position.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            	Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a sequence of bytes to the current Blob 
            position and 
            advances the current position by the number of 
            bytes written.
            There must be an active transaction, when this method is called.
            </summary>
      <param name="buffer">
            An array of bytes. This method copies <paramref name="count" />
            bytes from buffer to the current Blob.
            </param>
      <param name="offset">The zero-based byte offset in 
            <paramref name="buffer" /> 
            from which to begin copying bytes to the current Blob.
            </param>
      <param name="count"> 
            The number of bytes to be written to the current Blob.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> is too small.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Illegal value of
            <paramref name="offset" /> or <paramref name="count" />.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Write(System.Byte[],System.Int32)">
      <summary>
            Writes a sequence of bytes to the current Blob at the specified
            position. The current position within this Blob is not changed.
            There must be an active transaction, when this method is called.
            </summary>
      <param name="pos">The position in the Blob to begin writing 
            (zero based).</param>
      <param name="buffer">The byte array containing the data to be 
            written. 
            The length of the array determines the number of bytes written.
            </param>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.ToString">
      <summary>Returns a string that represents the current Blob.
            </summary>
      <returns>A string that represents the current Blob.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.Equals(System.Object)">
      <summary>
            Determines whether two Blob instances have the same content
            and are equal.
            There must be an active transaction, when this method is called.
            </summary>
      <returns>
        <c>true</c> if the other Blob has the same content; 
            otherwise, <c>false</c>.</returns>
      <param name="obj">The other blob to compare with.</param>
    </member>
    <member name="M:Telerik.OpenAccess.AbstractBlob.GetHashCode">
      <summary>
            Serves as a hash function for Blobs, suitable for use in hashing 
            algorithms and data structures like a hash table.
            There must be an active transaction, when this method is called.
            </summary>
      <returns>A hash code for this object.
            </returns>
    </member>
    <member name="P:Telerik.OpenAccess.AbstractBlob.CanRead">
      <summary>
            Indicates whether the Blob content can be read.
            This is possible if there is an active transaction.
            </summary>
      <value>
        <c>true</c> if reading is supported;
            otherwise, <c>false</c>.
            </value>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.AbstractBlob.CanWrite">
      <summary>
            Indicates whether the Blob content can be modified.
            This is possible if there is an active transaction.
            </summary>
      <value>
        <c>true</c> if writing is supported; 
            otherwise, <c>false</c>.
            </value>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.AbstractBlob.CanSeek">
      <summary>
            Indicates whether the Blob supports seeking. 
            This is possible if there is an active transaction.
            </summary>
      <value>Returns <c>true</c> if seeking is supported;
             otherwise, <c>false</c>.
            </value>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.AbstractBlob.Length">
      <summary>
            Gets the size of the Blob in bytes.
            There must be an active transaction, when this method is called.
            </summary>
      <value>The size of the Blob in bytes.</value>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.AbstractBlob.Position">
      <summary>
            Controls the actual position within the current Blob.
            There must be an active transaction when this property is used.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
            Blob was closed before.</exception>
      <value>The byte position. (zero-based)</value>
    </member>
    <member name="T:Telerik.OpenAccess.AssociationAttribute">
      <summary>
            Designates a property to represent a database association, such as a foreign key relationship.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.AssociationAttribute.Depend">
      <summary>
            Specifies whether the associated object should be deleted together with its parent object.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.AssociationAttribute.IsUnique">
      <summary>
            Gets or sets the indication of a uniqueness constraint on the foreign key.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.BackendAttribute">
      <summary>
            Specifies certain attributes for a class that represents a database
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendAttribute.ConnectionId">
      <summary>
            Gets or sets the id of the connection used for opening the database
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendAttribute.BackendType">
      <summary>
            Gets or sets the type of the backend
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.BackendSpecificAttribute">
      <summary>
            Base class for all mapping attributes that can have different definitions under different backends
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.BackendSpecificAttribute.#ctor(Telerik.OpenAccess.Metadata.Backend)">
      <summary>
            Initializes a new instance of the BackendSpecificAttribute class
            </summary>
      <param name="backendType">Defines the type of the backend.</param>
    </member>
    <member name="M:Telerik.OpenAccess.BackendSpecificAttribute.#ctor">
      <summary>
            Initializes a new instance of the BackendSpecificAttribute class
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendSpecificAttribute.BackendType">
      <summary>
            Gets the backend type.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.CollectionAttribute">
      <summary>
            Designates a property as an inverse collection in a 1:m or m:n relationship.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.CollectionAttribute.InverseProperty">
      <summary>
            Gets or sets the name of the field on the opposite side of the association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.CollectionAttribute.IsManaged">
      <summary>
            Gets or sets the the setting defining if the collection is managed.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ColumnAttribute">
      <summary>
            Associates a property with a column in a database table.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ColumnAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the ColumnAttribute class
            </summary>
      <param name="name">Defines the name of the column</param>
    </member>
    <member name="M:Telerik.OpenAccess.ColumnAttribute.#ctor(System.String,Telerik.OpenAccess.Metadata.Backend)">
      <summary>
            Initializes a new instance of the ColumnAttribute class
            </summary>
      <param name="name">Defines the name of the column</param>
      <param name="backendType">Defines the type of the backend in which the table is defined</param>
    </member>
    <member name="M:Telerik.OpenAccess.ColumnAttribute.#ctor">
      <summary>
            Initializes a new instance of the ColumnAttribute class
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.Name">
      <summary>
            Gets the name of the database column.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.OpenAccessType">
      <summary>
            Gets or sets the internal OpenAccess type for the database column.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.IsNullable">
      <summary>
            Gets or sets whether a column can contain null values.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.Check">
      <summary>
            Gets or sets how OpenAccess approaches the detection of optimistic concurrency conflicts.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.Expression">
      <summary>
            Gets or sets whether a column is a computed column in a database.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.DataAccessKind">
      <summary>
            Gets or sets the behavior durring data access operations on this column
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.IsBackendCalculated">
      <summary>
            Gets or sets whether a column contains values that the database auto-generates.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.IsDiscriminator">
      <summary>
            Gets or sets whether a column contains a discriminator value in an inheritance hierarchy.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.IsPrimaryKey">
      <summary>
            Gets or sets whether this class member represents a column that is part or all of the primary key of the table.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.IsVersion">
      <summary>
            Gets or sets whether the column type of the member is a database timestamp or version number.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.Length">
      <summary>
            Gets or sets the length of the database column
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.Scale">
      <summary>
            Gets or sets the scale of the database column
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ColumnAttribute.SqlType">
      <summary>
            Gets or sets the type of the database column.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ConcurrencyControlAttribute">
      <summary>
            Specifies the concurrenty control strategy applied to an entity class
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ConcurrencyControlAttribute.#ctor(Telerik.OpenAccess.OptimisticConcurrencyControlStrategy)">
      <summary>
            Initializes a new instance of the ConcurrencyControl attribute
            </summary>
      <param name="strategy">
      </param>
    </member>
    <member name="P:Telerik.OpenAccess.ConcurrencyControlAttribute.Strategy">
      <summary>
            Gets or sets the concurrency control strategy
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ConstructorArgumentAttribute">
      <summary>
            Marks a property that it is initialized as part of the constructor of an attribute.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.CrudOperationAttribute">
      <summary>
            Specifies the usage of a certain stored procedure in a class
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.CrudOperationAttribute.UpdateProcedureName">
      <summary>
            Gets or sets the name of the stored procedure used for update operations
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.CrudOperationAttribute.DeleteProcedureName">
      <summary>
            Gets or sets the name of the stored procedure used for delete operations
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.CrudOperationAttribute.InsertProcedureName">
      <summary>
            Gets or sets the name of the stored procedure used for insert operations
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.CrudOperationAttribute.RetrieveProcedureName">
      <summary>
            Gets or sets the name of the stored procedure used for retrieve operations
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.LoadBehaviorAttribute">
      <summary>
            Specifies if a field is part of the default fetch group.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.LoadBehaviorAttribute.#ctor(Telerik.OpenAccess.Metadata.LoadBehavior)">
      <summary>
            Constructor for a PartOfDefaultFetchGroupAttribute
            </summary>
      <param name="loadBehavior">True if field should be part of the default fetchgroup, False otherwise.</param>
    </member>
    <member name="P:Telerik.OpenAccess.LoadBehaviorAttribute.LoadBehavior">
      <summary>
            Gets or sets the value for the default fetch group flag.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ForeignKeyAssociationAttribute">
      <summary>
            Designates a property to represent a foreign key relationship.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ForeignKeyAssociationAttribute.ConstraintName">
      <summary>
            Gets or sets the name of the foreign key constraint that defines the association. Can be null if there is no constraint in the database. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ForeignKeyAssociationAttribute.ForeignKeyColumns">
      <summary>
            Gets or sets coma separated list of the foreign key columns.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ForeignKeyAssociationAttribute.SharedFields">
      <summary>
            Gets or sets the properties that share the same columns with the navigation member defined with the foreign key asssociation.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ForeignKeyAssociationAttribute.TargetFields">
      <summary>
            Gets or sets the names of the properties on the oposite side of the relation.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.FunctionAttribute">
      <summary>
            Associates a method with a stored procedure or user-defined function in the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FunctionAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the FunctionAttribute class.
            </summary>
      <param name="name">The name of the database function.</param>
    </member>
    <member name="P:Telerik.OpenAccess.FunctionAttribute.IsFunction">
      <summary>
            Gets or sets whether a method is mapped to a function or to a stored procedure. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.FunctionAttribute.Name">
      <summary>
            Gets or sets the name of the function
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.FunctionAttribute.CommandText">
      <summary>
            Gets or sets explicit SQL to be executed with this function.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.FunctionAttribute.FunctionType">
      <summary>
            Gets or sets the type of the function
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.FunctionTypeEnumeration">
      <summary>
            Specifies the functio types options.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FunctionTypeEnumeration.Rowset">
      <summary>
            Return an object that can be used like table references in an SQL statement.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FunctionTypeEnumeration.Aggregate">
      <summary>
            Operate on a collection of values but return a single, summarizing value. 
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FunctionTypeEnumeration.Ranking">
      <summary>
            Return a ranking value for each row in a partition.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FunctionTypeEnumeration.Scalar">
      <summary>
            Operate on a single value and then return a single value. Scalar functions can be used wherever an expression is valid.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FunctionTypeEnumeration.UserDefined">
      <summary>
            User-defined functions are routines that accept parameters, perform an action, such as a complex calculation,
            and return the result of that action as a value. The return value can either be a single scalar value or a result set.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.InheritanceMappingAttribute">
      <summary>
            Maps an inheritance hierarchy in an OpenAccess application. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.InheritanceMappingAttribute.DiscriminatorValue">
      <summary>
            Gets or sets the discriminator value in a mapped inheritance hierarchy. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.InheritanceMappingAttribute.IsDefault">
      <summary>
            Gets or sets whether an object of this type in instantiated when the discriminator value does not match a specified value. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.InheritanceMappingAttribute.InheritanceStrategy">
      <summary>
            Gets or sets the inheritance strategy.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.JoinTableAssociationAttribute">
      <summary>
            Designates a property to represent a relationship that is exposed via a join table in the database.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.TableName">
      <summary>
            Gets or sets the name of the join table.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.OwnerColumns">
      <summary>
            Gets or sets a coma separated list of the columns of the join table that point to the owner side of the association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.TargetColumns">
      <summary>
            Gets or sets a coma separated list of the columns of the join table that point to the destination side of the association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.JoinTableAssociationAttribute.SequenceColumn">
      <summary>
            Gets or sets the name of the column that is used for ordering the associated objects if such column exists.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectIdAttribute">
      <summary>
            Designates a class to represent the identity for a persistent class.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectIdAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the ObjectIdAttribute class
            </summary>
      <param name="classType">The type of the class that is identified by the IObjectID class marked with this attribute.</param>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectIdAttribute.ClassType">
      <summary>
            Gets the type of the class that is identitfied by the IObjectID class marked with this attribute.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ParameterAttribute">
      <summary>
            Enables specification of mapping details for a stored procedure method parameter
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ParameterAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the parameter attribute class.
            </summary>
      <param name="name">The name of the parameter.</param>
    </member>
    <member name="P:Telerik.OpenAccess.ParameterAttribute.Name">
      <summary>
            Gets or sets the name of the parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ParameterAttribute.Mode">
      <summary>
            gets or sets the direction of the parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ParameterAttribute.IsNullable">
      <summary>
            defines if the parameter is nullable
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ParameterAttribute.OpenAccessType">
      <summary>
            Gets or sets the ado type of the parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ParameterAttribute.Length">
      <summary>
            Gets or sets the length of the database column
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ParameterAttribute.Scale">
      <summary>
            Gets or sets the scale of the database column
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ParameterAttribute.SqlType">
      <summary>
            Gets or sets the type of the database column.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ParameterModeEnumeration">
      <summary>
            Specifies the direction of the function paramater
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ParameterModeEnumeration.IN">
      <summary>
            specifies the direction of the parameter to in
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ParameterModeEnumeration.OUT">
      <summary>
            specifies the direction of the parameter to OUT
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ParameterModeEnumeration.INOUT">
      <summary>
            specifies the direction of the parameter to INOUT
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ParameterModeEnumeration.RETURN">
      <summary>
            marks the parameter as a return one
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.PersistentNamespaceAttribute">
      <summary>
            Designates all the classes inside a namespace to be persisted inside the database
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.PersistentNamespaceAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the PersistentNamespaceAttribute class
            </summary>
      <param name="nameSpace">The namespace that is to be marked as persistent</param>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentNamespaceAttribute.NameSpace">
      <summary>
            Gets the name of the namespace that is marked as persistent.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ResultTypeAttribute">
      <summary>
            Used to specify each type of result; for functions having various result types.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ResultTypeAttribute.CLRType">
      <summary>
            Gets or sets the clr type of the result.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ResultTypeAttribute.ReturnType">
      <summary>
            Gets or sets the type of result that will be returned by the function.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ReturnTypeEnumeration">
      <summary>
            Specifies the return type of a function.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ReturnTypeEnumeration.Scalar">
      <summary>
            Returns a single scalar value
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ReturnTypeEnumeration.Projection">
      <summary>
            Returns a projection
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ReturnTypeEnumeration.SingleResultSet">
      <summary>
            Returns a single result set
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ReturnTypeEnumeration.MultipleResultSet">
      <summary>
            Returns a multiple result set
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.StorageAttribute">
      <summary>
            Specifies the field where the value returned by a property is stored.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.StorageAttribute.#ctor(System.String)">
      <summary>
            Initializes an instance of the StorageAttribute class.
            </summary>
      <param name="name">Defines the name of the storage field.</param>
    </member>
    <member name="P:Telerik.OpenAccess.StorageAttribute.NameOfField">
      <summary>
            The name of the storage field.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.TableAttribute">
      <summary>
            Designates a class as an entity class that is associated with a database table.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TableAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the TableAttribute class
            </summary>
      <param name="name">Defines the name of the table</param>
    </member>
    <member name="M:Telerik.OpenAccess.TableAttribute.#ctor(System.String,Telerik.OpenAccess.Metadata.Backend)">
      <summary>
            Initializes a new instance of the TableAttribute class
            </summary>
      <param name="name">Defines the name of the table</param>
      <param name="backendType">Defines the type of the backend in which the table is defined</param>
    </member>
    <member name="M:Telerik.OpenAccess.TableAttribute.#ctor">
      <summary>
            Initializes a new instance of the TableAttribute class
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.TableAttribute.SchemaName">
      <summary>
            Gets or sets the schema in which the table is defined
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.TableAttribute.Name">
      <summary>
            Gets the name of the table or view.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.TableAttribute.UpdateSchema">
      <summary>
            Gets or sets a value indicating whether to update the database schema when parameters of this table are changed.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.UpdateCheck">
      <summary>
             Specifies when objects are to be tested for concurrency conflicts. 
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.UpdateCheck.Always">
      <summary>
            Always check. 
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.UpdateCheck.Never">
      <summary>
            Never check
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.UpdateCheck.WhenChanged">
      <summary>
            Check only when the object has been changed. 
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ViewAttribute">
      <summary>
            Designates a class as an entity class that is associated with a database view.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ViewAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the ViewAttribute class
            </summary>
      <param name="name">Defines the name of the view</param>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ChangeSetItem">
      <summary>
            Base class for a change between two relational database models.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ChangeSetEntry">
      <summary>
            Represents a change between two relational database models. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ChangeSetEntry.GetEnumerator">
      <summary>
            Gets an enumerator enumerating ChangeSetEntry objects.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaItemAttribute">
      <summary>
            Provides additional information about types and their members. In the Telerik OpenAccess ORM metadata type hierarchy, 
            MetaItemAttribute instances provide additional information about members through the declared type for the member.
            The attributes can be accessed via the MetaDataProperties collection of the base MetaItem type.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the primitive MetaItemAttribute with a key and value as parameters.
            </summary>
      <param name="key">defines the key value</param>
      <param name="value">defines the value</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute.#ctor(System.String,System.Object,System.Object)">
      <summary>
            Initializes a new instance of the primitive MetaItemAttribute with a key and value as parameters.
            </summary>
      <param name="key">defines the key value</param>
      <param name="value">defines the value</param>
      <param name="defaultValue">defines the default value</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaItemAttribute.#ctor(System.String,System.Object,Telerik.OpenAccess.Metadata.MetaAttributeKind,System.Object)">
      <summary>
            Initializes a new instance of the MetaItemAttribute with a key and value as parameters.
            </summary>
      <param name="key">defines the key value</param>
      <param name="value">defines the value</param>
      <param name="kind">defines the kind</param>
      <param name="defaultValue">defines the default value</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute.Key">
      <summary>
            Gets or sets the name of this meta item attribute.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute.Value">
      <summary>
            Gets or sets the value of this meta item attribute.        
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute.Kind">
      <summary>
            Gets or sets the kind of the meta item attribute
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaItemAttribute.DefaultValue">
      <summary>
            Gets or sets the default value of the meta item attribute
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.LoadBehavior">
      <summary>
            Defines the default load behavior of a persistent property
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.LoadBehavior.Default">
      <summary>
            The default behavior. The runtime will decide whether to load it or not based on the type of the property.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.LoadBehavior.Lazy">
      <summary>
            The property marked with this facet will be lazily loaded by default.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.LoadBehavior.Eager">
      <summary>
            The property marked with this facet will be eagerly loaded by default.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.AttributesMetadataSource">
      <summary>
            A mapping source that uses clr attributes to create the mapping model. 
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetadataSource">
      <summary>
            Base class for all mapping sources used by OpenAccess.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.CreateModel">
      <summary>
            Creates an OpenAccess meta model in the different MetadataSource implementations.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.GetModel">
      <summary>
            Gets the meta model used by the OpenAccess runtime.
            </summary>
      <returns>MetadataContainer instance containing the OpenAccess meta model.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.Validate">
      <summary>
            Validates the inner model, if there is one
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.Validate(Telerik.OpenAccess.Metadata.ValidationMode)">
      <summary>
            Validates the inner model, if there is one
            </summary>
      <param name="validationMode">Specifies validation settings, like whether to stop validation on first error</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataSource.GetValidationRuleProvider">
      <summary>
            Gets the IValidationRuleProvider instance to be used when performing validation
            </summary>
      <returns>The IValidationRuleProvider instance</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataSource.ValidationBehavior">
      <summary>
            Gets or sets the validation behavior
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataSource.ValidationResult">
      <summary>
            Gets the validation results if any
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.AttributesMetadataSource.CreateModel">
      <summary>
            Creates a MetadataContainer instance by reading clr attributes.
            </summary>
      <returns>A MetadataContainer instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.AttributesMetadataSource.FromAssembly(System.Reflection.Assembly)">
      <summary>
            Creates a mapping source by reading the clr attributes in an assembly
            </summary>
      <param name="assembly">A compiled assembly</param>
      <returns>The new Attributes mapping source as type AttributesMetadataSource</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.AttributesMetadataSource.FromContext(System.Type)">
      <summary>
            Creates a mapping source by reading the clr attributes of the classess that are managed by a 
            specific OpenAccessDataContext implementation.
            </summary>
      <param name="contextType">A type derived by the base OpenAccessContext type</param>
      <returns>The new Attributes mapping source as type AttributesMetadataSource</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MappingDefinitionType">
      <summary>
            Specifies the mapping type that is used for an OpenAccess project
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MappingDefinitionType.Xml">
      <summary>
            The mapping information is preserved in the form of an Xml file
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MappingDefinitionType.Attributes">
      <summary>
            The mapping information is exposed as Clr attributes applied to the persistent classes and their properties
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ValidationBehavior">
      <summary>
            Specifies the valiation behavior of an I
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.ValidationBehavior.None">
      <summary>
            No validation is run automatically
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.ValidationBehavior.AggregateResults">
      <summary>
            Validation is run automatically, 
            but no exceptions are thrown if there are validation errors
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.ValidationBehavior.ThrowOnFirstError">
      <summary>
            Validation is run automatically, 
            and an exception is thrown on the first validation error
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.ValidationBehavior.ThrowOnError">
      <summary>
            Validation is run automatically, and an exception is thrown 
            if there are any validation errors after the validtion completes
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.XmlMetadataSource">
      <summary>
            Represents a mapping source that uses an external XML mapping file to create the model. 
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.XmlMetadataSourceBase">
      <summary>
            A base class for the xml based mapping sources.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.XmlMetadataSourceBase.document">
      <summary>
            The XML document from which a meta model should be constructed.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSourceBase.#ctor(System.Xml.XmlDocument)">
      <summary>
            Initializes a new instance of the XmlMetadataSourceBase class used by the derived classes.
            </summary>
      <param name="document">The XML document from which a meta model should be constructed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.CreateModel">
      <summary>
            Creates a MetadataContainer instance by reading an XML mapping file.
            </summary>
      <returns>A MetadataContainer instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromReader(System.Xml.XmlReader)">
      <summary>
            Creates a mapping source from an XML reader. 
            </summary>
      <param name="reader">An XML reader.</param>
      <returns>The new XML mapping source, as type XmlMetadataSource.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromStream(System.IO.Stream)">
      <summary>
            Creates a mapping source from XML in a stream. 
            </summary>
      <param name="stream">A stream of XML.</param>
      <returns>The new XML mapping source, as type XmlMetadataSource.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromUrl(System.String)">
      <summary>
            Creates a mapping source from XML that is loaded from a URL. 
            </summary>
      <param name="url">The URL pointing to the XML.</param>
      <returns>The new XML mapping source, as type XmlMetadataSource.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromXml(System.String)">
      <summary>
            Creates a mapping source from an XML string. 
            </summary>
      <param name="xml">A string that contains XML.</param>
      <returns>The new XML mapping source, as type XmlMetadataSource.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromAssemblyResource(System.String)">
      <summary>
            Creates a mapping source from and XML resource embedded in the currently calling assembly. 
            </summary>
      <param name="xmlFileName">The name of the embedded xml resource.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlMetadataSource.FromAssemblyResource(System.Reflection.Assembly,System.String)">
      <summary>
             Creates a mapping source from and XML resource embedded an assembly. 
            </summary>
      <param name="assembly">The assembly where the resource is embedded.</param>
      <param name="xmlFileName">The name of the embedded xml resource.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.XmlReverseMappingSource">
      <summary>
            An xml mapping source reading from the reversemapping.config format of older OpenAccess versions.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlReverseMappingSource.CreateModel">
      <summary>
            Creates a MetadataContainer instance by reading a reversemapping.config file.
            </summary>
      <returns>A MetadataContainer instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlReverseMappingSource.FromReader(System.Xml.XmlReader)">
      <summary>
            Creates a mapping source from an XML reader. 
            </summary>
      <param name="reader">An XML reader.</param>
      <returns>The new XML mapping source, as type XmlReverseMappingSource.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlReverseMappingSource.FromStream(System.IO.Stream)">
      <summary>
            Creates a mapping source from XML in a stream. 
            </summary>
      <param name="stream">A stream of XML.</param>
      <returns>The new XML mapping source, as type XmlReverseMappingSource.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlReverseMappingSource.FromUrl(System.String)">
      <summary>
            Creates a mapping source from XML that is loaded from a URL. 
            </summary>
      <param name="url">The URL pointing to the XML.</param>
      <returns>The new XML mapping source, as type XmlReverseMappingSource.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.XmlReverseMappingSource.FromXml(System.String)">
      <summary>
            Creates a mapping source from an XML string. 
            </summary>
      <param name="xml">A string that contains XML.</param>
      <returns>The new XML mapping source, as type XmlReverseMappingSource.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.XmlReverseMappingSource.NamingSettings">
      <summary>
            Gets or sets the naming settings used by the ReverseMappingSource.
            </summary>
      <returns>A ModelNamingSettings instance.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ITypeResolver">
      <summary>
            Handles the reverse mapping of sql types to clr types.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ITypeResolver.MetaColumnToClrType(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
      <summary>
            Returns the default Clr Type for a database column.
            </summary>
      <param name="column">A column read from the database schema.</param>
      <returns>The best matching Clr Type.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ITypeResolver.MetaColumnToClrType(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter)">
      <summary>
            Returns the default Clr Type for a database column.
            </summary>
      <param name="parameter">A stored procedure parameter read from the database schema.</param>
      <returns>The best matching Clr Type.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.GetTypesForColumn(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
      <summary>
            Gets a list of System.Type instances that can be used for a specified column
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.GetTypesForStoredProcedureParameter(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter)">
      <summary>
            Gets a list of System.Type instances that can be used for a specified parameter
            </summary>
      <param name="parameter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.GetModifiedList(System.Type,System.Type,System.Collections.Generic.List{System.Type},System.Collections.Generic.List{System.Type})">
      <summary>
            This method returns a reordered list based on the lists passed in.
            type1 from list1 is added in the beginning and then the rest of the list1 elements.
            Same happens if type2 and list2 are not null
            </summary>
      <returns>Reordered list with type1 and type2 added ahead of other respective list elements</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.GetTypeCode(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter)">
      <summary>
            Returns the (jdbc) type code for a given MetaColumn
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.TypeResolver.GetTypeCode(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
      <summary>
            Returns the (jdbc) type code for a given MetaColumn
            </summary>
      <param name="column">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ModelStringHelper">
      <summary>
            Helper class for various string operations
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ModelStringHelper.SplitFullNameToNameAndNamespace(System.String,System.String@,System.String@)">
      <summary>
            Splits the full name of a class to its name and namespace tokens
            </summary>
      <param name="fullName">The full name of the class</param>
      <param name="name">The name of the class</param>
      <param name="nameSpace">The namespace of the class</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ModelStringHelper.CreateFullNameForRelationalItem(System.String,System.String)">
      <summary>
            Calculate the full name of meta tables, constrains or stored procedures
            </summary>
      <param name="schemaName">The name of the schema where the item is defined.</param>
      <param name="name">The name of the relational item.</param>
      <returns>The full name of the relational item.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.CaseChangeModes">
      <summary>
            Represents a mode used to change the case of the letters in a string.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.Unchanged">
      <summary>
            The string is not changed.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.Capitalize">
      <summary>
            The first letter of each word in the string is capitalized.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.CamelCase">
      <summary>
            The leading character of each word except the first one is capitalized .
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.PascalCase">
      <summary>
            The leading character of each word is capitalized.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.Lower">
      <summary>
            All letters are changed to lower case.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CaseChangeModes.Upper">
      <summary>
            All letters are changed to upper case.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ModelNamingSettings">
      <summary>
            Naming settings for an OpenAccess meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ModelNamingSettings.GetDefaultNamingSettings(System.String)">
      <summary>
            Gets the default naming settings for the specified project language.
            </summary>
      <param name="projectLanguage">The project language.</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ModelNamingSettings.ClassRules">
      <summary>
            Gets or sets the Naming settings for the classes in an OpenAccess meta model.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ModelNamingSettings.FieldRules">
      <summary>
            Gets or sets the Naming settings for the fields in an OpenAccess meta model.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ModelNamingSettings.PropertyRules">
      <summary>
            Gets or sets the Naming settings for the properties in an OpenAccess meta model.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.NamingRules">
      <summary>
            Defines naming rules used for constructing the names of the different meta model artifacts.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.NamingRules.AddPrefix">
      <summary>
            Gets or sets a prefix which will be added to the name of the meta item.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.NamingRules.AddSuffix">
      <summary>
            Gets or sets a suffix which will be added to the name of the meta item.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.NamingRules.RemovePrefix">
      <summary>
            Gets or sets a prefix which will be removed from the name of the meta item.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.NamingRules.RemoveSuffix">
      <summary>
            Gets or sets a suffix which will be removed from the name of the meta item.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.NamingRules.CaseMode">
      <summary>
            Gets or sets the case mode of the meta item name.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.NamingRules.PluralizationMode">
      <summary>
            Gets or sets the pluralization mode of the meta item name.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.NamingRules.PluralizationModeCollections">
      <summary>
            Gets or sets the pluralization mode of the meta item collection property names.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.NamingRules.RemoveUnderscore">
      <summary>
            Gets or sets a value indicating whether underscores should be removed from the meta item name.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.NamingRules.UnderscoreAsWordDelimiter">
      <summary>
            Gets or sets a value indicating whether underscores should be treated as word delimiters in a meta item name.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.NamingRules.SchemaNameAsPrefix">
      <summary>
            Gets or sets a value indicating whether the schema name should be applied as prefix to the meta item name.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.PluralizationModes">
      <summary>
            Represents a pluralization mode used to generate names for meta items.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.PluralizationModes.Unchanged">
      <summary>
            The name is not changed.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.PluralizationModes.Singularize">
      <summary>
            The name is singularized.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.PluralizationModes.Pluralize">
      <summary>
            The name is pluralized.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessType">
      <summary>
            OpenAccess abstraction for the native sql types
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Undefined">
      <summary>Mapping not specified</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Boolean">
      <summary>A simple type representing Boolean values of true or false.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Bit">
      <summary>A simple type representing bit values of 0 or 1</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Byte">
      <summary>An 8-bit integer ranging in value from -128 to 127.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Int16">
      <summary>An integral type representing signed 16-bit integers with values between -32768 and 32767.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Int32">
      <summary>An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Int64">
      <summary>An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.UInt64">
      <summary>An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Guid">
      <summary>A globally unique identifier (or GUID).</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Float">
      <summary>Identifies the generic SQL type FLOAT. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Real">
      <summary>Identifies the generic SQL type REAL. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Double">
      <summary>A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Numeric">
      <summary>Identifies the generic SQL type NUMERIC. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Decimal">
      <summary>A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Character">
      <summary>A simple type representing a character.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Varchar">
      <summary>A type representing a VARCHAR value in the database. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.LongVarchar">
      <summary>A type representing a LONGVARCHAR value in the database. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Date">
      <summary>A type representing a date value. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Time">
      <summary>A type representing a time value. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.DateTime">
      <summary>A type representing a date and time value. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Binary">
      <summary>A type representing a fixed length BINARY value in the database. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.VarBinary">
      <summary>A type representing a variable length VARBINARY with a maximum length of 8000. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.LongVarBinary">
      <summary>A type representing a variable length LONGVARBINARY value in the database. Different backends use different representations of this type.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Object">
      <summary>A general type representing any polymorphic persistent reference.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Blob">
      <summary>A variable-length stream of binary data ranging between 1 and 8,000 bytes.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Clob">
      <summary>A variable-length stream of character data ranging between 1 and 8,000 bytes.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Cursor">
      <summary>A type representing a cursor.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessType.Other">
      <summary>A type representing a type not explicitly represented by another DbType value.</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.AssociationType">
      <summary>
            Defines the type of associations available in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.AssociationType.Reference">
      <summary>
            Specifies an unary association (that has a 'role' only on one of the ends), and the 'end role' is implemented as 
            a reference property.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.AssociationType.PolymorphicReference">
      <summary>
            Specifies an unary association (that has a 'role' only on one of the ends), and the 'end role' is implemented as 
            a reference to a class hierarchy or interface.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.AssociationType.Collection">
      <summary>
            Specifies an unary association (that has a 'role' only on one of the ends), and the 'end role' is implemented as 
            a collection property.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.AssociationType.OneToMany">
      <summary>
            Specifies a binary association that has both ends of the association set: one is reference property and the other is the 
            corresponding collection (calculated).
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.AssociationType.OneToManyJointable">
      <summary>
            Specifies a binary association that has both ends of the association set: one is reference property and the other is the 
            corresponding collection. The association is implemented using a join table.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.AssociationType.ManyToManyJointable">
      <summary>
            Specifies a binary association that has both ends of the association set: both sides are implemented as collection properties. 
            The association is implemented using a join table.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.AssociationType.DictionaryJointable">
      <summary>
            Specifies a binary association that has both ends of the association set: one is the dictionary and the other can be a reference
            or a key value property to another dictionary.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.AssociationType.StructReference">
      <summary>
            Specifies an unary association (that has a 'role' only on one of the ends), and the 'end role' is implemented as 
            a structure (value object) property. NOT SUPPORTED currently.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.BackendConfiguration">
      <summary>
            Provides the backend configuration settings affecting the runtime behavior of OpenAccess
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.BackendConfiguration.#ctor">
      <summary>
            Creates a new instance with the default values
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionTimeout">
      <summary>
            Controls the timeout of database client/server connections after the last ObjectScope disposal.
            </summary>
      <value>The timeout value is given in milliseconds.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.Driver">
      <summary>
            Controls the name of the driver to be used.
            </summary>
      <value>genericADO2, odp, ntds (Default: genericADO2)</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.Backend">
      <summary>
            The name of the backend to be used.
            </summary>
      <value>
            String representation of a <see cref="e:Telerik.OpenAccess.BackendType" /> enumeration value.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.Assemblies">
      <summary>
            Gets the list of assemblies that should be searched for persistent types.
            </summary>
      <value>
            Modifyable list of assemblies
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.Logging">
      <summary>
            Gets the configuration of the logging facilities.
            </summary>
      <value>
            The configuration of the logging facilities.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCache">
      <summary>
            Gets the configuration of the second level cache.
            </summary>
      <value>
            The second level cache configuration.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPool">
      <summary>
            Gets the configuration of the connections and of their pooling.
            </summary>
      <value>
            The configuration of the connection pool.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGenerator">
      <summary>
            Gets the configuration of the HIGHLOW key generator.
            </summary>
      <value>
            Configuration of the <see cref="F:Telerik.OpenAccess.Metadata.KeyGenerator.HighLow" /> key generator.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.Runtime">
      <summary>
            Gets the configuration of the runtime behavior.
            </summary>
      <value>
            The runtime behavior configuration.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInfo">
      <summary>
            Returns information about the opened connection to a specific relational backedn
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration">
      <summary>
            Configuration of the logging facilities in OpenAccess
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.LogEvents">
      <summary>
            Controls the logging level.
            </summary>
      <value>
            One of: none, errors, warning, normal, verbose, info, all
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.LogEventsToSysOut">
      <summary>
            Controls if the log output is written to System.Console.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.LogEventsToTrace">
      <summary>
            Controls if the log output is performed with the System.Diagnostics.Trace framework.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.StackTrace">
      <summary>
            Controls if the logging facilities appen stack trace information (time consuming).
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.MaxEvents">
      <summary>
            Controls the maximum number of log event stored in the ring buffer.
            </summary>
      <value>Default: 1000</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.DownloaderEnabled">
      <summary>
            Controls if the log downloader background thread is used.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.LoggingConfiguration.Downloader">
      <summary>
            Gets the configuration of the log downloader background thread.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration">
      <summary>
            Configuration of the log downloader background thread
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.EventPollSeconds">
      <summary>
            Controls the time in seconds between polls of the event ring buffer
            </summary>
      <value>Default: 1</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.MetricPollSeconds">
      <summary>
            Controls the time in seconds between polls of the metric snapshot ring buffer
            </summary>
      <value>Default: 60</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.Append">
      <summary>
            Controls if the output is appended to an existing log file or if overwrite is performed
            </summary>
      <value>Default: false (overwrite)</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.MaxFileSizeKB">
      <summary>
            Controls the maximum file size in KB before a rollover is performed.
            </summary>
      <value>Default: 1000</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.NumberOfBackups">
      <summary>
            Controls the number of old log files to keep (x.1, x.2, ...)
            </summary>
      <value>Default: 3</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.Filename">
      <summary>
            Controls the file name of the log file.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.EventBinary">
      <summary>
            Controls if events should be logged in binary form
            </summary>
      <value>Default: true</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.EventText">
      <summary>
            Controls if events should be logged as text files.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.MetricBinary">
      <summary>
            Controls if the metric snapshots are logged in binary form
            </summary>
      <value>
            Default: true
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.Quiet">
      <summary>
            Controls the verbosity of the log downloader background thread.
            </summary>
      <value>Default: true</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.DateFormat">
      <summary>
            Controls the date time format to be used for event text.
            </summary>
      <value>Default: HH:mm:ss.fff</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.MetricStoreCapacity">
      <summary>
            Controls the capacity of the metric snapshot store
            </summary>
      <value>Default: 3600</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.DownloaderConfiguration.MetricSnapshotIntervalMSec">
      <summary>
            Controls the interval to perform metric snapshots in milliseconds
            </summary>
      <value>
            Default: 1000
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration">
      <summary>
            Configures the runtime behavior of the second level cache.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.Enabled">
      <summary>
            Controls if the second level cache is enabled
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.NumberOfObjects">
      <summary>
            Controls the number of objects to be cached
            </summary>
      <value>Default: 10000</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.CacheQueryResults">
      <summary>
            Controls if the second level cache should also cache query results.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.NumberOfQueryResults">
      <summary>
            Controls the number of query results to cache
            </summary>
      <value>Default: 1000</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.Strategy">
      <summary>
            Controls the default strategy to use
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SecondLevelCacheConfiguration.Synchronization">
      <summary>
            Gets the configuration for the synchronization of a distributed second level cache
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration">
      <summary>
            Configuration of the distributed second level cache synchronization
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.Enabled">
      <summary>
            Controls if the distributed second level cache synchronization is enabled.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.MulticastAddress">
      <summary>
            Controls the multicast address that is to be used by MSMQ
            </summary>
      <value>Default: unspecified</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.Localpath">
      <summary>
            Controls the name of the receiving message queue.
            </summary>
      <value>Default: unspecified, dynamically created</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.App">
      <summary>
            Controls the application value on the message for filtering purposes in external clients.
            </summary>
      <value>Default: 0</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.ExpirationMSec">
      <summary>
            Controls the number of milliseconds the message has time to be received.
            </summary>
      <value>Default: 2000</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.StatusDurationMSec">
      <summary>
            Controls the number of milliseconds the status information is waited for.
            </summary>
      <value>Default: 2000</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.Tracing">
      <summary>
            Controls if messages are send with the UseTracing property.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.SynchronizationConfiguration.AdministrationQueue">
      <summary>
            Controls the name of the administrative queue used.
            </summary>
      <value>Default: unspecified, no admin queue used</value>
    </member>
    <member name="T:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration">
      <summary>
            Configures the runtime settings of the HighLow key generator.
            </summary>
      <see cref="e:Telerik.OpenAccess.KeyGenerator.HighLow" />
      <see cref="P:Telerik.OpenAccess.Metadata.MetadataContainer.HighLowKeyGenerator" />
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.GrabSize">
      <summary>
            Controls the (minimal) number of new keys fetched in one server call.
            </summary>
      <value>Default: 10</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.Start">
      <summary>
            Controls the starting value as given out by the generator.
            </summary>
      <value>Default: 0</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.HighLowKeyGeneratorConfiguration.IgnoreMissingTables">
      <summary>
            Controls the check during database open operation.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="T:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration">
      <summary>
            Configures the database connections and the connection pool
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.ActiveConnectionTimeout">
      <summary>
            Controls the time out in seconds for active connections; controls how long query results on the server are held open.
            </summary>
      <value>Default: 120</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.BlockWhenFull">
      <summary>
            Controls the behavior of the empty connection pool when a new connection is requested.
            </summary>
      <value>Default: true (blocking)</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.ConnectRetryCount">
      <summary>
            Controls the number of connect retries that are attempted until a connection can be established
            </summary>
      <value>Default: 30</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.ConnectRetryIntervalMSec">
      <summary>
            Controls the time between connect retry attempts in milliseconds.
            </summary>
      <value>Default: 1</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.TestInterval">
      <summary>
            Controls the time in seconds between subsequent tests whether an idle connection is still valid.
            </summary>
      <value>Default: 120</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.MaxActive">
      <summary>
            Controls the maximum number of active connections in the connection pool.
            </summary>
      <value>Default: 10</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.MaxIdle">
      <summary>
            Controls the maximum number of idle connections in the connection pool.
            </summary>
      <value>Default: 10</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.MinIdle">
      <summary>
            Controls the minimum number of idle connections in the connection pool.
            </summary>
      <value>Default: 2</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.Reserved">
      <summary>
            Controls the number of pooled reserved connections (e.g. used by the HighLow key generator).
            </summary>
      <value>Default: 1</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.TestOnAlloc">
      <summary>
            Controls if connections are tested for operation when they are unpooled
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.TestOnRelease">
      <summary>
            Controls if connections are tested for operation when they are pooled
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.TestOnException">
      <summary>
            Controls if connections are tested for operation after an exception occured
            </summary>
      <value>Default: true</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.TestWhenIdle">
      <summary>
            Controls if connections are tested when they are idle
            </summary>
      <value>Default: 1</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.MaxConnectionAge">
      <summary>
            Controls the maximum number a connection can be returned to the connection pool before it is
            closed to free accumulated resources.
            </summary>
      <value>Default: 1000</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.IsolationLevel">
      <summary>
            Controls the isolation level that should be used on the database server.
            </summary>
      <value>One of: READ_COMMITTED, READ_UNCOMMITTED, REPEATABLE_READ, SERIALIZABLE, SNAPSHOT; Default: READ_COMMITTED</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.PreparedStatementCacheEnabled">
      <summary>
            Controls if the prepared statement pool cache is enabled.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.PreparedStatementCacheMax">
      <summary>
            Controls the maximum number of prepared statements to be cached on a connection
            </summary>
      <value>Default: 0, unlimited</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.ValidateSQL">
      <summary>
            Controls the SQL that is used to test connections for operation
            </summary>
      <value>Default: null, automatically generated based on the backend</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.InitSQL">
      <summary>
            Gets a list of SQL statements that will be executed after creation of a connection before it is 
            put into the connection pool.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.ConnectionPoolConfiguration.DatabaseNameMapping">
      <summary>
            Gets a map of logical database name to physical database name.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration">
      <summary>
            Configures the runtime
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.MediumTrust">
      <summary>
            Controls if medium-trust environments are supported.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.SupportConcurrentThreadsInScope">
      <summary>
            Controls if the runtime supports concurrent threads within one objects scope.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CheckSchemaConsistencyOnStartup">
      <summary>
            Controls if the class/table mapping is validated on startup of the application.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CheckObjectConsistencyOnCommit">
      <summary>
            Controls if the changed object network is checked for consistency on commit.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ReadOnly">
      <summary>
            Controls if write operations against the database are permitted.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.LockTimeoutMSec">
      <summary>
            Controls the lock time out in milliseconds.
            </summary>
      <value>Default: 5000</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.LockSqlSuffix">
      <summary>
            Controls the SQL fragment that is appended for update.
            </summary>
      <value>Default: FOR UPDATE, backend specific</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CloseScopesWithActiveTransaction">
      <summary>
            Controls if closing of an object scope with an active transaction is allowed.
            </summary>
      <value>Default: true</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CloseDatabaseWithActiveTransactions">
      <summary>
            Controls if closing a database with active transactions is allowed.
            </summary>
      <value>Default: true</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.PerformanceCounter">
      <summary>
            Controls if performance counters are to be exposed; might require administrative permissions.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ParallelFetchingEnabled">
      <summary>
            Controls parallel fetching of a sub collection.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.StatementBatchingEnabled">
      <summary>
            Controls statement batching for modifying operations.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.InterceptDefaultFetchGroupFieldAccess">
      <summary>
            Controls if access to members of the default fetch group is intercepted internally.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ClassBehavior">
      <summary>
            Controls the default modification behavior of persistent types.
            </summary>
      <value>One of: readwrite, readonly, insertonly; Default: readwrite</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CacheReferenceType">
      <summary>
            Controls the type of reference that is used in the cache of the object scope.
            </summary>
      <value>Default: AUTO</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.DatabaseTransactionLocking">
      <summary>
            Controls which objects are locked when pessimstic concurrency control is used.
            </summary>
      <value>One of: FIRST, NONE, ALL; Default: FIRST</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ReturnNullForRowNotFound">
      <summary>
            Controls if null is to be returned when an object is not found.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.RequirePersistentClasses">
      <summary>
            Controls if the opening of a database requires persistent classes to be present.
            </summary>
      <value>Default: true</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.Optimistic">
      <summary>
            Controls if optimistic transactions are used or pessimistic locking is to be performed.
            </summary>
      <value>Default: true</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.RetainConnectionInOptimisticTransaction">
      <summary>
            Controls if the connection is to be retained in optimistic transactions.
            </summary>
      <value>One of: null, true, false; Default: null</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ScopeImplementationPoolEnabled">
      <summary>
            Controls if the implementation objects underlying the object scope can be pooled.
            </summary>
      <value>Default: true</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.ScopeImplementationPoolMaxIdle">
      <summary>
            Controls the maximum number of idle scope implementation objects.
            </summary>
      <value>Default: 8</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.CompiledQueryCacheSize">
      <summary>
            Controls the maximum number of queries that are kept in the precompiled query cache.
            </summary>
      <value>Default: 0, unlimited</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.UseUTCForAutoSetValues">
      <summary>
            Controls if the datetime values that are automatically set during commit will use UTC.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.UseUTCForReadValues">
      <summary>
            Controls if the datetime values that are read will be converted to use UTC.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.NullsFirst">
      <summary>
            Controls if the database will use NULLS FIRST sorting.
            </summary>
      <value>Default: true</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.LikeWithEscape">
      <summary>
            Controls if the database will use the LIKE operator with the ESCAPE character set to backslash.
            </summary>
      <value>Default: true</value>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.RuntimeConfiguration.OnlyMetadata">
      <summary>
            Controls if the OpenAccessContext will be created to obtain only the Metadata and not actually connect to the database.
            </summary>
      <value>Default: false</value>
    </member>
    <member name="T:Telerik.OpenAccess.BackendConfiguration.BackendInformation">
      <summary>
            Information about the used relational Backend.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.MajorVersion">
      <summary>
            The major version number reported by the connected relational server.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.MinorVersion">
      <summary>
            The minor version number reported by the connected relational server.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.ExtensionName">
      <summary>
            The name that can be used to mark mapping notes backend specific
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.BackendConfiguration.BackendInformation.Name">
      <summary>
            The name of the backend.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.DatabaseLevelCache">
      <summary>
            Level two cache controlling
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.DatabaseLevelCache.EvictAll(System.Type,System.Boolean)">
      <summary> Evict all information for all persistent instances of a Class from the
            second level cache.
            </summary>
      <param name="type">Type of persistent instances to be evicted
            </param>
      <param name="includeSubclasses">If true then instances of derived are also
            evicted
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.DatabaseLevelCache.Evict(Telerik.OpenAccess.IObjectId)">
      <summary> Evict all information for an IObjectId instance from the second level cache. This is a NOP
            if there is no information in the cache for the IObjectId instance.
            </summary>
      <param name="oid">IObjectId of the persistent instance to be evicted
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.DatabaseLevelCache.EvictAll(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.IObjectId})">
      <summary> Evict all information for a collection of IObjectId instances from the second level cache.
            </summary>
      <param name="oids">Collection of IObjectId of the persistent instances to be evicted
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.DatabaseLevelCache.EvictAll">
      <summary> Evict all persistent instances from the second level cache.</summary>
    </member>
    <member name="M:Telerik.OpenAccess.DatabaseLevelCache.IsCached(Telerik.OpenAccess.IObjectId)">
      <summary>True if object is cached, false if not.</summary>
      <param name="oid">IObjectId instance of the persistent object that should be checked.</param>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Backend">
      <summary>
            OpenAccess supported backend specification
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql">
      <summary>Microsoft Sql Server</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql2000">
      <summary>Microsoft Sql Server 2000</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql2005">
      <summary>Microsoft Sql Server 2005</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.MsSql2008">
      <summary>Microsoft Sql Server 2008</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.Oracle">
      <summary>Oracle Server</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.Oracle9">
      <summary>Oracle Server 9.0</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.Oracle10">
      <summary>Oracle Server 10.0</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.Oracle11">
      <summary>Oracle Server 11.0</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.MySql">
      <summary>MySql Server</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.SqlAnywhere">
      <summary>Sybase IAnywhere Server</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.Ads">
      <summary>Sybase Advantage Database Server</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.Firebird">
      <summary>Firebird Server</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.SqlCe">
      <summary>Microsoft Sql CE Server</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.SqlAzure">
      <summary>Microsoft Sql Azure Server</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.VistaDb">
      <summary>VistaDB embedded database</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.SQLite">
      <summary>SQLite embedded database</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.FamilyMask">
      <summary>Mask to get the server family</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Backend.VersionMask">
      <summary>Mask to get the server version</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.CodeGenDataAttribute">
      <summary>
            Serves as a holder for the CLR attributes a MetaItem may be tagged with.
            These atrributes are then applied durring the code generation of the OpenAccess persistent classes when attribute only mapping is used.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.CodeGenDataAttribute.#ctor">
      <summary>
            Initializes a new instance of the CodeGenDataAttribute class.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.DefaultMapping">
      <summary>
            Default Mapping for Metadata container
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaItem">
      <summary>
            Represents the base item class for all the metadata in the Telerik OpenAccess ORM metadata model. 
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MetaItem.propDescription">
      <summary>
            The key for the id attribute
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaItem.#ctor(System.String,System.String)">
      <summary>
            Initializes a new MetaItem instance with the required parameters
            </summary>
      <param name="name">defines the name of the meta item</param>
      <param name="description">defines a description for the meta item</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaItem.ToString">
      <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
      <returns>A string representation of value of this instance.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaItem.MetaDataProperties">
      <summary>
            Gets the list of properties of the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaItem.Description">
      <summary>
            Gets the description of the item.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaItem.Name">
      <summary>
            Gets the name of the item.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.Default">
      <summary>
            Returns the original values for the default mappings (not altered by user).
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.OptimisticConcurrencyControlStrategy">
      <summary>
            Controls the default value for the concurrency control strategy.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.CacheStrategy">
      <summary>
            Controls the default value for the cache strategy.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.NullForeignKey">
      <summary>
            Controls the default value for whether foreign keys can be null.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.UseDelimitedSQL">
      <summary>
            Controls if plain or delimited SQL is used.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.CLRMap">
      <summary>
            Gets the default translation of CLR types into the ADO world.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.ADOMap">
      <summary>
            Gets the default translation of ADO types.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.UseStoredProceduresForInsert">
      <summary>
            Controls whether stored procedures are used for insert operations
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.UseStoredProceduresForUpdate">
      <summary>
            Controls whether stored procedures are used for update operations
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.DefaultMapping.UseStoredProceduresForDelete">
      <summary>
            Controls whether stored procedures are used for delete operations
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.FieldDirection">
      <summary>
            Defines identifiers used to indicate the direction of parameter and argument
            declarations.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.FieldDirection.In">
      <summary>
            An incoming field.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.FieldDirection.Out">
      <summary>
            An outgoing field.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.FieldDirection.Ref">
      <summary>
            A field by reference.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ComposableType">
      <summary>
            Represents a wrapper around a runtime Type for design time purposes
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ComposableType.#ctor(System.String)">
      <summary>
            Initializes a new Composable type instance
            </summary>
      <param name="fullName">Defines the full name of the type</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ComposableType.#ctor(System.String,System.String)">
      <summary>
            Initializes a new Composable type instance
            </summary>
      <param name="name">Defines the name of the type</param>
      <param name="nameSpace">Defines the namespace of the type</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ComposableType.#ctor(System.Type)">
      <summary>
            Initializes a new Composable type instance
            </summary>
      <param name="type">Defines all properties of the type</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ComposableType.Name">
      <summary>
            Gets the name of the current type
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ComposableType.FullName">
      <summary>
            Gets the full name of the current type
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ComposableType.Namespace">
      <summary>
            Gets the namespace on which the current type is defined
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ComposableType.AssemblyQualifiedName">
      <summary>
            Gets the assembly qualified name if it is defined.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.IColumnDescriptor">
      <summary>
            Description of a mapped column
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IColumnDescriptor.Name">
      <summary>
            Gets the name of the column in delimited form.
            </summary>
      <value>Delimited name of the column</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IColumnDescriptor.Table">
      <summary>
            Gets the description for the table that this column is part of.
            </summary>
      <value>
            Description of the table
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.IdentityType">
      <summary>
            Defines identifiers for types of entities identity provided by the Telerik OpenAccess ORM.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.IdentityType.Default">
      <summary>
            Specifies that the default value for the identity type will be used by the runtime.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.IdentityType.Internal">
      <summary>
            Specifies that the identity is managed internally for the type by Telerik OpenAccess ORM and it is not visible as a field in the type.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.IdentityType.SingleField">
      <summary>
            Specifies that a single field in the respective type will hold the identity information.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.IdentityType.MultipleField">
      <summary>
            Specifies that a multiple fields in the respective type will hold the identity information.
            Also one needs to provide a class that implements the IOblectId and manages the identity information.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.InheritanceStrategy">
      <summary>
            Defines identifiers for types of inheritance provided by the Telerik OpenAccess ORM.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InheritanceStrategy.Default">
      <summary>
            Specifies that the default value for the inheritance strategy will be used by the runtime.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InheritanceStrategy.Flat">
      <summary>
            Defines an inheritance strategy where all classes share a single table. 
            Discriminator column is required for the complete definition.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InheritanceStrategy.Vertical">
      <summary>
            Defines an inheritance strategy where each type has its own table. The table contains only the members defined for the respective type.
            The root base type table must contain a discriminator column.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InheritanceStrategy.Horizontal">
      <summary>
            Defines an inheritance strategy where each type has its own table. As the base types should be abstract, they will not have tables mapped to 
            them and every concrete type will have columns that contain base class fields information.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ITableDescriptor">
      <summary>
            Contains a description of a mapped table .
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ITableDescriptor.Name">
      <summary>
            Gets the complete name of the table in delimited form.
            </summary>
      <value>Delimited name of the column</value>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.KeyGenerator">
      <summary>
            Defines the key generator used for a specific table in the backend
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.Default">
      <summary>
            Specifies that the default value for the key generator will be used by the runtime.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.Autoinc">
      <summary>
            Defines the 'AUTOINC' key generator
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.Guid">
      <summary>
            Defines the 'Guid' key generator
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.HighLow">
      <summary>
            Defines the 'HighLow' key generator
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.KeyGenerator.Verify">
      <summary>
            Defines the 'Verify' key generator
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MemberAccessModifier">
      <summary>
            Defines the access modifiers for the MetaMember class
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MemberAccessModifier.Public">
      <summary>
            Public
            A public member.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MemberAccessModifier.Assembly">
      <summary>
            Assembly
            A member that is accessible to any class within the same assembly.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MemberAccessModifier.Private">
      <summary>
            Private
            A private member.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MemberAccessModifier.Family">
      <summary>
            Family
            A member that is accessible within the family of its class and derived classes.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MemberAccessModifier.FamilyOrAssembly">
      <summary>
            FamilyOrAssembly
            A member that is accessible within its class, its derived classes in any
            assembly, and any class in the same assembly.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MemberInheritanceModifier">
      <summary>
            Defines the inheritance modifiers for the MetaMember class
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MemberInheritanceModifier.None">
      <summary>
            None
            No inheritance modifier applied.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MemberInheritanceModifier.Abstract">
      <summary>
            Abstract
            An abstract member.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MemberInheritanceModifier.Final">
      <summary>
            Final
            A member that cannot be overridden in a derived class.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaAssociation">
      <summary>
            Represents an association in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.#ctor(Telerik.OpenAccess.Metadata.AssociationType)">
      <summary>
            Initializes a new instance of the MetaAssociation class with the association type as a parameter.
            </summary>
      <param name="type">defines the association type of associations available in the Telerik OpenAccess ORM meta model.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,System.String)">
      <summary>
            Initializes a new instance of the MetaAssociation class with the association type as a parameter.
            </summary>
      <param name="name">defines the name of the association</param>
      <param name="type">defines the association type of associations available in the Telerik OpenAccess ORM meta model.</param>
      <param name="description">defines the description of the association</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaAssociation.AssociationType">
      <summary>
            Gets the association type of associations available in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaAssociation.AssociationEnds">
      <summary>
            Gets the list of ends for this association type.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaAttributeKind">
      <summary>
            Enumeration that specifies the kind of the MetaAttribute
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MetaAttributeKind.Primitive">
      <summary>
            Specifies that a meta attribute is of primitive kind
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MetaAttributeKind.Reference">
      <summary>
            Specifies that a meta attribute is of reference kind
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MetaAttributeKind.Collection">
      <summary>
            Specifies that a meta attribute is of collection kind
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.MetaAttributeKind.Complex">
      <summary>
            Specifies that a meta attribute is of complex kind
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetadataContainer">
      <summary>
             On the conceptual level, the MetaDataContainer class represents a container that will be mapped to a 
             database object in the storage. The MetaDataContainer class can describe all persisant storage artifacts like tables, views, 
             stored procedures, indexes, constraints, etc. It also can describe all conceptual level artifacts like classes, properties, fields, 
             relationships, etc.
             </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the MetadataContainer class.
            </summary>
      <param name="description">defines the description of the MetadataContainer</param>
      <param name="name">defines the name of the MetadataContainer</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.#ctor">
      <summary>
            Initializes a new instance of the MetadataContainer class without a name and description.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the MetadataContainer class with a name.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.ToString">
      <summary>
            Returns a temporary string representation of the content of this container.
            </summary>
      <returns>Content of the container in a string representation</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataContainer.FromString(System.String)">
      <summary>
            Returns a meta data container whose content was deserialized from the temporary representation.
            </summary>
      <param name="temporaryRepresentation">String representation of the content</param>
      <returns>Filled MetaDataContainer</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.PersistentTypes">
      <summary>
            Gets a list of types that are mapped to the corresponding artifacts like tables available in the relational store.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Tables">
      <summary>
            Gets a list of tables that are available in the current container instance.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Views">
      <summary>
            Gets a list of views that are available in the current container instance.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Constraints">
      <summary>
            Gets a list of constraints that are available in the current container instance.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Indexes">
      <summary>
            Gets a list of indexes that are available in the current container instance.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.StoredProcedures">
      <summary>
            Gets a list of stored procedures that are available in the current container instance.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Schemas">
      <summary>
            Gets a list of schema names that are available in the current container instance.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Interfaces">
      <summary>
            Gets a list of persistent interfaces that can be implemented by some of the persistent types
            that are part of the current container instance
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.Structs">
      <summary>
            Gets a list of persistent structs that can be referenced by some of the persistent types
            that are part of the current container instance
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.DefaultMapping">
      <summary>
            Gets the default mapping. This is used for all non specified settings at the mapping nodes.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.HighLowKeyGenerator">
      <summary>
            Gets the settings for the high low key generator.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.NameGenerator">
      <summary>
            Gets the settings for the name generator.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.BackendType">
      <summary>
            Gets the settings for the backend type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetadataContainer.DefaultNamespace">
      <summary>
            Gets the default namespaces for the persistent types in this metadata container.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation">
      <summary>
            Represents a foreign key association in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.#ctor(Telerik.OpenAccess.Metadata.AssociationType,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn})">
      <summary>
            Initializes a new instance of the MetaForeignKeyAssociation class with the association type as a parameter.
            </summary>
      <param name="type">defines the association type of associations available in the Telerik OpenAccess ORM meta model.</param>
      <param name="columns">defines a list of columns that define the foreign keys involved in the current association.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},Telerik.OpenAccess.Metadata.Relational.MetaColumn,Telerik.OpenAccess.Metadata.Relational.MetaConstraint,System.String)">
      <summary>
            Initializes a new instance of the MetaForeignKeyAssociation class with the association type as a parameter.
            </summary>
      <param name="name">defines the name of the association</param>
      <param name="type">defines the association type of associations available in the Telerik OpenAccess ORM meta model.</param>
      <param name="columns">defines a list of columns that define the foreign keys involved in the current association.</param>
      <param name="discriminatorColumn">defines the discriminator column if this association requires a discriminator column</param>
      <param name="constraint">defines the constraint applied to the current association. If no constraint is applied, null is returned.</param>
      <param name="description">defines the description of the ForeignKeyAssociation</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.#ctor">
      <summary>
            Initializes a new instance of the MetaForeignKeyAssociation class with the association type as a parameter.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.Columns">
      <summary>
            Gets a list of columns that define the foreign keys involved in the current association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.HasDiscriminatorColumn">
      <summary>
            Gets whether the association requires a discriminator column. If the corresponding end in the association is represented by a type
            stored in a table that is polymorphic (contains multiple types)in the datastore
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.DiscriminatorColumn">
      <summary>
            Gets the discriminator column for this association if it requires a discriminator column. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.Constraint">
      <summary>
            Gets the constraint applied to the current association. If no constraint is applied, null is returned.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation.ValidAssociationDiscriminations">
      <summary>
            Gets the list of MetaTypeDiscrimination instances,each of which defines a type that is a valid association end
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaFunction">
      <summary>
            Represents the conceptual model for the function 
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaType">
      <summary>
            Represents a base class for all types in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaType.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the MetaType class with the required parameters.
            </summary>
      <param name="name">defines the name of the type</param>
      <param name="nameSpace">defines the namespace of the type</param>
      <param name="fullName">defines the full name of the type</param>
      <param name="description">defines the description of the MetaType</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaType.Namespace">
      <summary>
            Gets the namespace of the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaType.FullName">
      <summary>
            Gets the full name that includes both namespace and name of the current type.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaFunction.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.MetaFunctionParameter},Telerik.OpenAccess.Metadata.MetaFunctionParameter,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,System.String)">
      <summary>
            Initializes a new MetaFunction instance with the required parameters
            </summary>
      <param name="functionName">defines the name of the function</param>
      <param name="functionNamespace">defines the functions namespace</param>
      <param name="fullName">defines the full name of the function</param>
      <param name="description">defines the description of the function</param>
      <param name="parameters">defines the parameters that the function takes</param>
      <param name="returnParameter">defines the parameter being returned from the function</param>
      <param name="procedure">defines the stored procedure that is represented by the function</param>'
            <param name="commandText">defines command text to be used with this procedure</param></member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaFunction.#ctor">
      <summary>
            Initializes a new MetaFunction instance with the required parameters
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.Parameters">
      <summary>
            Gets the parameters of the function
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.ReturnParameter">
      <summary>
            Gets the return parameter of the function
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.StoredProcedure">
      <summary>
            Gets the stored procedure that coresponds to the function.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaFunction.CommandText">
      <summary>
            Gets the defined command text
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaFunctionParameter">
      <summary>
            Represents a function parameter
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionParameter.#ctor(System.String,System.String,System.Nullable{Telerik.OpenAccess.Metadata.FieldDirection},System.String)">
      <summary>
            Initializes a new MetaFunctionParameter instance with the required parameters
            </summary>
      <param name="name">defines the name of the parameter</param>
      <param name="type">defines the type of the parameter</param>
      <param name="direction">defines the direction of the parameter</param>
      <param name="description">defines the direction of the parameter</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaFunctionParameter.#ctor">
      <summary>
            Initializes a new MetaFunctionParameter instance with the required parameters
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaFunctionParameter.Type">
      <summary>
            Gets or sets the type of the parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaFunctionParameter.Direction">
      <summary>
            Gets or sets the direction of the parameter
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator">
      <summary>
            Represents the settings for HIGHLOW key generator.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.Default">
      <summary>
            Returns the original default values.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.TableName">
      <summary>
            Controls the name of the table that is used by the HighLow key generator.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.KeyColumnName">
      <summary>
            Controls the name of the column that holds the table names.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.ValueColumnName">
      <summary>
            Controls the name of the column that holds the highest value.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.KeyColumnLength">
      <summary>
            Controls the length of the column that holds the table names.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.CreateTable">
      <summary>
            Controls whether the table used by the HighLow key generator is generated automatically.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaHighLowKeyGenerator.PKConstraintName">
      <summary>
            Controls the name of the primary key constraint for the table that hold the keys and values of the HighLow key generator.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation">
      <summary>
            Represents a join table association in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.#ctor(Telerik.OpenAccess.Metadata.AssociationType,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Initializes a new instance of the MetaJoinTableAssociation class with the association type as a parameter.
            </summary>
      <param name="type">defines the association type of associations available in the Telerik OpenAccess ORM meta model.</param>
      <param name="fromColumns">defines a list of columns in the join table that define the 'from end' role in the association.</param>
      <param name="toColumns">defines a list of columns in the join table that define the 'to end' role in the association.</param>
      <param name="joinTable">defines the join table used by the current association.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.#ctor(Telerik.OpenAccess.Metadata.AssociationType,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Initializes a new instance of the MetaJoinTableAssociation class with the association type as a parameter.
            </summary>
      <param name="type">defines the association type of associations available in the Telerik OpenAccess ORM meta model.</param>
      <param name="fromColumns">defines a list of columns in the join table that define the 'from end' role in the association.</param>
      <param name="toColumns">defines a list of columns in the join table that define the 'to end' role in the association.</param>
      <param name="toKeyColumns">defines a list of columns in  in the join table that define the keys for the 'to end' role in the association.</param>
      <param name="joinTable">defines the join table used by the current association.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.#ctor(Telerik.OpenAccess.Metadata.AssociationType,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},Telerik.OpenAccess.Metadata.Relational.MetaColumn,Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Initializes a new instance of the MetaJoinTableAssociation class with the association type as a parameter.
            </summary>
      <param name="type">defines the association type of associations available in the Telerik OpenAccess ORM meta model.</param>
      <param name="fromColumns">defines a list of columns in the join table that define the 'from end' role in the association.</param>
      <param name="toColumns">defines a list of columns in the join table that define the 'to end' role in the association.</param>
      <param name="sequenceColumn">defines the sequence column for the join table used by the current association.</param>
      <param name="joinTable">defines the join table used by the current association.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.#ctor(System.String,Telerik.OpenAccess.Metadata.AssociationType,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},Telerik.OpenAccess.Metadata.Relational.MetaColumn,Telerik.OpenAccess.Metadata.Relational.MetaTable,System.Boolean,System.String)">
      <summary>
            Initializes a new instance of the MetaJoinTableAssociation class with the association type as a parameter.
            </summary>
      <param name="name">defines the name of the association</param>
      <param name="type">defines the association type of associations available in the Telerik OpenAccess ORM meta model.</param>
      <param name="fromColumns">defines a list of columns in the join table that define the 'from end' role in the association.</param>
      <param name="toColumns">defines a list of columns in the join table that define the 'to end' role in the association.</param>
      <param name="toKeyColumns">defines a list of columns in  in the join table that define the keys for the 'to end' role in the association.</param>
      <param name="sequenceColumn">defines the sequence column for the join table used by the current association.</param>
      <param name="joinTable">defines the join table used by the current association.</param>
      <param name="shouldUpdateSchema">defines a value indicating whether the relational store definition for the current type requires modification.</param>
      <param name="description">defines the description of the join table association</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.#ctor">
      <summary>
            Initializes a new instance of the MetaJoinTableAssociation class with the association type as a parameter.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.FromColumns">
      <summary>
            Gets a list of columns in the join table that define the 'from end' role in the association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.ToColumns">
      <summary>
            Gets a list of columns in the join table that define the 'to end' role in the association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.ToKeyColumns">
      <summary>
            Gets a list of columns in  in the join table that define the keys for the 'to end' role in the association, 
            in a case of dictionaries or maps.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.SequenceColumn">
      <summary>
            Gets the sequence column for the join table used by the current association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.JoinTable">
      <summary>
            Gets the join table used by the current association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.ShouldUpdateSchema">
      <summary>
            Gets a value indicating whether the relational store definition for the current type requires modification.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.FromConstraintName">
      <summary>
            Gets or Sets the name of the Foreign Key constraint that is used to enforce the 'from end' of the association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.ToConstraintName">
      <summary>
            Gets or Sets the name of the Foreign Key constraint that is used to enforce the 'to end' of the association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaJoinTableAssociation.KeyConstraintName">
      <summary>
            Gets or Sets the name of the Foreign Key constraint that is used to associate the key values of this association with the join table.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaMember">
      <summary>
            Represents a member that can be declared in any MetaType. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType)">
      <summary>
            Initializes a new instance of the MetaMember class with the required parameters.
            </summary>
      <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
      <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
      <param name="memberType">defines the type of the member.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaMember.#ctor(System.String,System.String,System.Boolean,Telerik.OpenAccess.Metadata.MetaType,System.Boolean,Telerik.OpenAccess.DataAccessKind,Telerik.OpenAccess.Metadata.NullValueBehavior,Telerik.OpenAccess.Metadata.LoadBehavior,System.Boolean,System.Nullable{Telerik.OpenAccess.Metadata.MemberAccessModifier},System.String,System.Nullable{Telerik.OpenAccess.Metadata.MemberInheritanceModifier})">
      <summary>
            Initializes a new instance of the MetaMember class with the required parameters.
            </summary>
      <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
      <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
      <param name="memberType">defines the type of the member.</param>
      <param name="visible">defines a value indicating whether the meta member is visible on the declaring type level or only associated with it.</param>
      <param name="artificial">defines whether this field is marked as artificial.</param>
      <param name="accessKind">defines the type of access to user data for the current type.</param>
      <param name="loadBehavior">defines whether this field is part of the default fetch group</param>
      <param name="structMember">defines whether the current type represents a member of a structure value type.</param>
      <param name="nullValue">defines the behavior of the member in case null value is assigned to it</param>
      <param name="memberAccessModifier">defines the access modifier for the member</param>
      <param name="description">defines the description for the field</param>
      <param name="inheritanceModifier">defines the inheritance modifier for the member</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaMember.GetPropertyOrFieldName">
      <summary>
            Returns the property name id set, the field name otherwise
            </summary>
      <returns>If Property name is set the property name, the fieldname otherwise</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.PropertyName">
      <summary>
            Gets the property name that is associated with this member on the conceptual level.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.IsVisible">
      <summary>
            Gets a value indicating whether the meta member is visible on the declaring type level or only associated with it.
            For example such are the internal identity meta members - they are bound ot each entity, but they are not visible as a
            customer browsable member of the class.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.MemberType">
      <summary>
            Gets the type of the member.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.DeclaringType">
      <summary>
            Gets the type on which this member is declared.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.IsArtificial">
      <summary>
            Gets whether this field is marked as artificial.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.LoadingBehavior">
      <summary>
            Gets whether this field is part of the default fetch group.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.DataAccessKind">
      <summary>
            Gets the type of access to user data for the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.NullValueBehavior">
      <summary>
            Gets the behavior of the member in case null value is assigned to it
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.MemberAccessModifier">
      <summary>
            Gets the access modifier for the member
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.MemberInheritanceModifier">
      <summary>
            Gets the inheritance modifier for the member
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaMember.IsStructMember">
      <summary>
            Gets or sets whether the current type represents a member of a structure value type.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaNameGenerator">
      <summary>
            Represents the settings for the default name generator.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.Default">
      <summary>
            Returns the original default values.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.MaxTableNameLength">
      <summary> Controls the max length in characters for a table name.</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.MaxColumnNameLength">
      <summary> Controls the max length in characters for a column name.</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.PKFieldSuffix">
      <summary> Controls the suffix added to table or field names to name primary key
            columns. The default is _id so the pk for the employee table will
            be employee_id.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.MaxConstraintNameLength">
      <summary> Controls the max length in characters for a constraint name.</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.MaxIndexNameLength">
      <summary> Controls the max length in characters for an index name.</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.MaxProcedureNameLength">
      <summary> Controls the max length in characters for a procedure name.</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.PKConstraintNamePrefix">
      <summary> Controls the prefix added to a table name to generate its primary key
            constraint name.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.FKConstraintNamePrefix">
      <summary> Set the prefix added to a reference constraint name. </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.WordBreak">
      <summary> Controls the string used to break 'words' when generating names from
            field and class names and so on.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SequenceColumnName">
      <summary> Cnotrols the name used for sequence columns in link tables. These are used
            to preserve the order of elements in ordered collections (lists and
            arrays).
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.ValueColumnName">
      <summary> Controls the name used for value columns in link tables where the values
            are not references to PC instances.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.KeyColumnName">
      <summary> Controls the name used for keys columns in link tables for maps where the
            keys are not references to PC instances.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.DiscriminatorColumnName">
      <summary> Controls the name used for classId columns. These are added to the table for
            the base class in an inheritance hierarchy.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.IndexNamePrefix">
      <summary> Controls the prefix used to generate index names.</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.UseModelNames">
      <summary> Controls whether shortened/mangled names are to be used for tables and
            columns or if model names (class names, field names) are to be used.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.PolyRefDiscriminatorColumnSuffix">
      <summary>
            Controls the string appended for polymorphic reference class id columns.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.Disambiguate">
      <summary>
            Controls whether duplicate names are disambiguated by appending an unique number.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.DisambiguateJoinTables">
      <summary>
            Controls whether duplicate join table names are disambiguated by appending an unique number.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.DisambiguateConstraints">
      <summary>
            Controls whether duplicate constraint names are disambiguated by appending an unique number.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.EnforceSimpleNames">
      <summary>
            Controls if non-standard characters like '/' are replaced even when model names are used.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SPDeleteFormat">
      <summary>
            Controls the name format for delete procedures.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SPDeleteJoinTableRowFormat">
      <summary>
            Controls the name format for join table row delete procedures.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SPUpdateFormat">
      <summary>
            Controls the name format for update procedures.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.SPInsertFormat">
      <summary>
            Controls the name format for insert procedures.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNameGenerator.NameCanStartWithUnderscore">
      <summary>
            Controls whether names can start with underscores; database dependend.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaNavigationMember">
      <summary>
            Represents a MetaNavigationMember in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.Multiplicity,Telerik.OpenAccess.Metadata.MetaAssociation,Telerik.OpenAccess.Metadata.MetaType)">
      <summary>
            Initializes a new instance of the MetaNavigationMember class with the required parameters.
            </summary>
      <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
      <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
      <param name="multiplicity">defines the multiplicity information about the relationship's end represented by the current type. </param>
      <param name="memberType">defines the type of the member.</param>
      <param name="association">defines the association that manages the 'end' represented by the current type.</param>
      <param name="keyType">defines the key type of the dictionary if this is member is represents a dictionary field</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.Multiplicity,Telerik.OpenAccess.Metadata.MetaAssociation,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the MetaNavigationMember class with the required parameters.
            </summary>
      <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
      <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
      <param name="multiplicity">defines the multiplicity information about the relationship's end represented by the current type. </param>
      <param name="memberType">defines the type of the member.</param>
      <param name="association">defines the association that manages the 'end' represented by the current type.</param>
      <param name="master">defines the information whether the current type represents the 'master role' end of a association</param>
      <param name="managed">defines whether association's end integrity is managed by Telerik OpenAccess ORM</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaNavigationMember.#ctor(System.String,System.String,System.Boolean,Telerik.OpenAccess.Metadata.MetaType,System.Boolean,Telerik.OpenAccess.DataAccessKind,Telerik.OpenAccess.Metadata.NullValueBehavior,Telerik.OpenAccess.Metadata.LoadBehavior,System.Boolean,Telerik.OpenAccess.Metadata.Multiplicity,Telerik.OpenAccess.Metadata.MetaAssociation,System.Boolean,System.Boolean,System.Boolean,Telerik.OpenAccess.Metadata.MetaType)">
      <summary>
            Initializes a new instance of the MetaNavigationMember class with the required parameters.
            </summary>
      <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
      <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
      <param name="visible">defines a value indicating whether the meta member is visible on the declaring type level or only associated 
            with it.</param>
      <param name="artificial">defines whether this field is marked as artificial.</param>
      <param name="multiplicity">defines the multiplicity information about the relationship's end represented by the current type. </param>
      <param name="memberType">defines the type of the member.</param>
      <param name="association">defines the association that manages the 'end' represented by the current type.</param>
      <param name="master">defines the information whether the current type represents the 'master role' end of a association</param>
      <param name="managed">defines whether association's end integrity is managed by Telerik OpenAccess ORM</param>
      <param name="depend">defines whether the state of association's end that the current member represents is dependent on the 
            operations applied on the corresponding end of the association.</param>
      <param name="nullValue">defines the behavior of the member in case null value is assigned to it</param>
      <param name="accessKind">defines the type of access to user data for the current type.</param>
      <param name="defaultFetchGroup">defines whether this field is part of the default fetch group</param>
      <param name="structMember">defines whether the current type represents a member of a structure value type.</param>
      <param name="keyType">defines the key type of the dictionary if this is member is represents a dictionary field</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.Multiplicity">
      <summary>
            Gets the multiplicity information about the relationship's end represented by the current type. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.Association">
      <summary>
            Gets the association that manages the 'end' represented by the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.Master">
      <summary>
            Gets the information whether the current type represents the 'master role' end of a association.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.IsManaged">
      <summary>
            Gets whether association's end integrity is managed by Telerik OpenAccess ORM.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.IsDependent">
      <summary>
            Gets whether the state of association's end that the current member represents is dependent on the operations applied on the 
            corresponding end of the association. It allows operations like cascading deletes to be executed.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.OrderBy">
      <summary>
            Gets or sets the 'OrderBy' expresion used in the SQL query when obtaining the records 
            that are part of a collection.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.KeyType">
      <summary>
            Gets the key type of the member if this member represents a dictionary field.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaNavigationMember.ClrType">
      <summary>
            Gets the .Net runtime type
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaPersistentType">
      <summary>
            Represents a persistent type in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaScopeType">
      <summary>
            Represents a base class for the MetaPersistentType and MetaStruct
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaScopeType.#ctor(System.String,System.String,System.String,Telerik.OpenAccess.Metadata.MetadataContainer,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.MetaMember},System.Nullable{Telerik.OpenAccess.Metadata.TypeAccessModifier},System.Nullable{Telerik.OpenAccess.Metadata.TypeInheritanceModifier},System.String)">
      <summary>
            Initializes a new instance of the MetaTypeBase class with the required parameters.
            </summary>
      <param name="name">defines the name of the type</param>
      <param name="nameSpace">defines the namespace of the type</param>
      <param name="fullName">defines the full name of the type</param>
      <param name="container">defines the root container that contains the whole metadata model.</param>
      <param name="members">defines the members collection</param>
      <param name="accessModifier">defines the Type access modifier for a member </param>
      <param name="inheritanceModifier">defines the Type inheritance modifier for a member</param>
      <param name="description">defines the description of the MetaScopeType</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaScopeType.TypeAccessModifier">
      <summary>
            Gets the Type access modifier for a member
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaScopeType.TypeInheritanceModifier">
      <summary>
            Gets the Type inheritance modifier for a member
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaScopeType.MetaDataContainer">
      <summary>
            The root instance containing the meta model where the current type is defined.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaScopeType.Members">
      <summary>
            Gets a list of the current type members.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Initializes a new instance of the MetaType class with the required parameters.
            </summary>
      <param name="name">defines the name of the type</param>
      <param name="nameSpace">defines the namespace of the type</param>
      <param name="table">defines the table mapped to the current type</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the MetaType class with the required parameters.
            </summary>
      <param name="name">defines the name of the type</param>
      <param name="nameSpace">defines the namespace of the type</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.#ctor(System.String,System.String,System.String,Telerik.OpenAccess.Metadata.MetadataContainer,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.MetaMember},Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.InheritanceStrategy,Telerik.OpenAccess.Metadata.KeyGenerator,System.Nullable{System.Int32},System.String,Telerik.OpenAccess.OptimisticConcurrencyControlStrategy,System.Boolean,System.Boolean,Telerik.OpenAccess.Metadata.IdentityType,System.String,Telerik.OpenAccess.DataAccessKind,Telerik.OpenAccess.Metadata.CacheStrategy,Telerik.OpenAccess.Metadata.Relational.MetaColumn,System.Nullable{Telerik.OpenAccess.Metadata.TypeAccessModifier},System.Nullable{Telerik.OpenAccess.Metadata.TypeInheritanceModifier},System.String)">
      <summary>
            Initializes a new instance of the MetaType class with the required parameters.
            </summary>
      <param name="name">defines the name of the type</param>
      <param name="nameSpace">defines the namespace of the type</param>
      <param name="fullName">defines the full name of the type</param>
      <param name="container">defines the root container that contains the whole metadata model.</param>
      <param name="members">defines the members collection</param>
      <param name="table">defines the table mapped to the current type</param>
      <param name="inheritanceStrategy">defines the inheritance strategy</param>
      <param name="keyGenerator">defines the key generator used</param>
      <param name="classId">defines the class Id</param>
      <param name="discriminatorValue">
      </param>
      <param name="optimisticConcurrencyControlStrategy">defines the concurrency control mechanism.</param>
      <param name="updateSchema">defines whether the relational store definition for the current type requires modification.</param>
      <param name="artificial">defines value that represents if the current type is artificial.</param>
      <param name="identityType">defines the identity type of the current type.</param>
      <param name="identityClassType">defines the System.Type of the class that represents the identity of the current type</param>
      <param name="accessKind">defines the type of access to user data for the current type.</param>
      <param name="cacheStrategy">The database level cache strategy </param>
      <param name="discriminatorColumn">defines the column that hold the discriminator value</param>
      <param name="accessModifier">defines the Type access modifier for the class</param>
      <param name="inheritanceModifier">defines the Type inheritance modifier for the class</param>
      <param name="description">defines the description of the class</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaPersistentType.#ctor">
      <summary>
            Initializes a new instance of the MetaType class.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.Table">
      <summary>
            Gets the MetaTable instance that is mapped to the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.Interfaces">
      <summary>
            Gets the list of persistent interfaces implemented by the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.BaseType">
      <summary>
            Gets or sets the type from which the current type directly inherits.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.DerivedTypes">
      <summary>
            Gets a list of types that have the current type as their base type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.InheritanceStrategy">
      <summary>
            Gets the inheritance strategy for the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.KeyGeneratorName">
      <summary>
            Gets the name of the key generator used.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.ClassId">
      <summary>
            The in-memory Id used to distinguish a particular instance.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.DiscriminatorValue">
      <summary>
            The database class ID used to distiguish a particular instance when loaded.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.DiscriminatorColumn">
      <summary>
            Gets the column that holds the discriminator value
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.OptimisticConcurrencyControlStrategy">
      <summary>
            Gets the concurency control strategy used during write time.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.ShouldUpdateSchema">
      <summary>
            Gets a value indicating whether the relational store definition for the current type requires modification.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.IsArtificial">
      <summary>
            Gets whether this field is marked as artificial.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.IdentityType">
      <summary>
            Gets the identity type of the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.IdentityClassTypeName">
      <summary>
            Gets the name for the class that represents the identity of the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.DataAccessKind">
      <summary>
            Gets the type of access to user data for the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.FetchGroups">
      <summary>
            Gets the fetch groups defined for the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPersistentType.CacheStrategy">
      <summary>
            Gets the database level cache strategy 
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaPrimitiveMember">
      <summary>
            Represents a member that can be declared in any MetaType. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType,Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
      <summary>
            Initializes a new instance of the MetaPrimitiveMember class with the required parameters.
            </summary>
      <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
      <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
      <param name="memberType">defines the type of the member.</param>
      <param name="column">defines the name of the column within the data source to map from.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType)">
      <summary>
            Initializes a new instance of the MetaPrimitiveMember class with the required parameters.
            </summary>
      <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
      <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
      <param name="memberType">defines the type of the member.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.MetaType,System.Boolean,System.Boolean,Telerik.OpenAccess.DataAccessKind,Telerik.OpenAccess.Metadata.NullValueBehavior,Telerik.OpenAccess.Metadata.LoadBehavior,Telerik.OpenAccess.Metadata.Relational.MetaColumn,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{Telerik.OpenAccess.Metadata.MemberAccessModifier},System.String,System.Nullable{Telerik.OpenAccess.Metadata.MemberInheritanceModifier})">
      <summary>
            Initializes a new instance of the MetaPrimitiveMember class with the required parameters.
            </summary>
      <param name="fieldName">defines the field name that is associated with this member on the conceptual level.</param>
      <param name="propertyName">defines the property name that is associated with this member on the conceptual level.</param>
      <param name="memberType">defines the type of the member.</param>
      <param name="visible">defines a value indicating whether the meta member is visible on the declaring type level or only associated with it.</param>
      <param name="structMember">defines whether the current type represents a member of a structure value type.</param>
      <param name="artificial">defines whether this field is marked as artificial.</param>
      <param name="column">defines the name of the column within the data source to map from.</param>
      <param name="identity">defines whether the current type represents the owner's type identity.</param>
      <param name="version">defines whether the current type represents the owner's type version.</param>
      <param name="accessKind">defines the type of access to user data for the current type.</param>
      <param name="nullValue">defines the behavior of the member in case null value is assigned to it</param>
      <param name="classId">defines whether the current type represents the owner's class identity.</param>
      <param name="defaultFetchGroup">defines whether this field is part of the default fetch group</param>
      <param name="serializedToBlob">defines whether this field is serialized to a blob column</param>
      <param name="accessModifier">defines the access modifier for the member</param>
      <param name="description">defines the description of the member</param>
      <param name="inheritanceModifier">defines the inheritance modifier for the member</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.#ctor">
      <summary>
            Initializes a new instance of the MetaPrimitiveMember class.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.Column">
      <summary>
            Gets the name of the column within the data source to map from.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.IsIdentity">
      <summary>
            Gets whether the current type represents the owner's type identity.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.IsClassId">
      <summary>
            Gets whether the current type represents the owner's type class id.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.IsSerializedToBlob">
      <summary>
            Gets whether the data in the current field is serialized to a blob column
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveMember.IsVersion">
      <summary>
            Gets whether the current type represents the owner's version in cases of 'version' concurrency mechanism.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaPrimitiveType">
      <summary>
            Represents a primitive type in the Telerik OpenAccess ORM meta model
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveType.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the MetaPrimitiveType by a given clr type
            </summary>
      <param name="clrType">Defines the clr type that is represented by this primitive type</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaPrimitiveType.#ctor(System.Type,System.String)">
      <summary>
            Initializes a new instance of the MetaPrimitiveType by a given clr type
            </summary>
      <param name="clrType">Defines the clr type that is represented by this primitive type</param>
      <param name="description">defines the description of the member</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveType.ClrType">
      <summary>
            Gets the Clr Type representation of this primitive type
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveType.IsNullable">
      <summary>
            Gets whether this primitive type is a nullable type
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaPrimitiveType.IsEnum">
      <summary>
            Gets whether this primitive type is an enum type
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaScopedItem">
      <summary>
            Represents the base item class for all the metadata in the Telerik OpenAccess ORM metadata type hierarchy that is a part of a 
            relational schema. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaScopedItem.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the MetaScopedItem class with the required schema name as a parameter.
            </summary>
      <param name="name">defines the name of the item</param>
      <param name="schemaName">defines the schema name of the item</param>
      <param name="description">defines the description of the item</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaScopedItem.SchemaName">
      <summary>
            Gets the name of the schema of the current type.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaStruct">
      <summary>
            Represents a persistent struct type in the Telerik OpenAccess ORM meta model
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaStruct.#ctor(System.String,System.String)">
      <summary>
            Initializes a new MetaStruct instance with the required parameters
            </summary>
      <param name="name">defines the name of the struct</param>
      <param name="nameSpace">defines the namespace of the struct</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaStruct.#ctor(System.String,System.String,System.String,Telerik.OpenAccess.Metadata.MetadataContainer,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.MetaMember},System.Nullable{Telerik.OpenAccess.Metadata.TypeAccessModifier},System.Nullable{Telerik.OpenAccess.Metadata.TypeInheritanceModifier},System.String)">
      <summary>
            Initializes a new MetaStruct instance with the required parameters
            </summary>
      <param name="name">defines the name of the struct</param>
      <param name="nameSpace">defines the namespace of the struct</param>
      <param name="fullName">defines the full name of the struct</param>
      <param name="container">defines the root container that contains the whole metadata model.</param>
      <param name="members">defines the members collection</param>
      <param name="accessModifier">defines the Type access modifier for the stucture</param>
      <param name="inheritanceModifier">defines the Type inheritance modifier for the structure</param>
      <param name="description">defines the description of the struct</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaStruct.#ctor">
      <summary>
            Initializes a new MetaStruct instance.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination">
      <summary>
            Represents the information necessary to discriminate a type from other types in a hierarchy.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.#ctor(System.String,Telerik.OpenAccess.Metadata.MetaPersistentType,System.String)">
      <summary>
            Initializes a new instance of the MetaTypeDiscrimination type
            </summary>
      <param name="description">specifies the description of the discriminaiton</param>
      <param name="persistentType">specifies the MetaPersistentType which needs to be discriminated within the hierarchy</param>
      <param name="typeId">specifies the value used to discriminate 'persistentType' from other types within a hierarchy</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.PersistentType">
      <summary>
            Gets the MetaPersistentType for which 'this' instance holds discriminating information
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaTypeDiscrimination.DiscriminatingValue">
      <summary>
            Gets the value used to discriminate the 'PersistentType' within a hierarchy
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Multiplicity">
      <summary>
            Represents the multiplicity information about the End of a relationship type. 
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Multiplicity.ZeroOrOne">
      <summary>
            A lower bound is zero and an upper bound is one.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Multiplicity.One">
      <summary>
            A lower bound is one and an upper bound is one.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Multiplicity.Many">
      <summary>
            A lower bound is zero and an upper bound is N (one or more).
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.NullValueBehavior">
      <summary>
            Enumeration specifying the behavior of the fields that have null value assigned
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.NullValueBehavior.Exception">
      <summary>
            Specifies that an exception will be raised when a field has null value assigned
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.NullValueBehavior.Default">
      <summary>
            Specifies that the default action will be taken, should null value be assigned to a field
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.NullValueBehavior.None">
      <summary>
            Specifies that there will be no exception when a field has a null value assigned
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy">
      <summary>
            Specifies the concurrency control options for the persistent types in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Default">
      <summary>
            Defines that the default value for the optimistic concurrency control strategy will be used by the runtime.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.None">
      <summary>
            Defines that no concurrency checks will be done on the database server.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Version">
      <summary>
            Defines that a version column is used to detect concurrent updates. The version number is incremented on every update and the previous version 
            number is included in the where clause. This is the fastest and safest optimistic concurrency control mode. 
            This is the default and suggested concurrency mode.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Timestamp">
      <summary>
            Defines that a timestamp column is to be used to detect concurrent updates. The timestamp is set on every update and the previous value 
            is included in the where clause. This may not be safe if updates happen quicker than the resolution of the timestamp field. 
            It is included to support legacy database schemas.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Changed">
      <summary>
            Defines that previous values of all changed columns will be included in the where clause. This provides more fine-grained optimistic 
            concurrency control as different transactions may modify different fields of the same instance. This mode can be used when the database 
            schema allows no modifications (adding a version column for example). Float and double fields are excluded as they are not exact (rounding procedures are different across databases and also
            differ from the way .NET is handling it).
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.Backend">
      <summary>
            Defines that a backend specific concurrency control mechanism is used.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OptimisticConcurrencyControlStrategy.All">
      <summary>
            Defines that the values of all columns (changed or not) will be included in the where clause.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.CacheStrategy">
      <summary>
            Describes the strategy for the database level cache
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CacheStrategy.Default">
      <summary>
            Specifies that the default value for the cache strategy will be used by the runtime.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CacheStrategy.No">
      <summary> Do not cache instances of this class.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CacheStrategy.Yes">
      <summary> Cache instances of this class.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CacheStrategy.All">
      <summary> Cache all instances of this class as soon as an instance is requested.
            All rows from its table will be read and cached whenever an instance
            is requested but not found in cache. This may work well for small
            static tables when using a big cache.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaInterface">
      <summary>
            Represents a persistent interface in the Telerik OpenAccess ORM meta model
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaInterface.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the MetaInterface class with the required parameters.
            </summary>
      <param name="name">defines the name of the interface</param>
      <param name="nameSpace">defines the namespace of the interface</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaInterface.#ctor(System.String,System.String,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.MetaInterface})">
      <summary>
            Initializes a new instance of the MetaInterface class with the required parameters.
            </summary>
      <param name="name">defines the name of the interface</param>
      <param name="nameSpace">defines the namespace of the interface</param>
      <param name="interfaces">defines a collection of MetaInterfaces</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaInterface.#ctor(System.String,System.String,System.String,System.Nullable{Telerik.OpenAccess.Metadata.TypeAccessModifier},System.String,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.MetaInterface})">
      <summary>
            Initializes a new instance of the MetaInterface class with the required parameters.
            </summary>
      <param name="name">defines the name of the interface</param>
      <param name="nameSpace">defines the namespace of the interface</param>
      <param name="fullName">defines the full name of the interface</param>
      <param name="accessModifier">defines the access modifier for the interface</param>
      <param name="description">defines the description of the interface</param>
      <param name="interfaces">defines a collection of MetaInterfaces</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaInterface.Implementations">
      <summary>
            Gets a collection of the persistent types that implement this interface
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaInterface.TypeAccessModifier">
      <summary>
            Gets or sets the Type access modifier for the instance
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaInterface.Interfaces">
      <summary>
            Gets a collection of the interfaces
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaInterface.Associations">
      <summary>
            Gets a collection of the the associations for the polymorphic references that are pointing to this interface.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping">
      <summary>
            Describes a mapping between the CLR type system and the database type system.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.#ctor">
      <summary>
            Initializes a new instance of the DefaultTypeMapping class
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.ToString">
      <summary>
            Gives a string representation for this type mapping.
            </summary>
      <returns>String representation</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.SqlType">
      <summary>
            Gets the type of data stored in the column.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.IsNullable">
      <summary>
            Gets or sets a value that indicates whether the column accepts null values.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Length">
      <summary>
            Gets the maximum number of digits used to represent the column contents.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Scale">
      <summary>
            Gets the number of decimal places to which the values are resolved.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.ClrType">
      <summary>
            Controls the name for the CLR type that is mapped.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.AdoType">
      <summary>
            The internal type mapping.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Equality">
      <summary>
            Controls whether this mapping can be used for equality tests on the database.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Backend">
      <summary>
            Controls the name of the backend when set.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.ConverterFactory">
      <summary>
            Controls the name of a converter factory that should be used for this mapping.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.DefaultTypeMapping.Enabled">
      <summary>
            Controls if the mapping is enabled.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaColumn">
      <summary>
      </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaColumn.#ctor(System.String,Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Initializes a new instance of the MetaColumn class with the required parameters.
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="table">defines the table that is associated with the current column.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaColumn.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},Telerik.OpenAccess.Metadata.Relational.MetaTable,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)">
      <summary>
            Initializes a new instance of the MetaColumn class with the required parameters.
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="sqlType">defines the type of data stored in the column.</param>
      <param name="nullable">defines or sets a value that indicates whether the column accepts null values.</param>
      <param name="precision">defines the maximum number of digits used to represent the column contents.</param>
      <param name="scale">defines the number of decimal places to which the values are resolved.</param>
      <param name="table">defines the table that is associated with the current column.</param>
      <param name="primaryKey">defines a value indicating whether or not the current column is a primary key in a constraint.</param>
      <param name="foreignKey">defines a value indicating whether or not the current column is a foreign key in a constraint.</param>
      <param name="autoInc">defines a value that indicates whether the column automatically increments the value of the column for new rows added to the table.</param>
      <param name="isBackendVersion">defines if the current column is a backend specific version column.</param>
      <param name="shared">defines if the current column is shared.</param>
      <param name="adoType">defines the internal type mapping.</param>
      <param name="description">defines the description of the column</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.SqlType">
      <summary>
            Gets the type of data stored in the column.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.IsNullable">
      <summary>
            Gets or sets a value that indicates whether the column accepts null values.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.Length">
      <summary>
            Gets the maximum number of digits used to represent the column contents.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.Scale">
      <summary>
            Gets the number of decimal places to which the values are resolved.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.Table">
      <summary>
            Gets the table that is associated with the current column.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.IsPrimaryKey">
      <summary>
            Gets a value indicating whether or not the current column is a primary key in a constraint.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.IsForeignKey">
      <summary>
            Gets a value indicating whether or not the current column is a foreign key in a constraint.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.IsBackendCalculated">
      <summary>
            Gets a value that indicates whether the column is calculated by the backend.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.IsShared">
      <summary>
            Gets if the current column is shared.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.AdoType">
      <summary>
            The internal type mapping.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.TargetField">
      <summary>
            Gets or Sets the field this column might be pointing to, in case it is part of a FK reference.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.TargetClass">
      <summary>
            Gets the class this column might be pointing to, in case it is part of a FK reference.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaColumn.IsBackendVersion">
      <summary>
            Gets or sets if the column is a backend-specific version column
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaConstraint">
      <summary>
            Represents a constraint definition in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.NoConstraint">
      <summary>
            Denotes that a relational constraint should not be generated for a MetaForeignKeyAssociation or a MetaJoinTableAssociation.
            Use this instance as a value to the 'Constraint' property, to specify that no relational constraint should be generated for an association.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.#ctor(System.String,Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.Relational.MetaTable,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn})">
      <summary>
            Itializes a new instance of the MetaConstraint class with the required parameters.
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="source">defines the "source table" that takes part in this constraint.</param>
      <param name="destination">defines the "destination table" that takes part in this constraint.</param>
      <param name="columns">defines the list of source columns for the "source table" on which this constraint is defined.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.#ctor(System.String,Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Itializes a new instance of the MetaConstraint class with the required parameters.
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="source">defines the "source table" that takes part in this constraint.</param>
      <param name="destination">defines the "destination table" that takes part in this constraint.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.#ctor(System.String,System.String,System.String,Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.Relational.MetaTable,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},System.String)">
      <summary>
            Itializes a new instance of the MetaConstraint class with the required parameters.
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="schemaName">defines the schema of the current type.</param>
      <param name="fullName">defines the full name of the type</param>
      <param name="source">defines the "source table" that takes part in this constraint.</param>
      <param name="destination">defines the "destination table" that takes part in this constraint.</param>
      <param name="columns">defines the list of source columns for the "source table" on which this constraint is defined.</param>
      <param name="description">defines the description of the constraint</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.FullName">
      <summary>
            Gets the full name that includes both schema and name of the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.SourceTable">
      <summary>
            Gets the "source table" that takes part in this constraint.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.DestinationTable">
      <summary>
            Gets the "destination table" that takes part in this constraint.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaConstraint.SourceColumns">
      <summary>
            Gets the list of source columns for the "source table" on which this constraint is defined.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup">
      <summary>
            Represents a fetch group in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.#ctor(System.String)">
      <summary>
            Creates a new MetaFetchGroup instance based on the name and the user-defined condition passed 
            as arguments.
            </summary>
      <param name="name">The name of the fetch group.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.#ctor(System.String,System.Boolean,System.String)">
      <summary>
            Creates a new MetaFetchGroup instance based on the name and the user-defined condition passed 
            as arguments.
            </summary>
      <param name="name">The name of the fetch group.</param>
      <param name="userDefined">Indicates whether the current fetch group is defined by the user.</param>
      <param name="description">the description of the fetchg group.</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.IsUserDefined">
      <summary>
            Indicates whether the current fetch group is defined by the user.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup.FetchGroupMembers">
      <summary>
            Gets a list of fetch group members, represented by the current fetch group. 
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember">
      <summary>
             Represents a fetch group member in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember.#ctor(Telerik.OpenAccess.Metadata.MetaMember)">
      <summary>
            Creates a new MetaFetchGroupMember instance based on the MetaMember instance passed as an argument.
            </summary>
      <param name="member">defines the member instance that is part of a fetch group.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember.#ctor(System.String,Telerik.OpenAccess.Metadata.MetaMember,System.String)">
      <summary>
            Creates a new MetaFetchGroupMember instance based on the MetaMember instance passed as an argument.
            </summary>
      <param name="name">defines the name of the fetch group member.</param>
      <param name="member">defines the member instance that is part of a fetch group.</param>
      <param name="description">defines the description of the fetch group member</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember.Member">
      <summary>
            Represents a concrete meta member used in the current fetch group.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaIndex">
      <summary>
            Represents an index definition in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndex.#ctor(System.String,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Itializes a new instance of the MetaIndex class with the required parameters.
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="columns">defines the list of columns included in the index.</param>
      <param name="table">defines the table that is associated with the current index.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaIndex.#ctor(System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn},Telerik.OpenAccess.Metadata.Relational.MetaTable,System.String)">
      <summary>
            Itializes a new instance of the MetaIndex class with the required parameters.
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="clustered">defines whether the index is clustered.</param>
      <param name="unique">defines whether the index is uniqe.</param>
      <param name="columns">defines the list of columns included in the index.</param>
      <param name="table">defines the table that is associated with the current index.</param>
      <param name="description">defines the description of the index</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndex.Clustered">
      <summary>
            Gets whether the index is clustered.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndex.Unique">
      <summary>
            Gets whether the index is uniqe.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndex.Columns">
      <summary>
            Gets the list of columns included in the index.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaIndex.Table">
      <summary>
            Gets the table that is associated with the current index.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure">
      <summary>
             Represents a stored procedure in the Telerik OpenAccess ORM meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.#ctor(System.String)">
      <summary>
            Initializes a new instance of the MetaStoredProcedure class
            </summary>
      <param name="name">defines the name of the current type.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the MetaStoredProcedure class
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="schemaName">defines the schema name of the current type.</param>
      <param name="fullName">defines the full name that includes both the schema and the name of the current type.</param>
      <param name="description">defines the description of the stored procedure</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.#ctor(System.String,System.String,System.String,System.Boolean,System.String)">
      <summary>
            Itializes a new instance of the MetaStoredProcedure class
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="schemaName">defines the schema name of the current type.</param>
      <param name="fullName">defines the full name that includes both the schema and the name of the current type.</param>
      <param name="shouldUpdateSchema">defines if the schema should be updated</param>
      <param name="description">defines the description of the stored procedure</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.FullName">
      <summary>
            Gets the full name that includes both the schema and the name of the current type.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.Parameters">
      <summary>
            Gets the parameters list of the stored procedure. The default is an empty collection.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure.ShouldUpdateSchema">
      <summary>
            Gets a value indicating whether the relational store definition for the current type requires modification.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping">
      <summary>
            Describes the stored procedure and its parameters.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.DynamicSql">
      <summary>
            Denotes that dynamically created Sql will be used to perform the operation.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.#ctor">
      <summary>
            Creates an empty stored procedure mapping instance which denotes that dynamically created Sql will be used to perform the operation 
            for which this instance is created.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.#ctor(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping},System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping})">
      <summary>
            Initializes a stored procedure mapping.
            </summary>
      <param name="procedure">represents existing procedure</param>
      <param name="parameterMapping">defines all the parameters mapping</param>
      <param name="oldParameterMapping">defines the mapping for the old parameters</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.#ctor(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping})">
      <summary>
            Initializes a stored procedure mapping.
            </summary>
      <param name="procedure">represents existing procedure</param>
      <param name="parameterMapping">defines all the parameters mapping</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping},System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping},System.String)">
      <summary>
            Initializes a stored procedure mapping.
            </summary>
      <param name="name">defines the name of the stored procedure mapping</param>
      <param name="schemaName">defines the schema to which this procedure belongs</param>
      <param name="procedure">represents existing procedure</param>
      <param name="parameterMapping">defines all the parameters mapping</param>
      <param name="oldParameterMapping">defines the mapping for the old parameters</param>
      <param name="description">defines the description of the proceduremapping</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.Procedure">
      <summary>
            Gets the stored procedure
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.ParameterDefinition">
      <summary>
            Gets the parameters used in the stored procedure
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.ParameterDefinitionOld">
      <summary>
            Gets the parameters used for concurency control
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.UseDynamicSql">
      <summary>
            Gets whether dynamically created Sql will be used to perform the operation for which this instance is created.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.RowsAffectedParameter">
      <summary>
            Gets or sets the name of the parameter that carries the count of number of rows affected, after the procedure is executed.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping.AutoIncParameter">
      <summary>
            Gets or sets the name of the parameter that carries the identity value generated by the server for a column,usually the primary key column
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping">
      <summary>
            Describes the structure defining a parameter mapping.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.#ctor(System.String,System.String,Telerik.OpenAccess.Metadata.Relational.ParameterMappingTarget)">
      <summary>
            Initializes an instance of the MetaParameterMapping
            </summary>
      <param name="requiredParameter">defines the name of the artifact that will supply the value for the parameter.It could be a field,column etc depending on the
            'mappingTarget'</param>
      <param name="mappedParameter">defines the name of the parameter as it should be on the database</param>
      <param name="mappingTarget">specifies the target of the parameter mapping</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.RequiredParameter">
      <summary>
            Gets the required parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.MappedParameter">
      <summary>
            Gets the Mapped parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping.MappingTarget">
      <summary>
            Gets or sets the target of a procedure parameter mapping. A procedure parameter can be mapped to a single column,single columned field,
            constant or it could be an OUT parameter that carries the 'RowsAffected' value or the identity value generated for a primary 
            key column
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.ParameterMappingTarget">
      <summary>
            Represents the target of a procedure parameter mapping. A procedure parameter can be mapped to a single column,single columned field,
            constant or it could be an OUT parameter that carries the 'RowsAffected' value or the identity value generated for a primary 
            key column
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Relational.ParameterMappingTarget.Column">
      <summary>
            Denotes that the procedure parameter obtains it's value from a column with the specfied name
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Relational.ParameterMappingTarget.Field">
      <summary>
            Denotes that the procedure parameter obtains it's value from a field with the specified name
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.Relational.ParameterMappingTarget.Constant">
      <summary>
            Denotes that the procedure parameter takes the constant value that is specified
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter">
      <summary>
            Describes the parameters of an MetaStoredProcedure class.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.#ctor(System.String,Telerik.OpenAccess.ParameterMode,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>
            Initializes a new instance of the MetaStoredProcedureParameter class with the name of the 
            parameter.
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="mode">defines the mode of the parameter</param>
      <param name="sqlType">represents the sql type of the parameter</param>
      <param name="scale">defines the scale of the parameter</param>
      <param name="length">defines the length of the parameter</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.#ctor(System.String,Telerik.OpenAccess.ParameterMode,System.String)">
      <summary>
            Initializes a new instance of the MetaStoredProcedureParameter class with the name of the 
            parameter.
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="mode">defines the mode of the parameter</param>
      <param name="sqlType">represents the sql type of the parameter</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.#ctor(System.String,Telerik.OpenAccess.ParameterMode,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String)">
      <summary>
            Initializes a new instance of the MetaStoredProcedureParameter class with the name of the 
            parameter.
            </summary>
      <param name="name">defines the name of the current type.</param>
      <param name="mode">defines the mode of the parameter</param>
      <param name="adoType">represents the ado type of the parameter</param>
      <param name="sqlType">represents the sql type of the parameter</param>
      <param name="scale">defines the scale of the parameter</param>
      <param name="length">defines the length of the parameter</param>
      <param name="isNull">defines if the parameter is nullable</param>
      <param name="description">defines the description of the procedure parameter</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.Mode">
      <summary>
            Gets or sets the mode of the parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.AdoType">
      <summary>
            Gets or sets the ado type of the parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.SqlType">
      <summary>
            Gets or sets the SQL type of the parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.Length">
      <summary>
            Gets or sets the length of the parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.Scale">
      <summary>
            Gets or sets the scale of the parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.IsNullable">
      <summary>
            Gets or sets the nullable attribute of the parameter
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter.DeclaringProcedure">
      <summary>
            Gets or sets the MetaStoredProcedure on which this parameter is declared.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaTable">
      <summary>
            Describes a database table.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaTable.#ctor(System.String)">
      <summary>
            Constructs a table instance.
            </summary>
      <param name="name">Table name</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaTable.#ctor(System.String,System.String,System.String,System.Boolean,System.String,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,System.String)">
      <summary>
            Constructs a table instance.
            </summary>
      <param name="name">Table name</param>
      <param name="schemaName">Name of database schema to which the table belongs.</param>
      <param name="fullName">Table name with schema and database prefix, should be delimited.</param>
      <param name="readOnly">true if table does not accept insert, update or delete operations</param>
      <param name="pkConstraintName">The name of the primary key constraint</param>
      <param name="insertProcedure">MetaStoredProcedureMapping for the insert procedure</param>
      <param name="updateProcedure">MetaStoredProcedureMapping for the update procedure</param>
      <param name="deleteProcedure">MetaStoredProcedureMapping for the delete procedure</param>
      <param name="removeRowsProcedure">MetaStoredProcedureMapping for the remove rows procedure</param>
      <param name="description">defines the description of the table</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.FullName">
      <summary>
            Gets the full name of the database table, prefixed with schema and database name if valid. 
            If the backend support delimitation it is delimeted.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.Columns">
      <summary>
            Gets the list of columns in this table.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.ReadOnly">
      <summary>
            Gets the read only state of the table
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.PKConstraintName">
      <summary>
            Gets the name of the primary key constraint of this table.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.Constraints">
      <summary>
            Gets a list of constraints that are defined on this table.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.Indexes">
      <summary>
            Gets a list of indexes that are defined on this table.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.InsertStoredProcedure">
      <summary>
            Gets or sets the stored procedure used for all insert operations. This can be null.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.UpdateStoredProcedure">
      <summary>
            Gets or sets the stored procedure mapping used for all update operations. This can be null.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.DeleteStoredProcedure">
      <summary>
            Gets or sets the stored procedure mapping mapping used for all delete operations. This can be null.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaTable.RemoveRowsStoredProcedure">
      <summary>
            Gets or sets the stored procedure mapping used for all join table operations to delete a specific collection content. This can be null.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Relational.MetaView">
      <summary>
            Describes a database view.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaView.#ctor(System.String)">
      <summary>
            Constructs a view instance.
            </summary>
      <param name="name">View name</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Relational.MetaView.#ctor(System.String,System.String,System.String,System.Boolean,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,System.String)">
      <summary>
            Constructs a view instance.
            </summary>
      <param name="name">View name</param>
      <param name="schemaName">Name of database schema to which the view belongs.</param>
      <param name="fullName">View name with schema and database prefix (usual equals to name)</param>
      <param name="readOnly">true if the view does not accept insert, update or delete operations</param>
      <param name="insertProcedure">Procedure used for insert operations</param>
      <param name="updateProcedure">Procedure used for update operations</param>
      <param name="deleteProcedure">Procedure used for delete operations</param>
      <param name="removeRowsProcedure">Procedure to delete all rows in a join table for a specific collection</param>
      <param name="description">defines the description of the view</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.FullName">
      <summary>
            Gets the full name of the database view, prefixed with schema and database name if valid. Usually equals to the Name.
            </summary>
      <value>Fully qualified name of the view</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.Columns">
      <summary>
            Gets the list of columns in this view.
            </summary>
      <value>List of all columns in this view.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.ReadOnly">
      <summary>
            Gets the read only state of the view
            </summary>
      <value>True means that no insert, update or delete operations are allowed.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.PKConstraintName">
      <summary>
            Gets the name of the primary key constraint of this view.
            </summary>
      <value>Primary key constraint name</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.Constraints">
      <summary>
            Gets a list of constraints that are defined on this view.
            </summary>
      <value>List of all constraints that are defined on this view.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Relational.MetaView.Indexes">
      <summary>
            Gets a list of indexes that are defined on this view.
            </summary>
      <value>List of all indexes that defined on this view.</value>
    </member>
    <member name="T:Telerik.OpenAccess.DataAccessKind">
      <summary>
            Describes the type of access to user data for a persistent type.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.DataAccessKind.Default">
      <summary>
            Specifies that the default value for the data access kind will be used by the runtime.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.DataAccessKind.ReadWrite">
      <summary>
            The type or field allows full access to user data. All CRUD modifications are allowed.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.DataAccessKind.InsertOnly">
      <summary>
            The type or field allows only reading and inserting user data. No modifications (update or delete) are allowed.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.DataAccessKind.ReadOnly">
      <summary>
            The type or field allows only reading user data. No CUD modifications (create, update or delete) are allowed.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ParameterMode">
      <summary>
            Defines identifiers used to indicate the direction of parameter 
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ParameterMode.In">
      <summary>
            An incoming parameter
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ParameterMode.Out">
      <summary>
            An outgoing parameter
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ParameterMode.InOut">
      <summary>
            An inout parameter
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ReflectionHelper">
      <summary>
            A class containing helper methods for doing common reflection tasks
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.IsAutoProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines if the given property info instance is an automatic property.
            </summary>
      <param name="property">The property.</param>
      <returns>Whether the property is an automatic property.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.IsMarkedWithAttribute``1(System.Reflection.MemberInfo)">
      <summary>
            Determines if the given member is decorated with an attribute of type T.
            </summary>
      <typeparam name="T">The type of the attribute to check for.</typeparam>
      <param name="member">The member.</param>
      <returns>Whether the member is decorated with an attribute of the given type.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.IsMarkedWithAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines if the given member is decorated with an attribute of type T.
            </summary>
      <typeparam name="T">The type of the attribute to check for.</typeparam>
      <param name="member">The member.</param>
      <param name="inherit">
      </param>
      <returns>Whether the member is decorated with an attribute of the given type.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.GetStorageForAutoProperty(System.Reflection.PropertyInfo,System.Collections.Generic.IList{System.Reflection.FieldInfo})">
      <summary>
            Finds the field that is used for storage by an automatic property.
            </summary>
      <param name="property">The automatic property.</param>
      <param name="persistentFields">The list of fields to be searched.</param>
      <returns>The backing field for the given automatic property, if found; null otherwise.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ReflectionHelper.GetStorageForAutoProperty(System.String,System.Collections.Generic.IList{System.Reflection.FieldInfo})">
      <summary>
            Finds the field that is used for storage by an automatic property.
            </summary>
      <param name="propertyName">The name of the automatic property.</param>
      <param name="persistentFields">The list of fields to be searched.</param>
      <returns>The backing field for the given automatic property, if found; null otherwise.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.TypeAccessModifier">
      <summary>
            Defines the Type access modifiers
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.TypeAccessModifier.Public">
      <summary>
            Public
            A public member.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.TypeAccessModifier.Assembly">
      <summary>
            Assembly
            A member that is accessible to any class within the same assembly.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.TypeInheritanceModifier">
      <summary>
            Defines the Type inheritance enumeration
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.TypeInheritanceModifier.None">
      <summary>
            None
            No inheritance modifier applied.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.TypeInheritanceModifier.Abstract">
      <summary>
            Abstract
            An abstract type.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.TypeInheritanceModifier.Final">
      <summary>
            Final
            A type that cannot be overridden in a derived class.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem">
      <summary>
            Represents a ComboBox item with a name.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.#ctor(System.Object,System.String)">
      <summary>
            Creates a new ComboBox item with a name.
            </summary>
      <param name="item">The item</param>
      <param name="displayMember">The item name</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.ToString">
      <summary>
            Returns the display name of the ComboBox item.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.Item">
      <summary>
            Gets the item.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Validation.ComboBoxItem.ItemName">
      <summary>
            Gets the item name.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingIntValue">
      <summary>
            Represents a resolution action for a model item with incorrect int value
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.IResolutionAction">
      <summary>
            Resolution action for validation error in OpenAccess meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.IResolutionAction.Execute">
      <summary>
            Executes this resolution action.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IResolutionAction.Kind">
      <summary>
            Gets the kind.
            </summary>
      <value>The kind.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IResolutionAction.Description">
      <summary>
            Gets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IResolutionAction.NeedsUserInput">
      <summary>
            Gets a value indicating whether [needs user input].
            </summary>
      <value>
        <c>true</c> if [needs user input]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IResolutionAction.CanExecute">
      <summary>
            Gets a value indicating whether this instance can execute.
            </summary>
      <value>
        <c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingIntValue.IntValue">
      <summary>
            Gets or sets the value of the item
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Validation.IItemRequiresMultipleSelectionAction">
      <summary>
            Represents a resolution action for a model item which requires multiple items to be selected from a collection.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemRequiresMultipleSelectionAction.SelectedItems">
      <summary>
            Gets or sets the selected item.
            </summary>
      <value>The selected item.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemRequiresMultipleSelectionAction.AvailableItems">
      <summary>
            Gets the available items to choose from.
            </summary>
      <value>The available items.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Validation.IItemRequiresSelectionAction">
      <summary>
            Represents a resolution action for a model item which requires an item to be chosen from a collection.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemRequiresSelectionAction.SelectedItem">
      <summary>
            Gets or sets the selected item.
            </summary>
      <value>The selected item.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemRequiresSelectionAction.AvailableItems">
      <summary>
            Gets the available items to choose from.
            </summary>
      <value>The available items.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingNameAction">
      <summary>
            Represents a resolution action for a model item with a missing name.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingNameAction.ItemName">
      <summary>
            Gets or sets the name of the item.
            </summary>
      <value>The name of the item.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Validation.IItemWithMissingNameAction.ErrorMessage">
      <summary>
            Gets the error message that describes why this action cannot be executed.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ResolutionActionKind">
      <summary>
            Specifies the kind of the resolution action.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.ResolutionActionKind.Automatic">
      <summary>
            Automatic resolution action.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.ResolutionActionKind.Manual">
      <summary>
            Manual resolution action.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.IValidationDetail">
      <summary>
            Represents a validation detail used by the OpenAccess meta model validation.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IValidationDetail.Message">
      <summary>
            Gets the message.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IValidationDetail.Type">
      <summary>
            Gets the type of the validation.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IValidationDetail.OriginalException">
      <summary>
            Gets the original exception.
            </summary>
      <value>The original exception.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IValidationDetail.Actions">
      <summary>
            Gets the actions.
            </summary>
      <value>The actions.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.IValidationRule">
      <summary>
            Represents a validation rule for an OpenAccess meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.IValidationRule.CanValidateItem(Telerik.OpenAccess.Metadata.MetaItem)">
      <summary>
            Determines whether this instance the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
        <c>true</c> if this instance [can validate item] the specified item; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.IValidationRule.Validate(Telerik.OpenAccess.Metadata.MetaItem)">
      <summary>
            Validates the specified item.
            </summary>
      <param name="item">The item.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.IValidationRule.SetMetadataContainer(Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Sets the container which is being validated.
            </summary>
      <param name="container">The container.</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IValidationRule.FriendlyName">
      <summary>
            Gets the friendly name of the validation rule.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ValidationMode">
      <summary>
            Specifies the validation mode used durring OpenAccess meta model validation
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.ValidationMode.StopOnFirstError">
      <summary>
            Validation stops on the first error.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.ValidationMode.FindAllErrors">
      <summary>
            Finds all errors
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.IValidationRuleProvider">
      <summary>
      </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.IValidationRuleProvider.GetValidationRuleList">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IValidationRuleProvider.AddResolutionActions">
      <summary>
      </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaModelValidation">
      <summary>
            Class used for validation of an OpenAccess meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaModelValidation.#ctor">
      <summary>
            Initializes a new instance of the MetaModelValidation class.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaModelValidation.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the MetaModelValidation class.
            </summary>
      <param name="addResolutionActions">Specifies whether resolution actions will be added for validation details.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaModelValidation.Validate(Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Validates the specified meta model.
            </summary>
      <param name="metaModel">The meta model.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaModelValidation.Validate(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.ValidationMode)">
      <summary>
            Validates the specified meta model.
            </summary>
      <param name="metaModel">The meta model.</param>
      <param name="validationMode">The validation mode.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ValidationDetailType">
      <summary>
            Enumeration that specifies the validation detail type
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.ValidationDetailType.Error">
      <summary>
            Defines the detail as error
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.ValidationDetailType.Warning">
      <summary>
            Defines the detail as warning
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.Validation.ValidationException">
      <summary>
            This exception is thrown when there validation errors.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.Validation.ValidationException.#ctor(Telerik.OpenAccess.Metadata.IValidationResult)">
      <summary>
            Initializes a new instance of the ValidationException class.
            </summary>
      <param name="validationResult">The validation result containing the validation errors.</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.Validation.ValidationException.ValidationResult">
      <summary>
            The validation result containing the validation details.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.IValidationResult">
      <summary>
            Represents the result of the validation of a specific OpenAccess meta model.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IValidationResult.IsValid">
      <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IValidationResult.Details">
      <summary>
            Gets the validation details.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.ValidationResult">
      <summary>
            Represents the result of the validation of a specific OpenAccess meta model.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ValidationResult.#ctor">
      <summary>
            Initializes a new instance of the ValidationResult class.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ValidationResult.#ctor(System.Collections.Generic.IList{Telerik.OpenAccess.Metadata.IValidationDetail})">
      <summary>
            Initializes a new instance of the ValidationResult class with a list of IValidationDetail objects.
            </summary>
      <param name="validationDetails">The list of IValidationDetail objects</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.ValidationResult.GetValidationStatus">
      <summary>
            Gets the validation status.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ValidationResult.IsValid">
      <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ValidationResult.Telerik#OpenAccess#Metadata#IValidationResult#Details">
      <summary>
            Gets the validation details.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.ValidationResult.Details">
      <summary>
            Gets the validation details.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.CUDOperation">
      <summary>
            Enumeration specifying the operation for the CUD mapping.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CUDOperation.Insert">
      <summary>
            The insert operation.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CUDOperation.Update">
      <summary>
            The update operation.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.CUDOperation.Delete">
      <summary>
            The delete operation.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetadataWorker">
      <summary>
            A class used for OpenAccess meta model manipulation.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneStringList(System.Collections.Generic.List{System.String})">
      <summary>
            Clones the string list.
            </summary>
      <param name="stringList">The string list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaItemHelper``1(``0,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the meta item helper.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="metaItem">The meta item.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetadataContainer(Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the metadata container.
            </summary>
      <param name="metadataContainer">The metadata container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Clones the meta table.
            </summary>
      <param name="metaTable">The meta table.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaTable(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the meta table.
            </summary>
      <param name="metaTable">The meta table.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaColumn(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
      <summary>
            Clones the meta column.
            </summary>
      <param name="metaColumn">The meta column.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaIndex(Telerik.OpenAccess.Metadata.Relational.MetaIndex)">
      <summary>
            Clones the index of the meta.
            </summary>
      <param name="metaIndex">Index of the meta.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaIndex(Telerik.OpenAccess.Metadata.Relational.MetaIndex,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the index of the meta.
            </summary>
      <param name="metaIndex">Index of the meta.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaView(Telerik.OpenAccess.Metadata.Relational.MetaView)">
      <summary>
            Clones the meta view.
            </summary>
      <param name="metaView">The meta view.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaView(Telerik.OpenAccess.Metadata.Relational.MetaView,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the meta view.
            </summary>
      <param name="metaView">The meta view.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaPersistentType(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Clones the type of the meta persistent.
            </summary>
      <param name="metaPersistentType">Type of the meta persistent.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaPersistentType(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the type of the meta persistent.
            </summary>
      <param name="metaPersistentType">Type of the meta persistent.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaPrimitiveType(Telerik.OpenAccess.Metadata.MetaPrimitiveType)">
      <summary>
            Clones the type of the meta primitive.
            </summary>
      <param name="metaPrimitiveType">Type of the meta primitive.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaType(Telerik.OpenAccess.Metadata.MetaType)">
      <summary>
            Clones the type of the meta.
            </summary>
      <param name="metaType">Type of the meta.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaConstraint(Telerik.OpenAccess.Metadata.Relational.MetaConstraint)">
      <summary>
            Clones the meta constraint.
            </summary>
      <param name="metaConstraint">The meta constraint.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaConstraint(Telerik.OpenAccess.Metadata.Relational.MetaConstraint,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the meta constraint.
            </summary>
      <param name="metaConstraint">The meta constraint.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaInterface(Telerik.OpenAccess.Metadata.MetaInterface)">
      <summary>
            Clones the meta interface.
            </summary>
      <param name="metaInterface">The meta interface.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaInterface(Telerik.OpenAccess.Metadata.MetaInterface,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the meta interface.
            </summary>
      <param name="metaInterface">The meta interface.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStruct(Telerik.OpenAccess.Metadata.MetaStruct)">
      <summary>
            Clones the meta struct.
            </summary>
      <param name="metaStruct">The meta struct.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStruct(Telerik.OpenAccess.Metadata.MetaStruct,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the meta struct.
            </summary>
      <param name="metaStruct">The meta struct.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedureMapping(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping)">
      <summary>
            Clones the meta stored procedure mapping.
            </summary>
      <param name="storedProcedureMapping">The stored procedure mapping.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedureMapping(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureMapping,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the meta stored procedure mapping.
            </summary>
      <param name="storedProcedureMapping">The stored procedure mapping.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaParameterMapping(Telerik.OpenAccess.Metadata.Relational.MetaParameterMapping)">
      <summary>
            Clones the meta parameter mapping.
            </summary>
      <param name="parameterMapping">The parameter mapping.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedureParameter(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter)">
      <summary>
            Clones the meta stored procedure parameter.
            </summary>
      <param name="storedProcedureParameter">The stored procedure parameter.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedureParameter(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the meta stored procedure parameter.
            </summary>
      <param name="storedProcedureParameter">The stored procedure parameter.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedure(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure)">
      <summary>
            Clones the meta stored procedure.
            </summary>
      <param name="storedProcedure">The stored procedure.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaStoredProcedure(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Clones the meta stored procedure.
            </summary>
      <param name="storedProcedure">The stored procedure.</param>
      <param name="container">The container.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaFetchGroupMember(Telerik.OpenAccess.Metadata.Relational.MetaFetchGroupMember)">
      <summary>
            Clones the meta fetch group member.
            </summary>
      <param name="metaFetchGroupMember">The meta fetch group member.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaFetchGroup(Telerik.OpenAccess.Metadata.Relational.MetaFetchGroup)">
      <summary>
            Clones the meta fetch group.
            </summary>
      <param name="metaFetchGroup">The meta fetch group.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaFunctionParameter(Telerik.OpenAccess.Metadata.MetaFunctionParameter)">
      <summary>
            Clones the meta function parameter.
            </summary>
      <param name="metaFunctionParameter">The meta function parameter.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaFunction(Telerik.OpenAccess.Metadata.MetaFunction)">
      <summary>
            Clones the meta function.
            </summary>
      <param name="metaFunction">The meta function.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaForeignKeyAssociation(Telerik.OpenAccess.Metadata.MetaForeignKeyAssociation)">
      <summary>
            Clones the meta foreign key association.
            </summary>
      <param name="metaForeignKeyAssociation">The meta foreign key association.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaJoinTableAssociation(Telerik.OpenAccess.Metadata.MetaJoinTableAssociation)">
      <summary>
            Clones the meta join table association.
            </summary>
      <param name="metaJoinTableAssociation">The meta join table association.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaAssociation(Telerik.OpenAccess.Metadata.MetaAssociation)">
      <summary>
            Clones the meta association.
            </summary>
      <param name="metaAssociation">The meta association.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaNavigationMember(Telerik.OpenAccess.Metadata.MetaNavigationMember)">
      <summary>
            Clones the meta navigation member.
            </summary>
      <param name="metaNavigationMember">The meta navigation member.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaPrimitiveMember(Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
      <summary>
            Clones the meta primitive member.
            </summary>
      <param name="metaPrimitiveMember">The meta primitive member.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaMember(Telerik.OpenAccess.Metadata.MetaMember)">
      <summary>
            Clones the meta member.
            </summary>
      <param name="metaMember">The meta member.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetDatabaseSchema(Telerik.OpenAccess.SPI.ISchemaReader)">
      <summary>
            Initializes a MetadataContainer instance containing the information about
            the full database schema.
            </summary>
      <param name="reader">A SchemaReader instance that contains information about the schema 
            like connection string, database provider name etc.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetSchemaTables(System.String,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Gets the tables that are part of a given database schema.
            </summary>
      <param name="schemaName">The name of the database schema.</param>
      <param name="container">The MetadataContainer that contains the full database with all it's
            schemas.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetSchemaViews(System.String,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Gets the database views that are part of a given database schema.
            </summary>
      <param name="schemaName">The name of the database schema.</param>
      <param name="container">The MetadataContainer that contains the full database with all it's
            schemas.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetSchemaStoredProcedures(System.String,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Gets the stored procedures that are part of a given database schema
            </summary>
      <param name="schemaName">The name of the database schema</param>
      <param name="container">The MetadataContainer that contains the full database with all it's
            schemas</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetSchemaConstraints(System.String,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Gets the foreign key constraints that are part of a given database schema.
            </summary>
      <param name="schemaName">The name of the database schema.</param>
      <param name="container">The MetadataContainer that contains the full database with all it's
            schemas.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetTableConstraints(System.String,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Gets the foreign key constraints that are part of a given table.
            </summary>
      <param name="fullName">The name of the table.</param>
      <param name="container">The MetadataContainer that contains the given table</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetPrimitiveMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Gets the primitive members that belong to a persistent type.
            </summary>
      <param name="persistentType">The persistent type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetNotNullablePrimitiveMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Gets the primitive members that belong to a persistent type that are not nullable.
            </summary>
      <param name="persistentType">The persistent type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetNavigationMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Gets the navigation members that belong to a persistent type.
            </summary>
      <param name="persistentType">The persistent type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetTableConstraints(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Gets the foreign key constraints that are part of a given table.
            </summary>
      <param name="table">The table that owns the constraints.</param>
      <param name="container">The MetadataContainer that contains the given table</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetTableConstraints(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.Relational.MetaTable},Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Gets the foreign key constraints that are part of a given table.
            </summary>
      <param name="tables">The tables that own the constraints.</param>
      <param name="container">The MetadataContainer that contains the given tables</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetRegularTablesFromModel(Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Obtains a collection of tables that should be mapped to a Persistent Class by default.
            These tables have not been detected as join tables.
            </summary>
      <param name="container">The MetadataContainer instance that contains the tables.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetJoinTablesFromModel(Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Obtains a collection of tables that are detected as join tables by the default mapping mechanism.
            </summary>
      <param name="container">The MetadataContainer instance that contains the tables.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.IsJoinTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Evaluates a table if it is a join table.
            </summary>
      <param name="table">The table to be evaluated.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetRelationshipsForClass(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Finds all relationships that a persistent type belongs to.
            </summary>
      <param name="persistentType">The persistent type.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetDictionaryTablesFromModel(Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Obtains a collection of tables that are detected as join tables that could be
            mapped as an IDictionary by the default mapping mechanism.
            </summary>
      <param name="container">The MetadataContainer instance that contains the tables.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindColumnByName(Telerik.OpenAccess.Metadata.Relational.MetaTable,System.String)">
      <summary>
            Retrieves a column from a given table by its name.
            </summary>
      <param name="table">The table that contains the column.</param>
      <param name="columnName">The name of the searched column.</param>
      <returns>The MetaColumn with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindColumnByName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String,System.String)">
      <summary>
            Retrieves a column from a given table by its name.
            </summary>
      <param name="container">The MetadataContainer instance that contains the table of
            the searched column.</param>
      <param name="tableName">The name of the table that contains the searched column.</param>
      <param name="columnName">The name of the searched column.</param>
      <returns>MetaColumn instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintBySourceColumns(System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn})">
      <summary>
            Retrieves a foreign key constraint by the columns that define the constraint in the owner table.
            In a 1:n relationshpip, these columns define the '1' end of the relationship.
            </summary>
      <param name="columns">The columns that define the constraint.</param>
      <returns>MetaConstraint instance that is associated with the given foreign key columns.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintByName(Telerik.OpenAccess.Metadata.Relational.MetaTable,System.String)">
      <summary>
            Retrieves a foreign key constraint by its name.
            </summary>
      <param name="ownerTable">The table that owns the constraint.</param>
      <param name="constraintName">The name of the searched foreign key constraint.</param>
      <returns>MetaConstraint instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintByName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String)">
      <summary>
            Retrieves a foreign key constraint by its name.
            </summary>
      <param name="container">The MetadataContainer instance that contains the constraint.</param>
      <param name="constraintName">The name of the searched foreign key constraint.</param>
      <returns>MetaConstraint instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaIndexByName(Telerik.OpenAccess.Metadata.Relational.MetaTable,System.String)">
      <summary>
            Retrieves a database index by its name.
            </summary>
      <param name="table">The name of the table associated with the searched index.</param>
      <param name="indexName">The name of the searched index.</param>
      <returns>MetaIndex instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPersistentTypeForTable(Telerik.OpenAccess.Metadata.MetadataContainer,System.String)">
      <summary>
            Retrieves a persistent type that is mapped to a given table.
            </summary>
      <param name="container">The MetadataContainer instance that contains the searched persistent type.</param>
      <param name="tableName">The name of the table that maps to the searched persistent type.</param>
      <returns>MetaPersistentType instance that is mapped to the specified table. If no persistent type is 
            mapped to that table - null is returned.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPersistentTypeForTable(Telerik.OpenAccess.Metadata.MetadataContainer,System.String,System.String)">
      <summary>
            Retrieves a persistent type that is mapped to a given table.
            </summary>
      <param name="container">The MetadataContainer instance that contains the searched persistent type.</param>
      <param name="tableName">The name of the table that maps to the searched persistent type.</param>
      <param name="schemaName">The name of the database schema that contains the table.</param>
      <returns>MetaPersistentType instance that is mapped to the specified table. If no persistent type is 
            mapped to that table - null is returned.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPersistentTypeForTable(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Retrieves a persistent type that is mapped to a given table.
            </summary>
      <param name="container">The MetadataContainer instance that contains the searched persistent type.</param>
      <param name="table">The table that maps to the searched persistent type.</param>
      <returns>MetaPersistentType instance that is mapped to the specified table. If no persistent type is 
            mapped to that table - null is returned.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindTableByName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String,System.String)">
      <summary>
            Retrieves a table by its name.
            </summary>
      <param name="container">The MetadataContainer instance that contains the table.</param>
      <param name="tableName">The name of the searched table.</param>
      <param name="schemaName">The schema of the searched table.</param>
      <returns>MetaTable instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindViewByName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String,System.String)">
      <summary>
            Retrieves a database view by its name.
            </summary>
      <param name="container">The MetadataContainer instance that contains the database view.</param>
      <param name="viewName">The name of the searched database view.</param>
      <param name="schemaName">The name of the schema of the searched database view.</param>
      <returns>MetaView instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetClrTypeForRelationalItem(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
      <summary>
            Resolves the .Net type for a database column.
            </summary>
      <param name="column">The column whose type is required.</param>
      <returns>System.Type that reflects the database type of the column.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetClrTypeForRelationalItem(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedureParameter)">
      <summary>
            Resolves the .Net type for a stored procedure parameter.
            </summary>
      <returns>System.Type that reflects the database type of stored procedure parameter.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetClrTypeForColumn(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
      <summary>
            Resolves the .Net type for a database column.
            </summary>
      <param name="column">The column whose type is required.</param>
      <returns>System.Type that reflects the database type of the column.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetPrimaryKeyColumns(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Gets the columns that are part of the primary key for a given table.
            </summary>
      <param name="table">The table whose primary key columns are to be obtained.</param>
      <returns>List of MetaColumn instances that are part of the primary key for the specified table.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetForeignKeyColumns(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Gets the foreign key columns for a given table.
            </summary>
      <param name="table">The table whose foreign key columns are to be obtained.</param>
      <returns>List of MetaColumn instances that are part of the primary key for the specified table.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetKeyGeneratorForTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Gets the relational key generator for a given table.
            </summary>
      <param name="table">The table whose key generator is to be obtained.</param>
      <returns>String representation of the relational key generator used for the specified table.
            If the table has no relational key generator - string.Empty is returned.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetIdentityType(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Gets the identity type for a given table.
            </summary>
      <param name="table">The table whose identity type is to be obtained.</param>
      <returns>IdenetityType.Single if the table has single primary key column. 
            IdentityType.Multiple if the table has a composite primary key.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetIdentityType(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Gets the identity type for a given persistentType.
            </summary>
      <param name="type">The persistent type whose identity type is to be obtained.</param>
      <returns>IdenetityType.Single if the persistent type has single identity member. 
            IdentityType.Multiple if the persistent type has multiple identity members.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetIdentityMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Gets the identity members for a persistent type.
            </summary>
      <param name="persistentType">The persistent type whose identity members are queried.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetGenericCollectionType(System.Type[])">
      <summary>
            Retrieves the System.Type for a generic colection by its generic arguments.
            </summary>
      <param name="genericArguments">The generic arguments of the colection.</param>
      <returns>System.Type that presents the type of the colection.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindColumnByName(System.String,System.String)">
      <summary>
            Retrieves a column from a given table by its name.
            </summary>
      <param name="tableName">The name of the table that contains the searched column.</param>
      <param name="columnName">The name of the searched column.</param>
      <returns>MetaColumn instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindColumnByTargetField(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
      <summary>
            Retrieves a column from a given table by its target field.
            </summary>
      <param name="table">The table that contains the searched column.</param>
      <param name="targetMember">The target field.</param>
      <returns>MetaColumn instance targeting the specified member.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPersistentTypeForTable(System.String)">
      <summary>
            Retrieves a persistent type that is mapped to a given table.
            </summary>
      <param name="tableName">The name of the table that maps to the searched persistent type.</param>
      <returns>MetaPersistentType instance that is mapped to the specified table. If no persistent type is 
            mapped to that table - null is returned.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPersistentTypeForTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Retrieves a persistent type that is mapped to a given table.
            </summary>
      <param name="table">The table that maps to the searched persistent type.</param>
      <returns>MetaPersistentType instance that is mapped to the specified table. If no persistent type is 
            mapped to that table - null is returned.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindTableByName(System.String)">
      <summary>
            Retrieves a table by its name.
            </summary>
      <param name="tableName">The name of the searched table.</param>
      <returns>MetaTable instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindTableByName(System.String,System.String)">
      <summary>
            Retrieves a table by its name.
            </summary>
      <param name="tableName">The name of the searched table.</param>
      <param name="schemaName">The name of the schema of the searched table.</param>
      <returns>MetaTable instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindViewByName(System.String)">
      <summary>
            Retrieves a database view by its name.
            </summary>
      <param name="viewName">The name of the searched database view.</param>
      <returns>MetaView instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindViewByName(System.String,System.String)">
      <summary>
            Retrieves a database view by its name.
            </summary>
      <param name="viewName">The name of the searched database view.</param>
      <param name="schemaName">The name of the database schema.</param>
      <returns>MetaView instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintByName(System.String)">
      <summary>
            Retrieves a foreign key constraint by its name.
            </summary>
      <param name="constraintFullName">The full name of the searched foreign key constraint.</param>
      <returns>MetaConstraint instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindConstraintByName(System.String,System.String)">
      <summary>
            Retrieves a foreign key constraint by its name.
            </summary>
      <param name="constraintName">The name of the searched foreign key constraint.</param>
      <param name="tableName">The name of the table of the searched foreign key constraint.</param>
      <returns>MetaConstraint instance with the specified name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaTypeByName(System.String,System.String)">
      <summary>
            Retrieves a persistent class by its full name.
            </summary>
      <param name="name">The name of the class.</param>
      <param name="nameSpace">The namespace of the class.</param>
      <returns>MetaPersistentType instance that has the specified name and namespace.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaTypeByName(System.String)">
      <summary>
            Retrieves a persistent class by its full name.
            </summary>
      <param name="fullName">The full name of the class.</param>
      <returns>MetaPersistentType instance that has the specified full name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaTypeByName(Telerik.OpenAccess.Metadata.MetadataContainer,System.String)">
      <summary>
            Retrieves a persistent class by its full name.
            </summary>
      <param name="container">The meta model that contains the searched type.</param>
      <param name="fullName">The full name of the class.</param>
      <returns>MetaPersistentType instance that has the specified full name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaMemberByFieldName(System.String,Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Retrieves a member of a persistent type by its field name.
            </summary>
      <param name="fieldName">The name of the searched member.</param>
      <param name="ownerType">The persistent type that owns the member.</param>
      <returns>MetaMember instance that has the specified field name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaMemberByName(System.String,Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Retrieves a member of a persistent type by its field or property name.
            </summary>
      <param name="name">The name of the searched member.</param>
      <param name="ownerType">The persistent type that owns the member.</param>
      <returns>MetaMember instance that has the specified field or property name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPrimitiveMemberMappedToColumn(Telerik.OpenAccess.Metadata.Relational.MetaColumn,Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Retrieves a primitive member of a persistent type mapped to particular column.
            </summary>
      <param name="column">The column mapped to the primitive member.</param>
      <param name="ownerType">The persistent type that owns the member.</param>
      <returns>MetaMember instance that has the specified field or property name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMetaPrimitiveMemberMappedToColumn(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
      <summary>
            Retrieves a primitive member of a persistent type mapped to particular column.
            </summary>
      <param name="column">The column mapped to the primitive member.</param>
      <returns>MetaMember instance that has the specified field or property name.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindMultiplicityForReference(System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn})">
      <summary>
            Finds the multiplicity for a reference by the foreign key columns that define that reference.
            </summary>
      <param name="foreignKeyColumns">The foreign key columns that define the reference.</param>
      <returns>Multiplicity.One if there is at least one non-nullable column. Otherwise,
            Multiplicity.ZeroOrOne is returned.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindPrimaryKeyMembers(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Finds the primary key members for a specified persistent type
            </summary>
      <param name="persistentType">The persistent type that owns the primary key members.</param>
      <returns>Collection of all fields that are part of the identity of the specified persistent type.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.FindUnmappedColumns(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Finds the columns of a table that are not mapped to members of a persistent type.
            </summary>
      <param name="declaringType">The persistent type.</param>
      <returns>The columns that are not mapped.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapTableToPersistentType(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Maps a table to a persistent class that contains no members.
            </summary>
      <param name="table">The table that is being mapped.</param>
      <returns>MetaPersistentType that contains no members.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapPrimitiveMember(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
      <summary>
            Maps a column to a primitive member.
            </summary>
      <param name="column">The column that is to be mapped.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapReference(Telerik.OpenAccess.Metadata.Relational.MetaConstraint)">
      <summary>
            Maps a reference member of a persistent type.
            </summary>
      <param name="constraint">The foreign key constraint that defines the reference.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapReference(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn})">
      <summary>
            Maps a reference member of a persistent type.
            </summary>
      <param name="ownerType">The persistent type that owns the reference.</param>
      <param name="referencedType">The type that is referenced by the owner.</param>
      <param name="foreignKeyColumns">The foreign key colums that are associated with the 
            relationship. These colums are defined at the owner table.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.HandleInheritanceInOneToOneRelationship(Telerik.OpenAccess.Metadata.Relational.MetaConstraint)">
      <summary>
            Handles a one-to-one relationship as vertical inheritance.
            </summary>
      <param name="constraint">
      </param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapCollection(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPersistentType,System.Collections.Generic.List{Telerik.OpenAccess.Metadata.Relational.MetaColumn})">
      <summary>
            Maps a collection member of a persistent type without a reference member on the oposite side 
            of the association
            </summary>
      <param name="ownerOfCollection">The persistent type that owns the collection member</param>
      <param name="referencedType">The referenced type of the collection. This is the
            type of the elements of the collection</param>
      <param name="masterTableColumns">The columns on the table of the referenced type that are used for
            calculating the colection</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapJoinTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Maps a join table to collections on both sides of an 
            m:n relationship associated with the join table.
            </summary>
      <param name="joinTable">The join table to be mapped.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.MapJoinTable(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.Relational.MetaConstraint,Telerik.OpenAccess.Metadata.Relational.MetaConstraint)">
      <summary>
            Maps a join table to collections on both sides of an 
            m:n relationship associated with the join table.
            </summary>
      <param name="joinTable">The join table to be mapped.</param>
      <param name="fromConstraint">The constraint pointing to the owner of the master collection
            in the m:n relationship.</param>
      <param name="toConstraint">The constraint pointitng to the owner of the inverse collection
            in the m:n relationship.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CreateInverseCollection(Telerik.OpenAccess.Metadata.MetaNavigationMember)">
      <summary>
            Creates an inverse collection for 1:n or m:n relationships. 
            Such collection can be created when a reference or master collection is already defined 
            on the other side of the relationship.
            </summary>
      <param name="master">The master of the inverse collection. That is the navigation member 
            on the oposite side of the relationship.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.ChangeNamespace(System.Collections.Generic.IEnumerable{Telerik.OpenAccess.Metadata.MetaType},System.String)">
      <summary>
            Changes the namespace of a collection of persistent types.
            </summary>
      <param name="persistentTypes">The persistent types whose namespace is to be changed.</param>
      <param name="nameSpace">The new namespace for the specified persistent types.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetUniqueNamespaces">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.UpdateSchemasCollection(Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Ensures that the Schemas collection of the MetadataContainer contains all schemas from the model
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.AddPersistentType(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Adds a persistent type in an existing model. Reference members are created 
            for all already mapped persistent types
            whose tables have foreign key constraints pointing to the table of the newly mapped type.
            </summary>
      <param name="persistentType">The new persistent type to be added in the model.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemovePersistentType(Telerik.OpenAccess.Metadata.MetaPersistentType)">
      <summary>
            Removes a persistent type from an existing model. All references and collections of other existing
            persistent types that point to this persistent type are also removed.
            </summary>
      <param name="persistentType">The persistent type to be removed from the model.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.AddMetaInterface(Telerik.OpenAccess.Metadata.MetaInterface)">
      <summary>
            Adds a new interface to the meta model.
            </summary>
      <param name="newInterface">The interface to be added.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveMetaInterface(Telerik.OpenAccess.Metadata.MetaInterface)">
      <summary>
            Removes an interface from the meta model.
            </summary>
      <param name="removedInterface">The interface to be removed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Remove a table from the relational model
            </summary>
      <param name="table">The table that is to be removed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveStoredProcedure(Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure)">
      <summary>
            Removes a stored procedure from the metadata container
            </summary>
      <param name="procedure">The procedure to be removed</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveColumn(Telerik.OpenAccess.Metadata.Relational.MetaColumn)">
      <summary>
            Removes a column from the relation model
            </summary>
      <param name="column">The column that is to be removed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.AddPrimitiveMember(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
      <summary>
            Adds a primitive member to a mapped persistent type.
            </summary>
      <param name="persistentType">The persistent type that is the owner of the new 
            primitive member.</param>
      <param name="field">The new primitive member added.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemovePrimitiveMember(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaPrimitiveMember)">
      <summary>
            Removes a primitive member from a mapped persistent type. 
            </summary>
      <param name="persistentType">The persistent type that is the owner of the 
            primitive member to be removed.</param>
      <param name="field">The primitive member to be removed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.AddReference(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaNavigationMember)">
      <summary>
            Adds a reference member to a persistent type.
            </summary>
      <param name="ownerOfReference">The persistent type that is the owner of the new 
            reference member.</param>
      <param name="reference">The reference member that is being added.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveReference(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaNavigationMember)">
      <summary>
            Removes a reference member from a persistent type. If an inverse collection
            exists at the referenced type, it is removed as well.
            </summary>
      <param name="ownerOfReference">The persistent type that is the owner of the
            reference member to be removed.</param>
      <param name="reference">The reference member to be removed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.AddCollection(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaNavigationMember)">
      <summary>
            Adds a collection member to a persistent type
            </summary>
      <param name="ownerOfCollection">The persistent type that is the owner of the new collection memeber</param>
      <param name="collection">The collection member to be added</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.RemoveCollection(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.MetaNavigationMember)">
      <summary>
            Removes a collection member from a persistent type. If the removed collection is 
            a master collection and an inverse collection exists, the inverse collection is made a master 
            so it does not get removed too.
            </summary>
      <param name="ownerOfCollection">The persistent type that is the owner of the
            collection member to be removed. </param>
      <param name="collection">The collection member that is being removed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.IsMapped(Telerik.OpenAccess.Metadata.MetaItem,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Determens whether a relational MetaItem is mapped to a conceptual entity.
            </summary>
      <param name="itemToCheck">The relational item.</param>
      <param name="container">MetadataContainer where the mapping is defined.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.IsReservedTable(Telerik.OpenAccess.Metadata.Relational.MetaTable)">
      <summary>
            Determens whether a table can be mapped to a class.
            </summary>
      <param name="table">The table to check for</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.IsReservedTable(Telerik.OpenAccess.Metadata.Relational.MetaTable,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Determens whether a table can be mapped to a class.
            </summary>
      <param name="table">The table to check for</param>
      <param name="container">The metadata container for which the check will be performed.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetMetaStoredProcedure(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.CUDOperation)">
      <summary>
            Gets a new meta stored procedure based on the persisten type and CUD operation
            </summary>
      <param name="persistentType">The persistent type.</param>
      <param name="operation">Create/Update/Delete operation</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.CanMapToProcedure(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure,Telerik.OpenAccess.Metadata.CUDOperation)">
      <summary>
            Determines whether the procedure is valid for mapping to this CUD operation
            </summary>
      <param name="persistentType">The persistent type.</param>
      <param name="procedure">Target store procedure.</param>
      <param name="operation">Create/Update/Delete operation.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetadataWorker.GetMetaStoredProcedureMapping(Telerik.OpenAccess.Metadata.MetaPersistentType,Telerik.OpenAccess.Metadata.Relational.MetaStoredProcedure)">
      <summary>
            Creates a stored procedure object based on the persistent type and CUD operation
            </summary>
      <param name="persistentType">The persistent type.</param>
      <param name="procedure">Target store procedure.</param>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetadataWorker.CloneMetaItem`1">
      <summary>
            Delegate invoking a method that implements the cloning of a Meta Item
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.MetaWorkerContext">
      <summary>
            Represents a class that is contracted to a MetadataWorker class and serves as a context 
            for different artifacts used by a MetadataWorker instance
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.SPI.ISchemaReader)">
      <summary>
            Initializes a new MetaWorkerContext instance with a SchemaReader parameter
            </summary>
      <param name="reader">defines the schema reader used for obtaining the meta model that
            is part of this context</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.INamingStrategy)">
      <summary>
            Initializes a new MetaWorkerContext instance with a meta model and a naming strategy
            </summary>
      <param name="container">defines the metamodel that will be used in this context</param>
      <param name="namingStrategy">defines a naming strategy used for generating names for
            different metadata items</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.INamingStrategy,Telerik.OpenAccess.Metadata.ITypeResolver)">
      <summary>
            Initializes a new MetaWorkerContext instance with a meta model, a naming strategy and a type resolver
            </summary>
      <param name="container">defines the metamodel that will be used in this context</param>
      <param name="namingStrategy">defines a naming strategy used for generating names for
            different metadata items</param>
      <param name="typeResolver">Allows the mapping from a sql column type to a clr type.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,System.String)">
      <summary>
            Initializes a new MetaWorkerContext instance with a meta model and a naming strategy
            </summary>
      <param name="container">defines the metamodel that will be used in this context</param>
      <param name="defaultNamespace">defines a default namespace for the persistent 
            types in this context</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.INamingStrategy,System.String)">
      <summary>
            Initializes a new MetaWorkerContext instance with a meta model and a naming strategy
            </summary>
      <param name="container">defines the metamodel that will be used in this context</param>
      <param name="namingStrategy">defines a naming strategy used for generating names for
            different metadata items</param>
      <param name="defaultNamespace">defines a default namespace for the persistent 
            types in this context</param>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.MetaWorkerContext.#ctor(Telerik.OpenAccess.Metadata.MetadataContainer,Telerik.OpenAccess.Metadata.INamingStrategy,System.String,System.Boolean)">
      <summary>
            Initializes a new MetaWorkerContext instance with a meta model and a naming strategy
            </summary>
      <param name="container">defines the metamodel that will be used in this context</param>
      <param name="namingStrategy">defines a naming strategy used for generating names for
            different metadata items</param>
      <param name="defaultNamespace">defines a default namespace for the persistent 
            types in this context</param>
      <param name="generateNamespacesBySchemaNames">defines if the namespaces of the mapped 
            classes will reflect the schema names of the corresponding tables</param>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.SharedColumns">
      <summary>
            Gets a dictionary storing the information about the shared columns in the metadata model that is 
            part of the this context
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.NamingStrategy">
      <summary>
            Gets the naming strategy that is going to be used by the worker that is contracted to this context
            when generating names during mapping operations
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.DatabaseSchema">
      <summary>
            Gets the meta model that contains the full database schema
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.DefaultMapper">
      <summary>
            Gets the default mapper used for executing mapping operations with the defult rules
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.Worker">
      <summary>
            Gets the MetadataWorker instance used for executing operations on the meta model that
            is part of this context
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.MetaWorkerContext.GenerateNamespacesBySchemaNames">
      <summary>
            Gets whether the namespaces of the mapped 
            classes will reflect the schema names of the corresponding tables
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.MetricStore">
      <summary>
            Performance monitoring
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.MetricStore.GetNewMetricSnapshots(System.Int32)">
      <summary>
      </summary>
      <param name="lastId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Telerik.OpenAccess.MetricStore.Descriptions">
      <summary>
            Descriptions for the metric slots
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IMetric">
      <summary>
            metric description
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMetric.Category">
      <summary>
            Category
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMetric.Description">
      <summary>
            Description
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMetric.DisplayName">
      <summary>
            Speaking name
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMetric.Name">
      <summary>
            Shortname
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IMetricSnapshotPacket">
      <summary>
            Snapshot
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMetricSnapshotPacket.Buf">
      <summary>
            Two dimentional buffer with metric values
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMetricSnapshotPacket.Dates">
      <summary>
            snapshot dates
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMetricSnapshotPacket.Ids">
      <summary>
            snapshot ids
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMetricSnapshotPacket.MostRecentDate">
      <summary>
            last snapshot data
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMetricSnapshotPacket.MostRecentID">
      <summary>
            last snapshot id
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMetricSnapshotPacket.Size">
      <summary>
            amound of snapshots
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessContextBase">
      <summary>
            OpenAccess context base class for .NET 2.0 usage.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataSource)">
      <summary>
            OpenAccessContextBase Constructor with MetadataSource
            </summary>
      <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
      <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connetcion string, the backend type must be set.
            </param>
      <param name="metadataSource">A metadata source. If non is specified the metadata is derived from the context itself.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            OpenAccessContextBase Constructor with MetadataContainer
            </summary>
      <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
      <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connetcion string, the backend type must be set.
            </param>
      <param name="metadataContainer">A metadata container. If non is specified the metadata is derived from the context itself.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer,System.Reflection.Assembly)">
      <summary>
            OpenAccessContextBase Constructor with MetadataContainer
            </summary>
      <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
      <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connetcion string. The backend type must be set then.
            </param>
      <param name="metadataContainer">A metadata container. If non is specified the metadata is derived from the context itself.</param>
      <param name="callingAssembly">The assembly to search for the attribute mapping if no metadata is specified.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataSource,System.Reflection.Assembly)">
      <summary>
            OpenAccessContextBase Constructor with MetadataSource
            </summary>
      <param name="connectionString">The connection string name or the connection string. This is a required parameter</param>
      <param name="backendConfiguration">
            A backend configuration instance. If the parameter is null the default settings are used.
            For some backends the backend type cannot be derived from the connetcion string. The backend type must be set then.
            </param>
      <param name="metadataSource">A metadata source. If non is specified the metadata is derived from the context itself.</param>
      <param name="callingAssembly">The assembly to search for the attribute mapping if no metadata is specified.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.#ctor(Telerik.OpenAccess.OpenAccessContextBase)">
      <summary>
            Copy constructor, the same database connection and configuration will be used.
            </summary>
      <param name="otherContext">An existing not disposed context</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Init(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer,System.Reflection.Assembly)">
      <summary>
            Initializes this context instance.
            </summary>
      <param name="connectionString">A connections string.</param>
      <param name="backendConfiguration">A BackendConfiguration instance.</param>
      <param name="metadataContainer">A MetadataContainer instance.</param>
      <param name="callingAssembly">The calling assembly.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges">
      <summary>
            Saves all changes in the context
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.SaveChanges(Telerik.OpenAccess.ConcurrencyConflictsProcessingMode)">
      <summary>
            Saves the changes with the specified concurency mode
            </summary>
      <param name="failureMode">Mode to use</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ClearChanges">
      <summary>
            Rolles back all changes in the context
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetChanges">
      <summary>
            Returns all objects that will be inserted, deleted or updated during the next commit.
            </summary>
      <returns>
        <see cref="T:Telerik.OpenAccess.ContextChanges" /> to access all pending inserts, deletes or updates.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetSchemaHandler">
      <summary>
            Gets schema handling instance. Must be called and used before any object scope is obtained.
            </summary>
      <returns>Schema Handler instance</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteStoredProcedure``1(System.String,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.SqlParameter},System.Object[])">
      <summary>
            Executes a stored procedure
            </summary>
      <typeparam name="T">The return type, can be a persistent class or 'Object' or Object[]</typeparam>
      <param name="procedureName">The name of the stored procedure, can be delimited if necessary.</param>
      <param name="parameterDefinition">A list of <see cref="C:SqlParameter" /> defining the stored procedure parameter.</param>
      <param name="parameterValues">The parameter values.</param>
      <returns>List of persistent classes or a IList&lt;object&gt; or a IList&lt;object[]&gt;</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.ExecuteStoredProcedure``1(System.String,System.Collections.Generic.IEnumerable{Telerik.OpenAccess.SqlParameter},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.Object[])">
      <summary>
            Executes a stored procedure
            </summary>
      <typeparam name="T">The return type, can be a persistent class, 'Object' or Object[]</typeparam>
      <param name="procedureName">The name of the stored procedure, can be delimited if necessary.</param>
      <param name="parameterDefinition">A list of <see cref="C:SqlParameter" /> defining the stored procedure parameter.</param>
      <param name="parameterValues">The parameter values.</param>
      <param name="outParameter">If the stored procedure has out parameter the dictionary contains</param>
      <returns>List of persistent classes or a IList&lt;object&gt; or a IList&lt;object[]&gt;</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Refresh(Telerik.OpenAccess.RefreshMode,System.Collections.IEnumerable)">
      <summary>
            Refreshes a collection of entity objects according to the specified mode. 
            </summary>
      <param name="mode">Defines if dirty fields stay dirty.</param>
      <param name="entities">List of entities to be refreshed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Refresh(Telerik.OpenAccess.RefreshMode,System.Object[])">
      <summary>
            Refreshes a number of entities according to the specified mode. 
            </summary>
      <param name="mode">Defines if dirty fields stay dirty.</param>
      <param name="entities">List of entities to be refreshed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Refresh(Telerik.OpenAccess.RefreshMode,System.Object)">
      <summary>
            Refreshes a collection of entity objects according to the specified mode. 
            </summary>
      <param name="mode">Defines if dirty fields stay dirty.</param>
      <param name="entity">Entity to be refreshed.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object)">
      <summary>
            Generates a unique key for a persistent object.
            </summary>
      <param name="entity">The persistent object the key has to be generated for.</param>
      <returns>An unique key for the persistent object.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.CreateObjectKey(System.Object,System.Boolean)">
      <summary>
            Generates a unique key for a persistent object including the version information.
            </summary>
      <param name="entity">The persistent object the key has to be generated for.</param>
      <param name="includeVersionInformation">
            Optimistic concurrency control data to check if the data in 
            the databasehas not been changed in the meantime
            </param>
      <returns>An unigue key for the persistent object.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetObject(Telerik.OpenAccess.ObjectKey)">
      <summary>
            Returns the persistent object defined by the key parameter.
            </summary>
      <param name="key">The unique describing a persistent entity.</param>
      <returns>The persistent object found in the context or loaded from the database</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetObject(Telerik.OpenAccess.ObjectKey,System.Boolean)">
      <summary>
            Returns the persistent object defined by the key parameter.
            </summary>
      <param name="key">The unique key describing a persistent entity.</param>
      <param name="checkVersion">If true the version of the data in the database is compared to the version information in the key.</param>
      <returns>The persistent object found in the context or loaded from the database</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObject(Telerik.OpenAccess.ObjectKey,System.Boolean,System.Object@)">
      <summary>
            Returns the persistent object defined by the key parameter.
            </summary>
      <param name="key">The unique key describing a persistent entity.</param>
      <param name="entity">The persistent object found in the context or loaded from the database.</param>
      <param name="checkVersion">If true the version of the data in the database is compared to the version information in the key.</param>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetObject``1(Telerik.OpenAccess.ObjectKey)">
      <summary>
            Returns the persistent object defined by the key parameter.
            </summary>
      <param name="key">The unique describing a persistent entity.</param>
      <typeparam name="T">The expected object type. If unknown use <see cref="T:System.Object" /></typeparam>
      <returns>The persistent object found in the context or loaded from the database</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetObject``1(Telerik.OpenAccess.ObjectKey,System.Boolean)">
      <summary>
            Returns the persistent object defined by the key parameter.
            </summary>
      <param name="key">The unique key describing a persistent entity.</param>
      <param name="checkVersion">If true the version of the data in the database is compared to the version information in the key.</param>
      <typeparam name="T">The expected object type. If unknown use <see cref="T:System.Object" /></typeparam>
      <returns>The persistent object found in the context or loaded from the database</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObject``1(Telerik.OpenAccess.ObjectKey,``0@)">
      <summary>
            Returns the persistent object defined by the key parameter.
            </summary>
      <param name="key">The unique key describing a persistent entity.</param>
      <param name="entity">The persistent object found in the context or loaded from the database.</param>
      <typeparam name="T">The expected object type. If unknown use <see cref="T:System.Object" /></typeparam>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.TryGetObject``1(Telerik.OpenAccess.ObjectKey,System.Boolean,``0@)">
      <summary>
            Returns the persistent object defined by the key parameter.
            </summary>
      <param name="key">The unique key describing a persistent entity.</param>
      <param name="entity">The persistent object found in the context or loaded from the database.</param>
      <param name="checkVersion">If true the version of the data in the database is compared to the version information in the key.</param>
      <typeparam name="T">The expected object type. If unknown use <see cref="T:System.Object" /></typeparam>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Delete(System.Collections.IEnumerable)">
      <summary>
            Marks the entities as to be deleted.
            </summary>
      <param name="entities">The entities to be deleted from the database.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Delete(System.Object)">
      <summary>
            Marks the entity as to be deleted.
            </summary>
      <param name="entity">The entity to be deleted from the database.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Add(System.Collections.IEnumerable)">
      <summary>
            Adds new entities to the context
            </summary>
      <param name="entities">Entities to be added.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Add(System.Object)">
      <summary>
            Adds a new entity to the context
            </summary>
      <param name="entity">Entity to be added.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.MakeDirty(System.Object,System.String)">
      <summary>
            Marks a field of an object from this context manually as 'dirty' and to be updated
            in the database context. Must be called before modifications occur.
            </summary>
      <param name="entity">The object that should 
            be marked as dirty. It can also be an IEnumerable of objects to mark as dirty.</param>
      <param name="fieldName">The field that should 
            be marked as dirty.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="entity" /> is not enhanced.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetLastConflicts">
      <summary>
            Returns the cocurrency control conflicts of the last store operation.
            </summary>
      <returns>List of conflicts from last store operation.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.CheckDispose">
      <summary>
            Throws an exception if the context is already disposed.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed resources.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.Dispose(System.Boolean)">
      <summary>
            Overwrite to free additional resources
            </summary>
      <param name="disposing">If true dispose is executed, if false nothing is done.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessContextBase.GetScope">
      <summary>
            Return the underlying IObjectScope instance
            </summary>
      <returns>Internal API entry point</returns>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Metadata">
      <summary>
            Gets the metadata tree for this context.
            </summary>
      <returns>Returns the metadata tree for the actual database connection.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessContextBase.Log">
      <summary>
            Specifies the destination to write the SQL query or command.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ContextChanges">
      <summary>
            Offers all objects that will be inserted, deleted or updated during the next commit.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ContextChanges.GetDeletes``1">
      <summary>
            Returns a list of deleted objects managed by the context. The changes are not yet committed to the database.
            </summary>
      <typeparam name="T">Filter for Type of objects. Can be typeof(object).</typeparam>
      <returns>Filtered list by type T and status deleted.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ContextChanges.GetInserts``1">
      <summary>
            Returns a list of new objects managed by the context. The changes are not yet committed to the database.
            </summary>
      <typeparam name="T">Filter for Type of objects. Can be typeof(object).</typeparam>
      <returns>Filtered list by type T and status new.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ContextChanges.GetUpdates``1">
      <summary>
            Returns a list of dirty objects managed by the context. The changes are not yet committed to the database.
            </summary>
      <typeparam name="T">Filter for Type of objects. Can be typeof(object).</typeparam>
      <returns>Filtered list by type T and status dirty.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.RefreshMode">
      <summary>
            Defines the refresh action in detail.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.RefreshMode.PreserveChanges">
      <summary>
            Keeps the actual changes in the object but re-reads all clean data. The object will stay dirty.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.RefreshMode.OverwriteChangesFromStore">
      <summary>
            Reads all data and overwrites the dirty fields. The object will be clean, the changes are lost.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ConcurrencyConflictsProcessingMode">
      <summary>
            Defines the granularity of errors in failing commits
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ConcurrencyConflictsProcessingMode.StopOnFirst">
      <summary>
            Stops processing after the first error occurs.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ConcurrencyConflictsProcessingMode.AggregateAll">
      <summary>
            Executes all insert, update and delete statements regardless of an error.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectKey">
      <summary>
            A context independent representation of a persistent object.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectKey.#ctor(Telerik.OpenAccess.IObjectId)">
      <summary>
            For OpenAccess internal use only.
            </summary>
      <param name="id">For OpenAccess internal use only.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectKey.#ctor(System.String)">
      <summary>
            Inverse function to ToString()
            </summary>
      <param name="serializedFormat">The string representation of the ObjectKey.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectKey.GetValue``1">
      <summary>
            Returns the database value of the actual key
            </summary>
      <typeparam name="T">The type of the key to return. If it is not know object can be used.</typeparam>
      <returns>The database value of the key</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectKey.ToString">
      <summary>
            Calculates a string representation of the ObjectKey.
            </summary>
      <returns>The string representation of the ObjectKey.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectKey.Kind">
      <summary>
            Describes the kind of key mechanism used.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectKey.Kind.NonPersistent">
      <summary>The key holds a non persistent object.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectKey.Kind.InternalKey">
      <summary>The key holds the OpenAccess internal value, it can be optained by calling key.GetKey&lt;long&gt;.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectKey.Kind.IdClassDefinedKey">
      <summary>The key holds the user implemented td class, it can be optained by calling key.GetKey&lt;IdClass&gt;.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectKey.Kind.IntegerKey">
      <summary>The key holds the integer value availble on the persistent class, it can be optained by calling key.GetKey&lt;integer&gt;.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectKey.Kind.StringKey">
      <summary>The key holds the string value availble on the persistent class, it can be optained by calling key.GetKey&lt;string&gt;.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectKey.Kind.ShortKey">
      <summary>The key holds the short value availble on the persistent class, it can be optained by calling key.GetKey&lt;short&gt;.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectKey.Kind.ByteKey">
      <summary>The key holds the byte value availble on the persistent class, it can be optained by calling key.GetKey&lt;byte&gt;.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectKey.Kind.LongKey">
      <summary>The key holds the long value availble on the persistent class, it can be optained by calling key.GetKey&lt;long&gt;.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectKey.Kind.GuidKey">
      <summary>The key holds the Guid value availble on the persistent class, it can be optained by calling key.GetKey&lt;Guid&gt;.</summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectKey.Kind.CharacterKey">
      <summary>The key holds the char value availble on the persistent class, it can be optained by calling key.GetKey&lt;char&gt;.</summary>
    </member>
    <member name="T:Telerik.OpenAccess.ConcurrencyConflict">
      <summary>
            Described one concurency control conflict during commit.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ConcurrencyConflict.FailingObject">
      <summary>
            The key of the object that fails the store operation.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ConcurrencyConflict.Reason">
      <summary>
            The reason for the failure.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.SqlParameter">
      <summary>
            Parameter used for execution of parametrized SQL queries.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.SqlParameter.#ctor(System.String,Telerik.OpenAccess.OpenAccessType)">
      <summary>
            Initializes a new instance of the SqlParameter class.
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="type">The type of the parameter.</param>
    </member>
    <member name="M:Telerik.OpenAccess.SqlParameter.#ctor(System.String,Telerik.OpenAccess.OpenAccessType,Telerik.OpenAccess.ParameterMode)">
      <summary>
            Initializes a new instance of the SqlParameter class.
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="type">The type of the parameter.</param>
      <param name="mode">The mode of the parameter.</param>
    </member>
    <member name="P:Telerik.OpenAccess.SqlParameter.Name">
      <summary>
            The name of the parameter.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.SqlParameter.Type">
      <summary>
            The OpenAccess type of the parameter.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.SqlParameter.Mode">
      <summary>
            The mode of the parameter.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.DefaultFetchGroupAttribute">
      <summary>
            Specifies, whether this field is member of the so-called default
            fetch group. The default fetch group is the set of fields that
            are retrieved, if any field of the object is accessed the very first
            time.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.DefaultFetchGroupAttribute.#ctor">
      <summary>
            The field being tagged is member of the default fetch group.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.DefaultFetchGroupAttribute.#ctor(System.Boolean)">
      <summary>
            Controls whether the tagged field is a member of the default 
            fetch group.
            </summary>
      <param name="dfg">If <c>true</c> the member is included in the
            default fetch group, otherwise not.</param>
    </member>
    <member name="P:Telerik.OpenAccess.DefaultFetchGroupAttribute.IsIncluded">
      <summary>
            Indicates whether the tagged member is included in the default 
            fetch group.
            </summary>
      <value>
        <c>true</c> if the member is included</value>
    </member>
    <member name="T:Telerik.OpenAccess.PersistentAttribute">
      <summary>
            Declares a class to be persistence-capable. 
            This attribute is not inherited and must be specified for each 
            class in a class hierarchy
            individually. Only field values (no code) of persistent classes 
            within a class
            hierarchy are stored in the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.PersistentAttribute.#ctor">
      <summary>
            Declares a class to be persistence-capable; instances of such
            a class can be made persistent in a database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.PersistentAttribute.GetAliasSet">
      <summary>
            Indicates whether the Alias property was set.
            </summary>
      <value>
        <c>true</c> if the Alias property was given 
            a value.</value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.Identity">
      <summary>
            Determines, whether the identity for objects is automatically 
            provided by the runtime system (internal identity) or
            is provided by the values of certain fields of an object.
            </summary>
      <value>
            If set to a particular <code>System.Type</code> and not 
            <code>null</code>
            then single field identity is used, otherwise internal identity 
            is used.
            Defaults to <code>null</code>, meaning internal identity.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.ApplicationIdentity">
      <summary>
            ApplicationIdentity is obsolete, please use Identity instead.
            </summary>
      <value>
            The identifying type for this persistent class.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.IdentityField">
      <summary>
            Determines the field used for single field identity.
            </summary>
      <value>
            The name of a field to hold the identity (primary key).
            Defaults to <code>null</code>, meaning internal identity should be used.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.VersionField">
      <summary>
            Determines the field used for optimistic concurrency control.
            </summary>
      <value>
            The name of a field to hold the version information.
            Defaults to <code>null</code>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.IdentityClassName">
      <summary>
            Determines, whether the identity for objects is automatically 
            provided by the runtime system (internal identity) or
            is provided by the values of certain fields of an object.
            Only intended for situations,
            where no type, but a string can be specified. (e.g. J#)
            </summary>
      <value>
            If set to the name of a particular <code>System.Type</code> 
            and not <code>null</code>
            then single field identity is used, otherwise internal identity is used.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.ApplicationIdentityClassName">
      <summary>
            ApplicationIdentityClassName is obsolete, please use IdentityClassName instead.
            </summary>
      <value>
            The name of the identifying type for this persistent class.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistentAttribute.Alias">
      <summary>
            Controls the alias name for the attributed class. 
            Useful for OQL-Queries to abbreviate long class names.
            </summary>
      <value>
            If an alias name was specified, its value will be returned here.
            Default is <c>null</c>.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.TransientAttribute">
      <summary>
            Declares a field of a persistence-capable class to be transient,
            and its value will not be stored or maintained by 
            the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TransientAttribute.#ctor">
      <summary>
            Declares a field of a persistence-capable class to be transient.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.SerializeToBlobAttribute">
      <summary>
            Declares a field of a persistence-capable class to be serialized 
            and stored as a binary large object (Blob) in the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.SerializeToBlobAttribute.#ctor">
      <summary>
            Declares a field member to be serialized and stored as a
            uninterpreted Blob.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.DependAttribute">
      <summary>
            Declares a referenced object to be dependent on the referencing object.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.DependAttribute.#ctor">
      <summary>
            Declares a field member object as contingent upon the 
            referencing object.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ItemTypeAttribute">
      <summary>
             Specifies the item type for 
             a Collection field or the key / value types 
             for a IDictionary field of a persistence-capable class.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.Type)">
      <summary>
            Declares the item type for elements of a Collection.
            </summary>
      <param name="typeOfElements">The type of the elements.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.String)">
      <summary>
            Declares the item type for elements of a Collection.
            </summary>
      <param name="typeOfElements">The type of the elements.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>
            Declares the key type and the value type for elements 
            of an IDictionary.
            </summary>
      <param name="typeOfKey">The type of the keys.</param>
      <param name="typeOfValue">The type of the values.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ItemTypeAttribute.#ctor(System.String,System.String)">
      <summary>
            Declares the key type and the value type for elements 
            of an IDictionary.
            </summary>
      <param name="typeOfKey">The type of the keys.</param>
      <param name="typeOfValue">The type of the values.</param>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.KeyType">
      <summary>
            Gets the key type (IDictionary).
            </summary>
      <value>The specified type of the keys. Default is <c>null</c>. 
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ValueType">
      <summary>
            Gets the value type (IDictionary).
            </summary>
      <value>The specified type of the values. Default is <c>null</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ItemType">
      <summary>
            Gets the item type (Collection).
            </summary>
      <value>The specified type of the items. Default is <c>null</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ItemTypeSet">
      <summary>
            Indicates whether the item type has been set.
            </summary>
      <value>
        <c>true</c> if the item type has been set. 
            Default is <c>false</c>.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.KeyTypeSet">
      <summary>
            Indicates if the key type has been set.
            </summary>
      <value>
        <c>true</c> if the key type has been set.
             Default is <c>false</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ItemTypeAttribute.ValueTypeSet">
      <summary>
            Indicates if the value type has been set.
            </summary>
      <value>
        <c>true</c> if the value type has been set.
            Default is <c>false</c>.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.IndexAttribute">
      <summary>
            Indexes are defined in the XML metadata, please see
            the programmer's guide for more information (obsolete).
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String)">
      <summary>
            Defines a simple index for a member of a persistence-capable class.
            </summary>
      <param name="indexName">The name of the index.</param>
      <param name="memberDescription">The name and properties of the 
            member to be included in this index. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Defines a compound index for two members of a 
            persistence-capable class.
            </summary>
      <param name="indexName">The name of the index.</param>
      <param name="memberDescription1">The name and properties of the 
            first member to be included in this index. 
            </param>
      <param name="memberDescription2">The name and properties of the 
            second member to be included in this index. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Defines a compound index for three members of a 
            persistence-capable class.
            </summary>
      <param name="indexName">The name of the index.</param>
      <param name="memberDescription1">The name and properties of the 
            first member to be included in this index. 
            </param>
      <param name="memberDescription2">The name and properties of the 
            second member to be included in this index. 
            </param>
      <param name="memberDescription3">The name and properties of the 
            third member to be included in this index. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.IndexAttribute.#ctor(System.String,System.String[])">
      <summary>
            Defines an index for a persistence-capable class.
            </summary>
      <param name="indexName">The name of the index.</param>
      <param name="memberDescriptions">The name and properties of the 
            members to be included in this index. The order of the field 
            names is important.
            </param>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.Name">
      <summary>
            Gets the name of the index.
            </summary>
      <value>The name of the index as specified.</value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.FieldNames">
      <summary>
            Gets the field names used by the index.
            </summary>
      <value>
            The names of the field components of the index.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.SignificanceSet">
      <summary>
            Indicates whether a user supplied significance is used or not.
            </summary>
      <value>
        <c>true</c> if the index field definition is using a 
            user-supplied significance.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.DescendingSet">
      <summary>
            Indicates whether a user supplied sort order is used or not.
            </summary>
      <value>
        <c>true</c> if the index field definition is using a user-supplied 
            sort order.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.Significance">
      <summary>
            Gets the significance of the corresponding field in the index.
            </summary>
      <value>
            The significance of the associated index field.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.Descending">
      <summary>
            Indicates whether the corresponding index field uses 
            descending sort order or not.
            </summary>
      <value>
        <c>true</c> if the corresponding field is indexed using 
            descending sort order.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.Unique">
      <summary>
            Controls if the index contains only unique values or not (default).
            </summary>
      <value>
        <c>true</c> if the index is a unique index. Default is <c>false</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.Fulltext">
      <summary>
            Controls if the index is a fulltext index or not (default).
            </summary>
      <value>
        <c>true</c> if the index is a fulltext index. Default is<c>false</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.UniqueSet">
      <summary>
            Indicates whether the index definition is using a user supplied
            uniqueness setting.
            </summary>
      <value>
        <c>true</c> if the index definition is using user supplied setting.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IndexAttribute.FulltextSet">
      <summary>
            Indicates whether the index definition is using a user supplied
            fulltext index setting.
            </summary>
      <value>
        <c>true</c> if the index definition is using user supplied setting.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.FetchFieldAttribute">
      <summary>
            Marks a field as part of a named
            FetchGroup. A FetchGroup is a set of fields which
            are retrieved together when the FetchGroup name is contained in the actual
            FetchPlan configuration.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FetchFieldAttribute.#ctor(System.String)">
      <summary>
            Declares a field as part of a named FetchGroup.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Next">
      <summary>
             Sets a FetchGroup at the referenced class as the FetchGroup to be used.
             </summary>
      <value>
            Name of the FetchGroup to be used next.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.KeyNext">
      <summary>
             Sets a FetchGroup for the key field at the referenced class as the FetchGroup to be used.
             </summary>
      <value>
            Name of the FetchGroup to be used next for the key reference.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Path">
      <summary>
             Adds a specific field at the referenced class to the FetchGroup.
             </summary>
      <value>
            Path specification
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.KeyPath">
      <summary>
             Adds a specific field for the key at the referenced class to the FetchGroup.
             </summary>
      <value>
            Path specification
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Depth">
      <summary>
             Controls the depth of the fetch operation.
             </summary>
      <value>
            The maximum number of levels to be fetched. (Default: 1)
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.KeyDepth">
      <summary>
             Controls the depth of the fetch operation on the key part.
             </summary>
      <value>
            The maximum number of levels to be fetched. (Default: 1)
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchFieldAttribute.Name">
      <summary>
            Gets the name of the FetchGroup.
            </summary>
      <value>
            FetchGroup name.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.FetchGroupAttribute">
      <summary>
            Declares a named FetchGroup on class level.
            The FetchGroup is a set of fields which
            are retrieved together if the fetch group name is part of the actual
            FetchPlan configuration.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String)">
      <summary>
            Defines a FetchGroup with one included FetchGroup.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
      <param name="addFetchGroup1">The name of the FetchGroup to 
            be included in this FetchGroup. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Defines a FetchGroup with two included FetchGroups.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
      <param name="addFetchGroup1">The name of the first FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup2">The name of the second FetchGroup to 
            be included in this FetchGroup. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Defines a FetchGroup with three included FetchGroups.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
      <param name="addFetchGroup1">The name of the first FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup2">The name of the second FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup3">The name of the third FetchGroup to 
            be included in this FetchGroup. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Defines a FetchGroup with four included FetchGroups.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
      <param name="addFetchGroup1">The name of the first FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup2">The name of the second FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup3">The name of the third FetchGroup to 
            be included in this FetchGroup. 
            </param>
      <param name="addFetchGroup4">The name of the forth FetchGroup to 
            be included in this FetchGroup. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupAttribute.#ctor(System.String,System.String[])">
      <summary>
            Defines a FetchGroup with several included FetchGroups.
            </summary>
      <param name="fetchGroupName">The name of the FetchGroup.</param>
      <param name="addFetchGroup">An array of names of FetchGroup to 
            be included in this FetchGroup. 
            </param>
    </member>
    <member name="P:Telerik.OpenAccess.FetchGroupAttribute.Name">
      <summary>
            Gets the name of the FetchGroup. All FetchGroups with the same name
            are used at the same time.
            </summary>
      <value>
            The name of the FetchGroup.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchGroupAttribute.Groups">
      <summary>
            Gets the collection of referenced FetchGroups.
            </summary>
      <value>
            The names of the FetchGroups.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.FieldAliasAttribute">
      <summary>
            Declares the property to be an alias for a field during OQL query evaluation.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FieldAliasAttribute.#ctor(System.String)">
      <summary>
            Declares a property to be an alias for the given field.
            </summary>
      <param name="nameOfField">A valid field name.</param>
    </member>
    <member name="P:Telerik.OpenAccess.FieldAliasAttribute.FieldName">
      <summary>
            Gets the name of the field to query for this property.
            </summary>
      <value>
            A valid field name.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.ManagedInverseAttribute">
      <summary>
            Declares a collection to be managed by it's reverse relationship field.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ManagedInverseAttribute.#ctor(System.String)">
      <summary>
            Declares a inverse field of a managed relationship.
            </summary>
      <param name="nameOfInverseField">A valid field name of the inverse type or <c>{auto}</c>
            for automatic held reference.</param>
    </member>
    <member name="P:Telerik.OpenAccess.ManagedInverseAttribute.InverseFieldName">
      <summary>
            Gets the name of the inverse field.
            </summary>
      <value>
            A valid field name for the type of the inverse side.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.Blob">
      <summary>
            Implements binary large objects (Blob) which are accessed as
            a whole.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Blob.#ctor(Telerik.OpenAccess.IObjectScope)">
      <summary>
            Creates a new Blob object. An active transaction is required.
            </summary>
      <param name="os">The object scope maintaining the Blob.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Blob.#ctor(Telerik.OpenAccess.ObjectContainer)">
      <summary>
            Creates a new Blob object using an ObjectContainer.
            </summary>
      <param name="container">The writable object container.</param>
    </member>
    <member name="T:Telerik.OpenAccess.Database">
      <summary>
            Represents one database which is identified by an URL; serves
            as factory object for transactions, queries, object identities.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Database.Get(System.String)">
      <summary>
            Returns the database object for the passed connection id using the application configuration file. 
            </summary>
      <param name="connectionId">The connection id for the database.</param>
      <returns>The Database instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Database.Get(System.String,System.Xml.XmlElement)">
      <summary>
            Returns the database object for the passed connection id and configuration information. 
            </summary>
      <param name="connectionId">The connection id for the database.</param>
      <param name="configOverride">The XmlElement representing the database configuration node 
            and all subnodes of the configuration. </param>
      <returns>The Database instance.</returns>
      <exception cref="T:System.ArgumentException">No connectionId given.</exception>
      <exception cref="T:System.ArgumentException">No configOverride given.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.Get(System.String,System.Xml.XmlElement,System.Reflection.Assembly[])">
      <summary>
            Returns the database object for the passed connection id, configuration information and 
            the list of assemblies with persistent class information.
            </summary>
      <param name="connectionId">The connection id for the database.</param>
      <param name="configOverride">The XmlElement representing the database configuration node 
            and all subnodes of the configuration. </param>
      <param name="entryAssemblies">The list of all assemblies with persistent classes inside. 
            Use this method only if your application is not linked directly or indirectly to the 
            persistent classes assemblies. Only this list of assemblies will be used, it must be complete!
            </param>
      <returns>The Database instance.</returns>
      <exception cref="T:System.ArgumentException">No connectionId given</exception>
      <exception cref="T:System.ArgumentException">No configOverride given</exception>
      <exception cref="T:System.ArgumentException">No entryAssemblies given</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.Get(System.String,Telerik.OpenAccess.BackendConfiguration,Telerik.OpenAccess.Metadata.MetadataContainer)">
      <summary>
            Returns the database object for the given connection string, backend configuration and mapping settings.
            </summary>
      <param name="connectionString">Connection String OR Connection String Name</param>
      <param name="backendConfiguration">Backend configuration</param>
      <param name="metadataContainer">Metadata container obtained via one of the Metadata collectors</param>
      <returns>The unopened, but configured database instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetObjectScope">
      <overloads>Gets a connection for this database.</overloads>
      <summary>
             Gets a connection for this database. 
            </summary>
      <returns>A connected <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance with 
            default options.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetObjectScope(Telerik.OpenAccess.TransactionProvider)">
      <overloads>Gets a connection for this database.</overloads>
      <summary>
             Gets a connection for this database. 
            </summary>
      <param name="provider">The style of the transaction controlling.</param>
      <returns>A connected <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance with 
            special <see cref="T:Telerik.OpenAccess.TransactionProvider" /> options.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetObjectScope(System.String,System.String)">
      <summary>
             Gets a connection for this database.  
             The supplied username and 
             password are used for the database connection.
            </summary>
      <returns>An <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance with default 
            options.</returns>
      <param name="username">The user name for the connection.</param>
      <param name="password">The password for the connection.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetObjectScope(System.String,System.String,Telerik.OpenAccess.TransactionProvider)">
      <overloads>Gets a connection for this database.</overloads>
      <summary>
             Gets a connection for this database. 
             The supplied username and 
             password are used for the database connection.
            </summary>
      <returns>A connected <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance with 
            special <see cref="T:Telerik.OpenAccess.TransactionProvider" /> options.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
            Database files could not be found</exception>
      <param name="username">The user name for the connection.</param>
      <param name="password">The password for the connection.</param>
      <param name="provider">The style of the transaction controlling.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            Database files could not be opened</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
            User is not authorized to access the database</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Server host name could not be resolved</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.CommunicationException">
            Database server is not running or not reachable</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Server name is invalid: not port settings allowed</exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetEffectiveConnectionString">
      <summary>
            Gets the effective connection string for the database.
            </summary>
      <returns>
            Connection string that could be used with an ADO driver to connect to the database.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Database.Dispose">
      <summary>
            Releases all resources allocated by the database. Closes all
            database connections.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Database.ParseObjectId(System.Type,System.String)">
      <summary>
            Creates database identifiers of persistent objects by parsing 
            a string representation.
            </summary>
      <param name="oidstr">
            Database object ID in string form.
            </param>
      <param name="t">
            The Type of the object with the specified id. For internal identity,
            null can be specified.
            </param>
      <returns>
            New database object identifier.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetClassId(System.Type)">
      <summary>
            Returns the class id for a specific type
            </summary>
      <param name="t">
            The Type of the class to get the id from.
            </param>
      <returns>
            The class id as int
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetContext(System.Object)">
      <summary>
             Returns the IObjectContext instance responsible for the given persistence capable object.
             </summary>
      <returns>
             The context of the passed object: either an <see cref="T:Telerik.OpenAccess.IObjectScope" /> or an 
             <see cref="T:Telerik.OpenAccess.ObjectContainer" /> or <c>null</c>.
             </returns>
      <param name="persistentObject">
             The persistence capable object whose context is to be returned.
             </param>
      <exception cref="T:System.ArgumentNullException">
             No <paramref name="persistentObject" /> has been given.
             </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
             Type of the <paramref name="persistentObject" /> is not declared 
             <see cref="T:Telerik.OpenAccess.PersistentAttribute">[Persistent]</see> or not enhanced.
             </exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetObjectId(System.Object)">
      <summary>
            Returns the database object ID for the passed persistence capable
            instance.
            </summary>
      <param name="persistenceCapable">The persistence-capable instance.
            </param>
      <returns>Database object identity or <c>null</c> if 
            instance is transient.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            Type of the instance is not declared [Persistent] or not enhanced.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.Database.GetSchemaHandler">
      <summary>
            Gets schema handling instance. Must be called and used before any object scope is obtained.
            </summary>
      <returns>Schema Handler instance</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Database.ConnectionURL">
      <summary>
            Gets the URL for this database object.
            </summary>
      <value>String in URL syntax.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Database.Properties">
      <summary>
            Controls the settings of the database connections.
            </summary>
      <value>
            Instance with the properties of the database.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Database.OID">
      <summary>
            Get a helper object for database object identity instances.
            </summary>
      <value>
            The helper instance.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Database.DefaultTransactionProperties">
      <summary>
            Gets the default properties for the transactions.
            </summary>
      <value>Transaction properties instance with the default values.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Database.MetaData">
      <summary>
            Gets the metadata tree for this database.
            </summary>
      <returns>Returns the metadata tree for the actual database connection.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Database.BackendConfiguration">
      <summary>
            Gets a copy of the backend configuration used for this database.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Database.Cache">
      <summary>
            Level two cache controlling
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IDatabaseProperties">
      <summary>
            Controls the settings of a database.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IDatabaseProperties.ConnectionTimeout">
      <summary>
            Controls the timeout of database client/server connections after the last ObjectScope disposal.
            </summary>
      <value>The timeout value is given in milliseconds.
            </value>
      <exception cref="T:System.InvalidOperationException">
            Database has already been opened.
            </exception>
    </member>
    <member name="P:Telerik.OpenAccess.IDatabaseProperties.TransactionProvider">
      <summary>
            Specifies the usage pattern for transactions.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            The database has already been opened.
            </exception>
      <value>Indicates which transaction provider is (to be) used.</value>
    </member>
    <member name="T:Telerik.OpenAccess.ISchemaHandler">
      <summary>
            Methods for handling the database schema
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ISchemaHandler.CreateUpdateDDLScript(Telerik.OpenAccess.SchemaUpdateProperties)">
      <summary>
            Calculates the DDL script for updating the database to the current version of the enhanced classes and mapping information.
            </summary>
      <param name="props">Values controlling the update calculation process or <c>null</c> if the defaults are to be used.</param>
      <returns>String with the needed updates.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ISchemaHandler.CreateDDLScript">
      <summary>
            Calculates the DDL script for database schema creation of the current version of the enhanced classes and mapping information.
            </summary>
      <returns>String with the complete ddl script.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ISchemaHandler.ExecuteDDLScript(System.String)">
      <summary>
            Executes a DDL script on a not-yet used database instance.
            </summary>
      <param name="ddl">String containing DDL statements for the actual database</param>
    </member>
    <member name="M:Telerik.OpenAccess.ISchemaHandler.DatabaseExists">
      <summary>
            Tests if the database exists.
            </summary>
      <returns>
        <c>True</c> if database exists.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ISchemaHandler.CreateDatabase">
      <summary>
            Create empty database.
            </summary>
      <returns>
        <c>True</c> if database was created.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.SchemaUpdateProperties">
      <summary>Control switches for the database schema migration</summary>
    </member>
    <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckConstraint">
      <summary>
            Controls if constraints are migrated
            </summary>
      <value>
        <c>True</c> if constraints are migrated. (Default: True)</value>
    </member>
    <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckExtraColumns">
      <summary>
            Controls if additional (non-schema described) columns are migrated
            </summary>
      <value>
        <c>True</c> if additional columns are migrated. (Default: True)</value>
    </member>
    <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckIndex">
      <summary>
            Controls if indexes are migrated
            </summary>
      <value>
        <c>True</c> if indexes are migrated. (Default: True)</value>
    </member>
    <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckLength">
      <summary>
            Controls if length checks are performed during migration
            </summary>
      <value>
        <c>True</c> if column length differences are checked in migration. (Default: True)</value>
    </member>
    <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckNulls">
      <summary>
            Controls if nullability checks are performed during migration
            </summary>
      <value>
        <c>True</c> if column nullability differences are checked in migration. (Default: True)</value>
    </member>
    <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckPK">
      <summary>
            Controls if primary key checks are performed during migration
            </summary>
      <value>
        <c>True</c> if primary key checks are made during migration. (Default: True)</value>
    </member>
    <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckScale">
      <summary>
            Controls if column scale checks are performed during migration
            </summary>
      <value>
        <c>True</c> if column scale differences are checked during migration. (Default: True)</value>
    </member>
    <member name="P:Telerik.OpenAccess.SchemaUpdateProperties.CheckType">
      <summary>
            Controls if column type checks are performed during migration
            </summary>
      <value>
        <c>True</c> if column types are checked during migration.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Diagnostics.ITraceEvent">
      <summary>
            Interface for events generated by log tracing.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Name">
      <summary>
            Gets the name of the event.
            </summary>
      <value>Event name</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Description">
      <summary>
            Gets the description of the event.
            </summary>
      <value>Event description</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.EventType">
      <summary>
            Gets the internal numerical representation of the event type.
            </summary>
      <value>Numerical value discriminating the type of the event</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.EventId">
      <summary>
            Gets the event instance identification.
            </summary>
      <value>Numerical value for identification purposes</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ConnectionId">
      <summary>
            Gets the identification of the physical connection.
            </summary>
      <value>Connection discriminator value</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.StatementId">
      <summary>
            Gets the database statement identification.
            </summary>
      <value>Statement discriminator value</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ResultId">
      <summary>
            Gets the database result set identification.
            </summary>
      <value>Result set discriminator value</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.DatabaseId">
      <summary>
            Gets the database identification.
            </summary>
      <value>Database id</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.TransactionId">
      <summary>
            Gets the database transaction identification.
            </summary>
      <value>Transaction identifier</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.ErrorMessage">
      <summary>
            Gets the error message.
            </summary>
      <value>Error message</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Caller">
      <summary>
            Gets an identification for the calling client.
            </summary>
      <value>Calling client discriminator</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.FetchGroup">
      <summary>
            Gets the name of the fetch group used.
            </summary>
      <value>Fetch Group name</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.FieldName">
      <summary>
            Gets the name of the field causing lazy loading or modification.
            </summary>
      <value>Field name</value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.ITraceEvent.Query">
      <summary>
            Gets the actual query string.
            </summary>
      <value>Query expression</value>
    </member>
    <member name="T:Telerik.OpenAccess.Diagnostics.TraceAdapter">
      <summary>
            Handler for all trace and debugging messages
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Diagnostics.TraceAdapter.Instance">
      <summary>
            The instance used by all trace and debugging output.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceError">
      <summary>
            Indicates whether error trace messages will be generated. 
            </summary>
      <returns>
        <c>True</c> when error trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceError(System.String,System.Object[])">
      <summary>
            Writes an error trace message.
            </summary>
      <param name="msg">The format string.</param>
      <param name="o">An array of parameters or <c>null</c>.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceWarning">
      <summary>
            Indicates whether error or warning trace messages will be generated. 
            </summary>
      <returns>
        <c>True</c> when warning trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceWarning(System.String,System.Object[])">
      <summary>
            Writes a warning trace message.
            </summary>
      <param name="msg">The format string.</param>
      <param name="o">An array of parameters or <c>null</c>.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceInformation">
      <summary>
            Indicates whether error, warning or information trace messages will be generated. 
            </summary>
      <returns>
        <c>True</c> when information trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceInformation(System.String,System.Object[])">
      <summary>
            Writes an information trace message.
            </summary>
      <param name="msg">The format string.</param>
      <param name="o">An array of parameters or <c>null</c>.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceVerbose">
      <summary>
            Indicates whether error, warning, information or verbose trace messages will be generated. 
            </summary>
      <returns>
        <c>True</c> when verbose trace messages are beeing generated, <c>False</c> otherwise.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TraceVerbose(System.String,System.Object[])">
      <summary>
            Writes a verbose or debug trace message.
            </summary>
      <param name="msg">The format string.</param>
      <param name="o">An array of parameters or <c>null</c>.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.Trace(System.Int32,Telerik.OpenAccess.Diagnostics.ITraceEvent)">
      <summary>
            Writes an internal trace event message.
            </summary>
      <param name="ev">The trace event to write. Must not be null.</param>
      <param name="lvl">The level (1=error,2=warning,3=info,4=verbose) of th event to write.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Diagnostics.TraceAdapter.TimingInformation(System.String,System.Object[])">
      <summary>
            Prints timing information
            </summary>
      <param name="fmt">The format of the string returned about the timing</param>
      <param name="args">The arguments passed to the formated string</param>
            Whether timing information is printed is controlled by the <c>Telerik.OpenAccess.Timing</c> trace switch.
        </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Level">
      <summary>
            Controls the amount of trace messages beeing generated.
            </summary>
      <value>
            String value representing either the numerical value or one of the values
            'Off', 'Error' (here equal to 'Critical'), 'Warning', 'Information', 'Verbose'.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Tracing">
      <summary>
            Indicates whether any trace message will be generated.
            </summary>
      <value>
        <c>True</c> when trace messages are beeing generated, <c>False</c> otherwise.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Diagnostics.TraceAdapter.Listeners">
      <summary>
            Gets the collection of listeners that is monitoring the trace output.
            </summary>
      <value>
            A TraceListenerCollection that represents a collection of type TraceListener monitoring this trace output.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.LicensingException">
      <summary>
            The exception that is thrown when a required database license 
            is not available.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessException">
      <summary>
            The base class of all Telerik.OpenAccess .NET specific exceptions.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String)">
      <summary>
            Creates an instance with a given message; not intended for 
            application use.
            </summary>
      <param name="msg">The message for this exception.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,System.Boolean)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,Telerik.OpenAccess.Exceptions.IBackendError,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.String,System.Exception[],Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.setFailed(Telerik.OpenAccess.IObjectId)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.setNative(Telerik.OpenAccess.Exceptions.IBackendError)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.setCanRetry(System.Boolean)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.OpenAccessException.ToString">
      <summary>
            Creates and returns a string representation of the current exception.
            </summary>
      <returns>A string representation of the current exception.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.InnerExceptions">
      <summary>
            Gets the exception(s) causing this exception to be thrown.
            </summary>
      <value>
            Array with causing exceptions, possibly of size 1 or <c>null</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.FailedObject">
      <summary>
            Gets the object ID of the object causing this exception.
            </summary>
      <value>
            The representation of the object causing this exception or null
            if the object ID was not available.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.BackendError">
      <summary>
            Gets the database backend-specific error.
            </summary>
      <value>
            Database-backend specific error object.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.Reason">
      <summary>
            Gets the concrete error code for this exception.
            </summary>
      <value>
            The exact cause for this exception.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.CanRetry">
      <summary>
            Indicates whether this exception is caused by a temporal problem.
            </summary>
      <value>
        <c>True</c> if the application can try again and might succeed.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.OpenAccessException.HelpLink">
      <summary>
            Gets a link to the help file associated with this exception.
            </summary>
      <value>
            The Uniform Resource Name (URN) or Uniform Resource Locator (URL).
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.OpenAccessException.Failure">
      <summary>
            Fine-grained database error codes.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Runtime">
      <summary>
            General runtime error; see exception message and BackendError.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Parse">
      <summary>
            File parsing failure.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Unsupported">
      <summary>
            Unsupported option, operation or type.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.InvalidOperation">
      <summary>
            Operation is not possible in the current state/context.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionConflict">
      <summary>
            Object network uses more than one ObjectScope/Transaction.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DetachedObject">
      <summary>
            The object cannot be loaded because it is detached.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotEnhanced">
      <summary>
            The type of the object was not enhanced.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotPersistent">
      <summary>
            The object is not persistent in the database.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseIsClosed">
      <summary>
            The database is not open.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.NoSuchObject">
      <summary>
            The object is already deleted.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.InvalidObjectId">
      <summary>
            The object ID is not correct.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DuplicateKey">
      <summary>
            An attempt was made to insert a duplicate key.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.CannotConvertObject">
      <summary>
            An object could not be converted from the 
            database format.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseNotFound">
      <summary>
            The database was not found.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.DatabaseNotAccessible">
      <summary>
            The database was found, but is not accessible.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectNotAccessible">
      <summary>
            The object cannot be accessed; the object is 
            locked or the database
            is not opened for writing.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ObjectLocked">
      <summary>
            The object is locked by another transaction.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.ClassLocked">
      <summary>
            The type of the object is locked by another 
            transaction.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.OptimisticVerification">
      <summary>
            The object was modified by another transaction
             in the meantime.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.Internal">
      <summary>
             An internal error has occurred.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.LicensingNotValid">
      <summary>
            The license is not valid.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionActive">
      <summary>
            The transaction is already running.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionNesting">
      <summary>
            Attempt to use nested transaction, where 
            it is not supported.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionFailed">
      <summary>
            The transaction failed; possibly caused be 
            transaction validator.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.TransactionNotActive">
      <summary>
            The transaction is not active (not running).
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.OpenAccessException.Failure.HostnameUnresolvable">
      <summary>
            The Host name is incorrect.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.LicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.LicensingException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.AuthorizationException">
      <summary>
            The exception that is thrown when database access cannot be 
            granted due to a database authorization failure.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.AuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.AuthorizationException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
      <summary>
            The exception that is thrown when a persServiceNotificationistent object cannot be
            accessed by the current user due to database access rights management.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.CommunicationException">
      <summary>
            The exception that is thrown when a communication failure with
            the database occures.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.CommunicationException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.DataStoreException">
      <summary>
            The exception that is thrown when a database storage failure
            occurs.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.String,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DataStoreException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException">
      <summary>
            The exception that is thrown when the database storage 
            could not be found.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotFoundException.#ctor(System.String,System.Exception,Telerik.OpenAccess.Exceptions.IBackendError)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.TransactionException">
      <summary>
            The exception that is thrown when a database transaction
            method fails.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.TransactionFailedException">
      <summary>
            The exception that is thrown when a database transaction
            fails.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionFailedException.#ctor(System.String,System.Exception,Telerik.OpenAccess.Exceptions.IBackendError)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
      <summary>
            The exception that is thrown when no active transaction
            was given for a database method requiring one.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionNotActiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionNotActiveException.#ctor">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.TransactionNotActiveException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.PersistenceException">
      <summary>
            The exception that is thrown when an object is not persistent.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.PersistenceException.#ctor(System.String,Telerik.OpenAccess.OpenAccessException.Failure)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
      <summary>
            The exception that is thrown when a persistence-capable object
            was required but an instance of an unenhanced class was given.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException.#ctor(System.Object)">
      <summary>SPI</summary>
      <param name="o">An object of the not enhanced type</param>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ObjectNotPersistentException">
      <summary>
            The exception that is thrown when a persistent object was
            required but a transient instance was given.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotPersistentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectNotPersistentException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
      <summary>
            The exception that is thrown when an persistent object
            could not be retrieved from the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.NoSuchObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.NoSuchObjectException.#ctor(System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.NoSuchObjectException.#ctor(Telerik.OpenAccess.Exceptions.IBackendError)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ObjectConversionException">
      <summary>
            The exception that is thrown when a database object could not
            be accessed because an object conversion was required and failed.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ObjectConversionException.#ctor(System.String,Telerik.OpenAccess.Exceptions.IBackendError)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ConcurrencyControlException">
      <summary>
            Base exception for concurrency control failures.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConcurrencyControlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
      <summary>
            The exception that is thrown when a lock on a persistent object
            was not granted by the database.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.LockNotGrantedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.LockNotGrantedException.#ctor(System.String,System.Boolean)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
      <summary>
            The exception that is thrown when a persistent object was stored
            concurrently.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.#ctor(System.String,System.Exception[])">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.ConflictingObject(System.Int32)">
      <summary>
            Returns the object ID of one database object causing this optimistic
            verification exception.
            </summary>
      <param name="index">The index of the sub-conflict.</param>
      <returns>The object ID of the object causing the 
            respective sub-conflict.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.Conflict(System.Int32)">
      <summary>
            Returns a sub-exception which caused this optimistic 
            verification exception.
            </summary>
      <param name="index">The index of the sub-conflict.</param>
      <returns> The OpenAccessException from the respective sub-conflict.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.OptimisticVerificationException.NumberOfConflicts">
      <summary>
            	Gets the number of sub-conflicts causing this exception.
            	</summary>
      <value>The number of sub-conflicts causing this exception.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException">
      <summary>
            The exception that is thrown when an opened database was not provided.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DatabaseNotOpenedException.#ctor(System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.InvalidObjectIdException">
      <summary>
            The exception that is thrown when an invalid object ID was used.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.InvalidObjectIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.InvalidObjectIdException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ParseException">
      <summary>
            The exception that is thrown when a runtime configuration
            file could not be successfully parsed.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ParseException.#ctor(System.String,System.String,System.Int32)">
      <summary>SPI</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.ParseException.Location">
      <summary>
            Gets the name of the file that contains the error.
            </summary>
      <value>
            File name.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.ParseException.LineNumber">
      <summary>
            Gets the line number of the error.
            </summary>
      <value>
            Line number.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.DuplicateKeyException">
      <summary>
            The exception that is thrown when an attempt was made to insert
            a duplicate value into an unique index. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.#ctor(System.String,System.Object,System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.DuplicateKeyException.#ctor(System.String,System.Object,System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.UnsupportedException">
      <summary>
            The exception that is thrown when an operation or option
            is not supported by the database backend or current 
            configuration.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.UnsupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.UnsupportedException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.UnsupportedException.#ctor(System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
      <summary>
            The exception that is thrown when an operation is invalid
            in the current state of the database, transaction or object.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.InvalidOperationException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.QueryException">
      <summary>
            The exception that is thrown when a database query is
            not correct.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.QueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.QueryException.#ctor(System.String,System.Exception,Telerik.OpenAccess.OpenAccessException.Failure,System.String)">
      <summary>SPI</summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ConfigurationException">
      <summary>
            The exception that is thrown when a configuration error occures.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="serializationInfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.String)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.String,Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.ConfigurationException.#ctor(System.String,System.Exception,Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType)">
      <summary>SPI</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.ConfigurationException.ErrorOccurred">
      <summary>
            Gets the underlying ConfigErrorType for this configuration exception .
            </summary>
      <value>A ConfigurationException.ConfigErrorType value.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.ConfigurationException.History">
      <summary>
            Gets a string representation of the events that resulted in this exception.
            </summary>
      <value>String representation of the configuration history.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.ConfigurationException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>The error message that explains the reason for the exception.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.ConfigurationException.HelpLink">
      <summary>
            Gets a link to the help file associated with this exception.
            </summary>
      <value>
            The Uniform Resource Name (URN) or Uniform Resource Locator (URL).
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType">
      <summary>
            Specifies the type of configuration exception that has occurred.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConfigSectionNotFound">
      <summary>
            The required section in the configuration was not found.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConnectionSectionWithSpecifiedIdMissing">
      <summary>
            The section given by ID was not found in the configuration.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.IncorrectDriverSpecified">
      <summary>
            The given driver name is not supported.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ErrorParsingConfigFile">
      <summary>
            There was an error while parsing the config file.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConfigFileNotFound">
      <summary>
            The given configuration file was not found.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Exceptions.ConfigurationException.ConfigErrorType.ConfigFileNotAuthorized">
      <summary>
            The given configuration file is not accessible with the current rights.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.MetadataException">
      <summary>
            The exception that is thrown when a metadata compilation error occurs.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implementation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="info">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.#ctor(System.Int32,System.String,System.Exception)">
      <summary>SPI</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Exceptions.MetadataException.#ctor(System.Int32,System.String)">
      <summary>SPI</summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ErrorId">
      <summary>Gets an identifying error number for this exception.</summary>
      <value>Identifying error number</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ClassName">
      <summary>
            Gets the class name where the error occured; if it is not a class it is a table.
            </summary>
      <value>
            The class name where the error occured; if it is not a class it is a
            table.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.FieldName">
      <summary>
            Gets the field name where the error occured.
            </summary>
      <value>The field name where the error occured.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.TableName">
      <summary>
            Gets the table name where the error occured.
            </summary>
      <value>The table name where the error occured.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ColumnName">
      <summary>
            Gets the column name where the error occured.
            </summary>
      <value>The column name where the error occured.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.AmbiguousValue">
      <summary>
            Gets the ambiguous value causing the error.
            </summary>
      <value>The ambiguous value causing the error.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.DisambiguatedValue">
      <summary>
            Gets the disambiguated value fixing the error.
            </summary>
      <value>The disambiguated value fixing the error.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.FileName">
      <summary>
            Gets the file name where the error is caused.
            </summary>
      <value>The name of the File where the exception was thrown</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ProjectName">
      <summary>
            Gets the project name where the error is caused.
            </summary>
      <value>The name of the Project where the exception was thrown</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.IndexName">
      <summary>
            Gets the index name where the error is caused.
            </summary>
      <value>The name of the Index where the exception was thrown</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ConstraintName">
      <summary>
            Gets the constraint name where the error is caused.
            </summary>
      <value>The constraint name where the error is caused.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.ProcedureName">
      <summary>
            Gets the procedure name where the error is caused.
            </summary>
      <value>The method name where the error is caused.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.PreviousDefiner">
      <summary>
            Gets the name of the existing definer of an ambiguous name.
            </summary>
      <value>The exception data with the key of "PreviousDefiner"</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Context">
      <summary>
            Gets the context string
            </summary>
      <value>The context string</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Usage">
      <summary>
            Gets the indicator whether key or value are meant
            </summary>
      <value>The exception data with the key of "Usage"</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Column">
      <summary>
            Gets the column number.
            </summary>
      <value>The column number.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Line">
      <summary>
            Gets the line number.
            </summary>
      <value>The number of the current line</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.IsWarning">
      <summary>
            Indicates a warning.
            </summary>
      <value>True if the exception is a warning; otherwise false</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.HelpKeyword">
      <summary>
            Gets the help keyword available with this error.
            </summary>
      <value>The keyword by which you can search the exception in the help</value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.MetadataException.Message">
      <summary>
            Gets the custom exception message.
            </summary>
      <value>The exception message</value>
    </member>
    <member name="T:Telerik.OpenAccess.Exceptions.IBackendError">
      <summary>
            Description of a backend-specific error.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.IBackendError.Description">
      <summary>
            Gets the database backend-specific error description.
            </summary>
      <value>
            Error description provided by the backend.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.IBackendError.Number">
      <summary>
            Gets the database backend-specific error number.
            </summary>
      <value>
            The database backend-specific error number.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Exceptions.IBackendError.ObjectId">
      <summary>
            Gets the object id of the object causing the backend error.
            </summary>
      <value>
            The object id of the object related with the error. 
            The value might be null.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.FetchGroupCollector">
      <summary>
            Provides methods to calculate the object network of a root object.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IObjectCollector">
      <summary>
            Interface for obtaining entire network of persistent objects.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectCollector.Collect(System.Object)">
      <overloads>
            When implemented by a class, calculates and returns a list of all 
            'persistence capable' objects reachable from the 'rootObject(s)'.
            </overloads>
      <summary>
            When implemented by a class, calculates and returns a list of all 'persistence 
            capable' objects reachable from the 'rootObject'.
            </summary>
      <param name="rootObject">The root object of the object network to be 
            calculated.</param>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that exposes the enumerator for 
            the objects collected.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectCollector.Collect(System.Collections.IEnumerator)">
      <summary>
            When implemented by a class, calculates and returns a list of all 'persistence 
            capable' objects reachable from the 'rootObjects'.
            </summary>
      <param name="rootObjects">Enumerator for the root objects.Object network for
            each root object will be calculated.
            </param>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that exposes the enumerator for 
            the objects collected.
            </returns>
    </member>
    <member name="F:Telerik.OpenAccess.FetchGroupCollector.DefaultFetchGroup">
      <summary>
            Used to specify that the 'Default' fetch group is to be used 
            in the Collect method.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchGroupCollector.DeepFetchGroup">
      <summary>
            Used to specify that the 'Deep' fetch group is to be used 
            in the Collect method.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchGroupCollector.DependFetchGroup">
      <summary>
            Used to specify that the 'Depend' fetch group is to be used 
            in the Collect method.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupCollector.#ctor">
            used by Closure
        </member>
    <member name="M:Telerik.OpenAccess.FetchGroupCollector.#ctor(System.String)">
      <summary>
            Initializes a new instance of FetchGroupCollector.
            </summary>
      <param name="fetchGroupName">Name of the fetch group to use while
            calculating the object network in a call to <see cref="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Object)" />.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Object)">
      <overloads>
            Calculates and returns a list of all 'persistence capable' objects reachable from the 
            'rootObject(s)'.
            </overloads>
      <summary>
             Calculates the object network starting from the persistent root object. 
             </summary>
      <param name="rootObject">The root object of the object network to be
             calculated.</param>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that exposes the enumerator for 
            the objects collected.
             </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchGroupCollector.Collect(System.Collections.IEnumerator)">
      <summary>
             Calculates the object network for each of the specified persistent root objects.
             </summary>
      <param name="rootObjects">The enumerator for the root objects.</param>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that exposes the enumerator for 
            the objects collected.
             </returns>
    </member>
    <member name="T:Telerik.OpenAccess.FetchPlan">
      <summary>
            Interface for setting and changing the actual FetchPlan.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchPlan.Default">
      <summary>
            Default FetchGroup name definition.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchPlan.All">
      <summary>
            Maximum FetchGroup name definition.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchPlan.DefaultMaxDepth">
      <summary>
            Default value for maximum fetch depth.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchPlan.NoLimit">
      <summary>
            Unlimited retrieval of objects in one fetch operation.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.FetchPlan.DefaultLimit">
      <summary>
            Default value for retrieval of objects in one fetch operation.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.#ctor">
      <summary>
            Initializes a new instance.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.#ctor(System.String[],System.Int32,System.Int32)">
      <summary>
            Creates a new instance.
            </summary>
      <param name="fetchGroups">
            The FetchGroup array consists of FetchGroup name that has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch. 
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
      <param name="maxDepth">
            Controls the maximum tree depth for an object to be fetched.
            This assigns the value of the <see cref="P:Telerik.OpenAccess.FetchPlan.MaxDepth">MaxDepth</see> 
            property.
            </param>
      <param name="limit">
            Value for retrieval of objects in one fetch operation.
            This assigns the value of the <see cref="P:Telerik.OpenAccess.FetchPlan.Limit">Limit</see>  
            property. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.Add(System.String)">
      <summary>
            Adds a FetchGroup name to the actual FetchPlan definition.
            </summary>
      <param name="groupName">
            The FetchGroup name has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch. 
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
      <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Add("grp1").Add("grp2")...</c> several times.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.Remove(System.String)">
      <summary>
            Removes a FetchGroup name from the actual FetchPlan definition.
            </summary>
      <param name="groupName">
            The FetchGroup name has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
      <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Remove("grp1").Remove("grp2")...</c> several times.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.Clear">
      <summary>
            Clears the actual FetchPlan definition.
            </summary>
      <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Clear().Add("grp1").Add("grp2")...</c> several times.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.Set(System.String)">
      <summary>
            Replaces the actual FetchPlan by a single FetchGroup name.
            </summary>
      <param name="groupName">
            The FetchGroup name has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
      <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Set("grp0").Add("grp1").Add("grp2")...</c> several times.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.Set(System.String[])">
      <summary>
            Replaces the actual FetchPlan by an string array of FetchGroup names.
            </summary>
      <param name="groupNames">
            The FetchGroup names has to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </param>
      <returns>
            Returns the changed FetchPlan. You can call:
            <c>scope.FetchPlan.Set(groupName).Add("grp1").Remove("grp2")...</c> several times.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.FetchPlan.GetGroupNames">
      <summary>
            Gets the actual FetchPlan definition.
            </summary>
      <returns>
            The FetchGroup names have to be defined as
            <see cref="T:Telerik.OpenAccess.FetchFieldAttribute">[FetchField(groupName)]</see>
            at the field of a class that you want to fetch.
            <c>FetchPlan.Default</c> or <c>FetchPlan.All</c> is also possible.
            </returns>
    </member>
    <member name="P:Telerik.OpenAccess.FetchPlan.Limit">
      <summary>
            Controls the maximum number of objects that can be fetched together.
            </summary>
      <value>
            An integer <c>&gt;=0</c>. 0 means no limit! The default value is <see cref="F:Telerik.OpenAccess.FetchPlan.DefaultLimit" />.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.FetchPlan.MaxDepth">
      <summary>
            Controls the maximum tree depth that is fetched together.
            </summary>
      <value>
            An integer <c>&gt;=1</c>. Default is <see cref="F:Telerik.OpenAccess.FetchPlan.DefaultMaxDepth" />. 
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.IDataObjectKey">
      <summary>
             The IDataObjectKey can be used to bind objects with internal id or version field to web ui elements.
             </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IDataObjectKey.DataObjectKey">
      <summary>
            Returns a string representation of the id and version fields
            </summary>
      <value>The id and version fields</value>
    </member>
    <member name="T:Telerik.OpenAccess.DataObjectKey">
      <summary>
            Id and version handling
            </summary>
      <value>string representation of the id and version fields</value>
    </member>
    <member name="M:Telerik.OpenAccess.DataObjectKey.Obtain(System.Object)">
      <summary>
            Gets the string representaion of id and version information
            </summary>
      <param name="persistenceCapable"> The persistent object.</param>
      <returns>String representation of id and version.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.DataObjectKey.Check(System.String,Telerik.OpenAccess.IObjectContext)">
      <summary>
            Retrieves an objects and checks the database version against the given version
            </summary>
      <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            The object has been delete in the meantime.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ConcurrencyControlException">
            The object has been changed in the meantime.
            </exception>
      <param name="key">The key generated by <see cref="M:Telerik.OpenAccess.DataObjectKey.Obtain(System.Object)" />.</param>
      <param name="objectContext">The <see cref="T:Telerik.OpenAccess.IObjectScope" /> or <see cref="T:Telerik.OpenAccess.ObjectContainer" /> to load the data from.</param>
      <returns>The persistent object.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.DataObjectKey.Interpret(System.String,System.String@)">
      <summary>
            Generates an IObjectId instance from the key and gives back the version information.
            </summary>
      <param name="key">The key generated by <see cref="M:Telerik.OpenAccess.DataObjectKey.Obtain(System.Object)" />.</param>
      <param name="version">Out parameter that gives back the version information from the key.</param>
      <returns>An <see cref="T:Telerik.OpenAccess.IObjectId" /> instance that can be used to load the real object.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.IDBObjectEnumerator">
      <summary>
            Interface for enumerators on persistent database objects.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IMovableEnumerator">
      <summary>
            Interface for enumerator objects which can be positioned freely.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IMovableEnumerator.Move(System.Int32)">
      <summary>
            Moves the enumerator forwards or backwards by a specified
            number of elements.
            </summary>
      <param name="relative">If greater <c>0</c>, the enumerator
            is moved forwards by the specified number of elements. 
            If less than <c>0</c>, the enumerator is moved backwards.</param>
      <returns>Returns <c>true</c> if the enumerator was 
            successfully moved to an 
            object; <c>false</c> if the enumerator could not be positioned.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.IMovableEnumerator.MoveToEnd">
      <summary>
            Moves the enumerator behind the last object.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IMovableEnumerator.Count">
      <summary>
            Returns the number of objects of the underlying source 
            of this enumerator.
            </summary>
      <value>Number of objects.</value>
    </member>
    <member name="M:Telerik.OpenAccess.IDBObjectEnumerator.MoveToObject(System.Object)">
      <summary>
            Moves the enumerator to the specified persistent object.
            </summary>
      <param name="persistentObject">
            The persistent object to move to.</param>
      <returns>Returns <c>true</c> if the enumerator was 
            successfully moved to the
            object (the object was found); <c>false</c> if the enumerator 
            could not be positioned.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.IDBObjectEnumerator.MoveToObject(Telerik.OpenAccess.IObjectId)">
      <summary>
             Moves the enumerator to the persistent object with the specified
             database object id.
             </summary>
      <param name="oid">The id of the persistent object to move to.
            </param>
      <returns>Returns <c>true</c> if the enumerator was 
             successfully moved to the
             object (the object was found); <c>false</c> if the enumerator 
             could not be positioned.
             </returns>
    </member>
    <member name="T:Telerik.OpenAccess.IInstanceCallbacks">
      <summary>Interface that provides callback methods 
             for life cycle events of persistent objects.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IInstanceCallbacks.PostLoad">
      <summary>
            Called after the persistent values are loaded from 
            the database into this instance.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IInstanceCallbacks.PreRemove(Telerik.OpenAccess.IObjectScope)">
      <summary>
            Called before the instance is removed.
            </summary>
      <param name="objectScope">The object scope where the change 
            occures.</param>
    </member>
    <member name="M:Telerik.OpenAccess.IInstanceCallbacks.PreStore">
      <summary>
            Called before the values are stored from this instance to the
            database.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.InitOperation">
      <summary>
            Describes the reason why transient fields were initialized.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.Constructed">
      <summary>
            Object was constructed.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.Hollow">
      <summary>
            Object was hollowed.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.Refresh">
      <summary>
            Object was refreshed.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.Retrieve">
      <summary>
            Object was retrieved.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.CopyFrom">
      <summary>
            Object was copied into ObjectContainer.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.InitOperation.Apply">
      <summary>
            Object from ObjectContainer was applied.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IInitializeTransients">
      <summary>
            Interface that provides a callback when data is fetched or invalidated.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IInitializeTransients.InitializeTransients(Telerik.OpenAccess.InitOperation)">
      <summary>
            Called when transient fields of an object are to be initialized.
            </summary>
      <param name="initOperation">The reason why the initialization is required.</param>
    </member>
    <member name="T:Telerik.OpenAccess.IObjectContext">
      <summary>
            Common interface of IObjectScope and ObjectContainer.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.Add(System.Object)">
      <summary>
            Marks an object of a persistence-capable class to be added to
            the database context. 
            </summary>
      <param name="persistenceCapableObject">Instance of a persistence 
            capable class. It can also be an IEnumerable of objects to add.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistenceCapableObject" /> was not marked as 
            [Persistent] or was not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.Remove(System.Object)">
      <summary>
             Marks an object from this context as 'deleted' and to be
             removed from the database.
             </summary>
      <param name="persistentObject">Persistent object which 
             must be known to the context before. It can also be an IEnumerable of objects to remove.</param>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">Instance not known in this context 
             (is transient or managed by
             another object context).</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
             Transaction is not running (IObjectScope implementation).
             </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
             The type of <paramref name="persistentObject" /> was not marked as 
             [Persistent] or is not enhanced.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.MakeDirty(System.Object,System.String)">
      <summary>
            Marks a field of an object from this context manually as 'dirty' and to be updated
            in the database context. Must be called before modifications occur.
            </summary>
      <param name="persistentObject">The object that should 
            be marked as dirty. It can also be an IEnumerable of objects to mark as dirty.</param>
      <param name="fieldName">The field that should 
            be marked as dirty.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent]
            or is not enhanced.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.IsDirty(System.Object)">
      <summary>
            Indicates whether the state of a persistent object in 
            this context is 'dirty' / to be updated.
            </summary>
      <param name="persistentObject">The object to be checked.</param>
      <returns>
        <c>true</c> if the object was modified (marked as dirty); 
            <c>false</c> otherwise.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.IsDirty(System.Object,System.String)">
      <summary>
            Indicates whether the state of a field of a persistent object in 
            this context is 'dirty' / to be updated.
            </summary>
      <param name="persistentObject">The object to be checked.</param>
      <param name="fieldName">The name of the field to be checked</param>
      <returns>
        <c>true</c> if the object was modified (marked as dirty); 
            <c>false</c> otherwise.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.IsRemoved(System.Object)">
      <summary>
             Indicates whether the state of a persistent object in 
             this context is 'deleted' / to be deleted.
             </summary>
      <param name="persistentObject">The object to be checked.</param>
      <returns>
        <c>true</c> if the object was deleted (marked as deleted); 
             <c>false</c> otherwise.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
             Transaction is not running (IObjectScope implementation).
             </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.IsNew(System.Object)">
      <summary>
             Indicates whether the state of a persistent object in 
             this context is 'new' / to be inserted.
             </summary>
      <param name="persistentObject">The object to be checked.</param>
      <returns>
        <c>true</c> if the object was added (marked as added); 
             <c>false</c> otherwise.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
             Transaction is not running (IObjectScope implementation).
             </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.IsHollow(System.Object)">
      <summary>
            Indicates whether an object is hollow, i.e., its content 
            is empty and not yet filled from the database.
            </summary>
      <param name="persistentObject">The object where the hollow state should 
            be returned for.</param>
      <returns>Returns <c>true</c> if the object is hollow;
            otherwise <c>false</c>.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
            The type of <paramref name="persistentObject" /> was not marked as 
            [Persistent] or is not enhanced.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.GetObjectId(System.Object)">
      <summary>
            Returns the database identity for a persistent object.
            </summary>
      <param name="persistentObject">The instance whose identity is 
            requested.</param>
      <returns>The database object ID of the instance or <c>null</c>
            if <paramref name="persistentObject" /> does not belong to this context or 
            is not enhanced.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.GetObjectById(Telerik.OpenAccess.IObjectId)">
      <summary>
            Retrieves the instance which is associated with the given 
            database object ID from this context.
            </summary>
      <returns>The instance with the specified <paramref name="objectId" />.
            </returns>
      <param name="objectId">The database identity object.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            The object is deleted.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.GetObjectById``1(Telerik.OpenAccess.IObjectId)">
      <summary>
            Retrieves the instance, of the specified type, which is associated with the given 
            database object ID from this context.
            </summary>
      <returns>The instance of the specified type with the specified <paramref name="objectId" />.
            </returns>
      <param name="objectId">The database identity object.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            The object is deleted.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction is not running (IObjectScope implementation).
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectContext.Evict(System.Object)">
      <summary>
            Marks a persistent object as no longer needed in the transaction 
            cache. This is a hint to the implementation.
            </summary>
      <param name="persistentObject">The instance to evict from the cache. It can also be an IEnumerable of objects to evict.
            </param>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectContext.Transaction">
      <summary>
            Gets the associated transaction instance.
            </summary>
      <value>The associated transaction instance.</value>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectContext.Tracking">
      <summary>
            Gets the associated change tracking interface.
            </summary>
      <value>The associated tracking instance.</value>
    </member>
    <member name="T:Telerik.OpenAccess.IObjectContextProvider">
      <summary>
            Interface that provides the context (IObjectScope) 
            of the specific funtionality.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectContextProvider.Context">
      <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
      <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.IObjectId">
      <summary>
            Database object identifiers of persistent objects.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IObjectScope">
      <summary>
            Primary interface for database
            applications and the entry point for executing 
            queries, extent and transaction operations
            containing methods to manage the life cycle of persistent objects.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.Refresh(System.Object)">
      <summary>
            Refreshes the state and values of the persistent object 
            from the database.
            </summary>
      <param name="persistentObject">The instance to refresh or an IEnumerable of instances to refresh.</param>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery(System.String)">
      <summary>
            Makes a new oql query object from the specified expression.
            </summary>
      <returns>Returns a query instance, which can be executed.
            </returns>
      <param name="oqlExpression">The oql query expression.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery``1">
      <summary>
            Makes a new oql query object from the specified type.
            </summary>
      <returns>Returns a query instance, which can be executed.
            </returns>
      <typeparam name="T">The type of the objects to query for.
            </typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery``1(System.String)">
      <summary>
            Makes a new oql query object from the specified expression.
            </summary>
      <param name="oqlExpression">The oql query expression.
            </param>
      <returns>Returns a query instance, which can be executed.
            </returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.QueryException">
             Result type of the OQL query and T do not match.
            </exception>
      <typeparam name="T">The type of the objects to return.
            </typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery``1(System.String,System.String)">
      <summary>
            Makes a new sql query object from the specified expression.
            </summary>
      <param name="sqlExpression">The sql query expression.
            </param>
      <param name="param">The parameter declarations for the sql 
            expression. 
            </param>
      <returns>Returns a query instance, which can be executed.
            </returns>
      <typeparam name="T">The type of the returned objects.
             </typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetOqlQuery(Telerik.OpenAccess.IQuery)">
      <summary>
            Makes a new oql query object from an exististing query.
            </summary>
      <returns>Returns a query instance, which can be executed.
            </returns>
      <param name="query">The original sql query. 
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.EnlistTransaction(System.Transactions.Transaction)">
      <summary>
            Enlists this instance in a given transaction.
            </summary>
      <param name="transaction">The <see cref="T:System.Transactions.Transaction" /> that enlists this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transaction" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="transaction" /> is closed or disposed.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">The 
            <see cref="P:Telerik.OpenAccess.IDatabaseProperties.TransactionProvider" /> had an incorrect value.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.Retrieve(System.Object)">
      <summary>
            Retrieves an instance from the database. This is a hint to the
            implementation.
            </summary>
      <param name="persistentObject">The object or an IEnumerable of objects to be retrieved.</param>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.Retrieve(System.Object,Telerik.OpenAccess.FetchPlan)">
      <summary>
            Retrieves instances from the database according to the passed FetchPlan. This is a hint to the
            implementation.
            </summary>
      <param name="persistentObject">An object or an IEnumerable of objects to be retrieved.</param>
      <param name="fetchPlan">The FetchPlan to be used.</param>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery(System.String,System.Type,System.String)">
      <summary>
            Makes a new sql query object from the specified expression.
            </summary>
      <param name="sqlExpression">The sql query expression.
            </param>
      <param name="result">The type of the instances returned in the 
            query result after query execution.
            </param>
      <param name="param">The parameter declarations for the sql 
            expression. 
            </param>
      <returns>Returns a query instance, which can be executed.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.GetSqlQuery(Telerik.OpenAccess.IQuery)">
      <summary>
            Makes a new sql query object from an exististing query.
            </summary>
      <param name="query">The original sql query. 
            </param>
      <returns>Returns a query instance, which can be executed.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.IObjectScope.LookupObjectById(Telerik.OpenAccess.IObjectId)">
      <summary>
            Returns the instance which is associated with the given 
            database object ID from this context if it is already loaded.
            </summary>
      <returns>The instance with the specified <paramref name="objectId" /> or null.
            </returns>
      <param name="objectId">The database identity object.</param>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectScope.Database">
      <summary>
            Gets the Database object used to create
            this instance.  
            </summary>
      <value>The database object that created
            this instance.</value>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectScope.TransactionProperties">
      <summary>
            Gets the configuration settings of the 
            transaction. Transaction properties can only be changed 
            if the transaction is not active.
            </summary>
      <value>Transaction properties object.</value>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectScope.FetchPlan">
      <summary>
            Gets and Sets the actual Fetch Plan. 
            You can change the Fetch Plan definition at any time.
            </summary>
      <value>Fetch Plan instance.</value>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectScope.PersistentMetaData">
      <summary>
            Returns the metadata describing all persistent classes
            </summary>
      <value>The PersistentMetaData for the persistent classes associated with the IObjectScope instance</value>
    </member>
    <member name="P:Telerik.OpenAccess.IObjectScope.Log">
      <summary>
            Specifies the destination to write the SQL query or command.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IPersistentBehavior">
      <summary>
            Defines how add and remove on a list should be handled with regards to the database.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IPersistentBehavior.AddBehavior">
      <summary>
            Defines how add on a list should be handled with regards to the database.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.IPersistentBehavior.DeleteBehavior">
      <summary>
            Defines how remove on a list should be handled with regards to the database.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.PersistenceBehavior">
      <summary>
            Enum to define the persistent bahavior of list add and remove calls.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.PersistenceBehavior.Persistent">
      <summary>
            The add or remove call should be reflected in the 
            database by inserting or deleting the data.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.PersistenceBehavior.NonPersistent">
      <summary>
            The add or remove call should not be reflected in the 
            database.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.IQuery">
      <summary>
            Interface for executing queries.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IQuery.Compile">
      <summary>
            Compiles the query to the native query format, e.g. SQL.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IQuery.Execute">
      <summary>
            Executes the specified query and returns the result.
            This method can only be used for queries without parameters.
            </summary>
      <returns>The result of the query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.IQuery.Execute(System.Object[])">
      <summary>
            Executes the specified query using the parameters passed
            and returns the result.
            </summary>
      <param name="args">The query parameters to use.</param>
      <returns>The result of the
             query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.IQuery.Prefetch(System.Int32)">
      <summary>
            Applies prefetch settings to the uncompiled query.
            </summary>
      <param name="count">The prefetch value to be used.
            </param>
      <returns>The query with applied prefetch settings.</returns>
      <exception cref="T:System.InvalidOperationException">Query result has
            already been calculated.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.ForwardsOnly">
      <summary>
            Determines whether the query result can be traversed
            forwards only, or if random access is possible.
            </summary>
      <value>True, if the query result can be traversed.
            forwards only</value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.IgnoreUncommitted">
      <summary>
            This property determines whether the query execution is allowed 
            to ignore the changes made in the current transaction, e.g. 
            return objects which have been deleted in the current transaction.
            </summary>
      <value>True, if uncommitted changes can be ignored.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.MaxResultCount">
      <summary>
            Limits the maximum number of instances to return by query execution.
            result.
            </summary>
      <value>The maximum number of instances to return by query execution.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.Expression">
      <summary>
            Provides the query expression from which this query was created.
            </summary>
      <value>The query expression.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.BackendQuery">
      <summary>
            Gets the generated backend query expression (e.g. SQL).
            </summary>
      <value>The native query expression.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.RootType">
      <summary>
            Gets the root type of the query result when the query returns only
            instances of a persistence-capable classes.
            </summary>
      <value>
            The root type of the instances delivered by this query, or <c>null</c>.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.ParallelFetch">
      <summary>
            Controls whether parallel result fetching is allowed.
            </summary>
      <value>
        <c>True</c> when parallel result fetching is allowed, <c>false</c> otherwise.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQuery.Skip">
      <summary>
            Controls the amount of data which is to be skipped before results are fetched.
            </summary>
      <value>Amount of data to skip. (Default:0)</value>
    </member>
    <member name="T:Telerik.OpenAccess.IQueryResult">
      <summary>
            Result of a database query execution.
            The result has to be disposed. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.IQueryResult.GetEnumerator">
      <summary>
            Returns a moveable enumerator to enumerate the query result objects.
            </summary>
      <returns>New enumerator for the query result.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.IQueryResult.Prefetch(System.Int32)">
      <summary>Prefetches a speicified amount of result elements.</summary>
      <returns>See <see cref="M:Telerik.OpenAccess.IQuery.Prefetch(System.Int32)" /></returns>
      <param name="count">See <see cref="M:Telerik.OpenAccess.IQuery.Prefetch(System.Int32)" /></param>
    </member>
    <member name="M:Telerik.OpenAccess.IQueryResult.GetTotalCount">
      <summary>
            Obtains the total number of results in a paging-independend fashion.
            </summary>
      <returns>The total number of results.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.IQueryResult.ToList">
      <summary>
            Resolves the complete result and adds it to an ArrayList
            </summary>
      <returns>ArrayList with the complete fetched result.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.IQueryResult.Context">
      <summary>
            Returns the context in which the query was executed.
            </summary>
      <value>
            The IObjectContext of the query result.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQueryResult.OutParameter">
      <summary>
            Returns a dictionary containing the stored procedure out parameter values.
            </summary>
      <value>
            Dictionary of out parameter values by name.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.IQueryResult.RootType">
      <summary>
            Gets the root type of the query result when the query returns only
            instances of a persistence-capable classes.
            </summary>
      <value>
            The root type of the instances delivered by this query, or <c>null</c>.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.ITracking">
      <summary>
            Provides change tracking events for modifications of persistent objects.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Changing">
      <summary>
            Occurs before a field of a persistent object is changed by the application.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Changed">
      <summary>
            Occurs after a field of a persistent object has been changed by the application.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Adding">
      <summary>
            Occurs before a persistent object is added to the object context.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Added">
      <summary>
            Occurs after an object was marked as to be persisted by the object context.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Removing">
      <summary>
            Occurs before a persistent object is removed from the object context.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Removed">
      <summary>
            Occurs after a persistent object was marked as to be removed from the object context.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Refreshing">
      <summary>
            Occurs before a persistent object is refreshed from the database.
            </summary>
    </member>
    <member name="E:Telerik.OpenAccess.ITracking.Refreshed">
      <summary>
            Occurs after a persistent object was refreshed from the database.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ChangeEventHandler">
      <summary>
            Represents the method that will handle the Changing and Changed events.
            </summary>
      <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance
            or an <see cref="T:Telerik.OpenAccess.ObjectContainer" /> instance.</param>
      <param name="e">A <see cref="T:Telerik.OpenAccess.ChangeEventArgs" /> containing the data for the event.</param>
    </member>
    <member name="T:Telerik.OpenAccess.AddEventHandler">
      <summary>
            Represents the method that will handle the Adding and Added events.
            </summary>
      <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance
            or an <see cref="T:Telerik.OpenAccess.ObjectContainer" /> instance.</param>
      <param name="e">A <see cref="T:Telerik.OpenAccess.AddEventArgs" /> containing the data for the event.</param>
    </member>
    <member name="T:Telerik.OpenAccess.RemoveEventHandler">
      <summary>
            Represents the method that will handle the Removing and Removed events.
            </summary>
      <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance
            or an <see cref="T:Telerik.OpenAccess.ObjectContainer" /> instance.</param>
      <param name="e">A <see cref="T:Telerik.OpenAccess.RemoveEventArgs" /> containing the data for the event.</param>
    </member>
    <member name="T:Telerik.OpenAccess.RefreshEventHandler">
      <summary>
            Represents the method that will handle the Refreshing and Refreshed events.
            </summary>
      <param name="sender">The source of the event, either a <see cref="T:Telerik.OpenAccess.IObjectScope" /> instance
            or an <see cref="T:Telerik.OpenAccess.ObjectContainer" /> instance.</param>
      <param name="e">A <see cref="T:Telerik.OpenAccess.RefreshEventArgs" /> containing the data for the event.</param>
    </member>
    <member name="T:Telerik.OpenAccess.PersistenceEventArgs">
      <summary>
            Base class for change tracking events of persistent objects.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.PersistenceEventArgs.#ctor(System.Object)">
      <summary>Constructs a new instance.</summary>
      <param name="pc">The tracked persistent object.</param>
    </member>
    <member name="P:Telerik.OpenAccess.PersistenceEventArgs.PersistentObject">
      <summary>
            Gets the persistent object the event was fired for.
            </summary>
      <value>
            The persistent object which has changed it's state or value.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistenceEventArgs.Finished">
      <summary>
            Indicates whether the event action is starting or finished.
            </summary>
      <value>
        <c>True</c> when the event action is finished.</value>
    </member>
    <member name="P:Telerik.OpenAccess.PersistenceEventArgs.Tag">
      <summary>
            Gets or sets a user defined value.
            </summary>
      <value>Application defined value.</value>
    </member>
    <member name="T:Telerik.OpenAccess.AddEventArgs">
      <summary>
            Provides data for the Adding and Added events.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.AddEventArgs.#ctor(System.Object)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="o">The persistent object.</param>
    </member>
    <member name="T:Telerik.OpenAccess.RemoveEventArgs">
      <summary>
            Provides data for the Removing and Removed events.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.RemoveEventArgs.#ctor(System.Object)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="o">The persistent object.</param>
    </member>
    <member name="T:Telerik.OpenAccess.RefreshEventArgs">
      <summary>
            Provides data for the Refreshing and Refreshed events.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.RefreshEventArgs.#ctor(System.Object)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="o">The persistent object.</param>
    </member>
    <member name="T:Telerik.OpenAccess.ChangeEventArgs">
      <summary>
            Provides data for the Changing and Changed events.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ChangeEventArgs.#ctor(System.Object,System.String,System.Object,System.Object,System.Boolean)">
      <summary>
            Constructs a new instance.
            </summary>
      <param name="pc">The persistent object.</param>
      <param name="fld">The field name or an invalid field name when a change
            event occurs for an internal field (like hidden inverse reference).</param>
      <param name="newV">The new value of the field.</param>
      <param name="oldV">The old value of the field.</param>
      <param name="was">True if the object was dirty before.</param>
    </member>
    <member name="P:Telerik.OpenAccess.ChangeEventArgs.FieldName">
      <summary>
            Get the name of the changed field.
            </summary>
      <value>The name of the field or an invalid field name.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ChangeEventArgs.OldValue">
      <summary>
            Gets the old value of the changing/changed field.
            </summary>
      <value>Old value of the field.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ChangeEventArgs.NewValue">
      <summary>
            Gets the new value of the changing/changed field.
            </summary>
      <value>New value of the field.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ChangeEventArgs.WasDirty">
      <summary>
            Indicates whether the persistent object was marked as dirty before.
            </summary>
      <value>
        <c>True</c> when the instance was marked as dirty before.</value>
    </member>
    <member name="T:Telerik.OpenAccess.LockMode">
      <summary>
            Specification of a pessimistic lock.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.LockMode.READ">
      <summary>
            Locks for read access. This is a shared lock, it conflicts with  
            exclusive locks of other transactions.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.LockMode.WRITE">
      <summary>
            Locks for write access. This is an exclusive lock, it conflicts 
            with any locks of other transactions. It also inhibits
            write or delete operations of other transactions.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.LockMode.DELETE">
      <summary>
            deprecated; behaves identical like WRITE
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ITransaction">
      <summary>
            Database transaction interface.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Begin">
      <summary>
            Begins a new transaction. 
            If there is another transaction already running an exception will be thrown.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Concurrency property is wrong.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Associated IObjectScope object was disposed.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            Using System.Transactions prohibits this method.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Commit">
      <summary>
            Commits the transaction on the current nesting level. 
            In case of exceptions, the transaction is implicitly rolled back.
            </summary>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DuplicateKeyException">
            When an unique index is violated.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.DataStoreException">
            When there is a insufficient disk
            space condition or a disk writing failure.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
            When there is an access rights
            violation.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When a concurrency control conflict occured.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            Using System.Transactions prohibits this method.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Rollback">
      <summary>
            Rolls back this transaction on the current nesting level.
            </summary>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            Using System.Transactions prohibits this method.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Flush">
      <summary>
            Flush all dirty and new instances to the database and evict all
            instances from the local cache.
            </summary>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.
            </exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">
            Transaction is not at level 1.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Lock(System.Object,Telerik.OpenAccess.LockMode)">
      <summary>
            Sets a pessimistic lock on the specified object or collection
            elements. Might throw a LockNotGrantedException.
            </summary>
      <param name="targetObject">The persistent object to be locked or an
            ICollection containing persistent objects to be locked.
            </param>
      <param name="mode">The lock to be applied.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
            When the specified lock could not be obtained.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException">
            Transaction was not started before.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.GetDirtyObjects``1">
      <summary>
            Returns all objects of the specified type which have been modified in the 
            transaction. 
            </summary>
      <value>An instance of System.Colections.Generic.IList<typeparam name="T">The type of the objects to be returned.</typeparam> containing all
            updated, deleted and newly inserted objects of the specified type.</value>
    </member>
    <member name="M:Telerik.OpenAccess.ITransaction.Objects``1(Telerik.OpenAccess.ObjectState)">
      <summary>
            Returns a read-only snapshot view of all objects of the specified type and state.
            </summary>
      <returns>
            A read-only snapshot view of all objects of the specified type in the requested state.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">When an attempt is made to obtain all
            clean and hollow objects when this is not possible.</exception>
      <param name="state">The state of the objects to be returned.</param>
      <typeparam name="T">The type of the objects to be returned.</typeparam>
    </member>
    <member name="P:Telerik.OpenAccess.ITransaction.IsActive">
      <summary>
            Indicates whether the transaction is currently active, i.e., the 
            transaction has
            been begun but not yet been committed or rolled back.
            </summary>
      <value>
        <c>true</c> if transaction is running, <c>false</c>, 
            if transaction is not running</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransaction.Level">
      <summary>
            Gets the current nesting level of the transaction. 
            </summary>
      <value>Current transaction level if transaction is active or
            <c>0</c> if transaction is inactive.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransaction.IsDirty">
      <summary>
            Indicates whether modifications (updates, deletes, inserts)
            have been made in the transaction.
            </summary>
      <value>
        <c>true</c>, if modifications have been made.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransaction.DirtyObjects">
      <summary>
            Returns all objects which have been modified in the 
            transaction. 
            </summary>
      <value>An instance of System.Colections.IList containing all
            updated, deleted and newly inserted objects.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransaction.IsManaged">
      <summary>
            Indicates whether the transaction is managed.
            </summary>
      <value>
        <c>true</c> if the transaction is managed; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Telerik.OpenAccess.ITransactionProperties">
      <summary>
            Controls the properties of a database transaction. 
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.RetainValues">
      <summary>
            Controls whether persistent objects retain their values after 
            commit of the transaction and if read access is allowed. 
            Default is true.
            </summary>
      <value>Default is <c>true</c>.</value>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.RestoreValues">
      <summary>
            Controls whether the values of persistent objects are restored
            to their original values when the transaction 
            (or one particular nesting level) is rolled back. 
            Default is false.
            </summary>
      <value>Default is <c>false</c>.</value>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.Concurrency">
      <summary>
            Controls the concurrency of the transaction. Default is 
            TransactionMode.OPTIMISTIC_NO_LOST_UPDATES.
            </summary>
      <value>Default is <c>TransactionMode.OPTIMISTIC_NO_LOST_UPDATES</c>.</value>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.RefreshReadObjectsInNewTransaction">
      <summary>
            Determines, whether objects that were read (but not modified)
            in a previous transaction are refreshed upon the first access
            in a subsequent transaction. Default is True; use with care!
            </summary>
      <value>Default is <c>true</c>.</value>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionException">
            Transaction is active.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.AutomaticBegin">
      <summary>
            Determines, whether a transaction is always active (automatically started).
            </summary>
      <value>The default is <c>false</c>.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.FailFast">
      <summary>
            Determines, whether a transaction commit or flush should fail on the first failure.
            </summary>
      <value>The default is <c>true</c>.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ITransactionProperties.ReadAfterDelete">
      <summary>
            Controls whether the values of persistent objects are accessible
            when the object is marked for deletion. 
            Default is false.
            </summary>
      <value>Default is <c>false</c>.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.PersistentMetaData">
      <summary>
             Metadata of all persistent classes
             </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Metadata.PersistentMetaData.typeDescriptors">
      <summary>
            Descriptor cache
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.#ctor">
      <summary>
            For internal usage only
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetPersistentTypeNames">
      <summary>
            Returns all names of the persistent classes.
            </summary>
      <returns>
            Array with the names as known by the OpenAccess runtime.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetTypeDescriptor(System.Type,System.Object)">
      <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
      <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
      <param name="instance">An instance of the type; can be null.</param>
      <returns>A <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor" /> that can provide extended metadata for the type -or- null if no such persistent type is known.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetExtendedTypeDescriptor(System.Object)">
      <summary>
            Gets an extended custom type descriptor for the given object.
            </summary>
      <param name="instance">The object for which to get the extended type descriptor.</param>
      <returns>A <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor" /> that can provide extended metadata for the type -or- null if no such persistent type is known.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetPersistentTypeDescriptor(System.Type)">
      <summary>
            Returns the persistent class descriptor for a specific type.
            </summary>
      <param name="type">The persistent type.</param>
      <returns>A <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor" /> that can provide extended metadata for the type -or- null if no such persistent type is known.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetPersistentTypeDescriptor(System.String)">
      <summary>
            Returns the persistent class descriptor for a specific type.
            </summary>
      <param name="typeName">The full name of the persistent type without assembly specification, e.g. MyCompany.BigProject.FooBar</param>
      <returns>A <see cref="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor" /> that can provide extended metadata for the type -or- null if no such persistent type is known.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetTypeDescriptorImpl(System.Type,System.String)">
      <summary>
            Obtains a type descriptor
            </summary>
      <param name="typeName">Must be given</param>
      <param name="type">Can be null</param>
      <returns>An IPersistentTypeDescriptor for a speciffic persistent type</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetTypeNamesImpl">
      <summary>
            Gets all persistent type names
            </summary>
      <returns>All type names, unsorted</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.PersistentMetaData.GetApplicationIdentityFields(System.Type)">
      <summary>
            Obtains the list of fields that are used for the identity of a persistent type.
            </summary>
      <param name="type">The persistent type.</param>
      <returns>Read-only list of fields or <c>null</c> if the type does not use application identity.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor">
      <summary>
            Describes an OpenAccess persistent type
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.IsArtificialField(System.ComponentModel.PropertyDescriptor)">
      <summary>
            Indicates whether the given property descriptor describes an artificial field.
            </summary>
      <param name="descriptor">The property descriptor to test</param>
      <returns>
        <c>True</c> if the descriptor is for an artifical fiels.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.GetMappedColumn(System.ComponentModel.PropertyDescriptor)">
      <summary>
            Retrieves the description of the column(s) that persistent field maps to.
            </summary>
      <param name="field">The field to get the mapped columns for.</param>
      <returns>Description of the mapped column(s) or <c>null</c> for inversely mapped fields.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.CreateInstance(System.Object)">
      <summary>
            Creates a new instance and optionally sets the key value when using application identity with a single field.
            </summary>
      <param name="singleFieldIdentityKey">Key value or <c>null</c> when no key should be set (internal identity, multi field application identity).</param>
      <returns>Newly created instance that is not yet added to a scope.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.PersistentIdentity">
      <summary>
            Returns a property descriptor for the identity of a persistence capable instance.
            </summary>
      <value>Property descriptor</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.PersistentVersion">
      <summary>
            Returns a property descriptor for the version of a persistence capable instance.
            </summary>
      <value>Property descriptor or <c>null</c> when no single column provides concurrency control information</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.DiscriminatorColumn">
      <summary>
            Returns a column descriptor for the discriminator column if there is one.
            </summary>
      <value>Column descriptor or <c>null</c> when no discriminator column is used.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.HasArtificialFields">
      <summary>
            Indicates whether the described type has artificial fields.
            </summary>
      <value>
        <c>True</c> if the type contains an artificial field.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.IdentityFields">
      <summary>
            Returns a list of names for the application identity fields.
            </summary>
      <value>
            List of names or <c>null</c> if no application identity is used.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.DiscriminatorValue">
      <summary>Returns the discriminator column value.</summary>
      <value>Datastore descriminator value as string.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.ClassId">
      <summary>Returns the class id.</summary>
      <value>The class id as int.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.BaseType">
      <summary> Returns the persistent base type.</summary>
      <value>The persistent base type or null.</value>
    </member>
    <member name="P:Telerik.OpenAccess.Metadata.IPersistentTypeDescriptor.DescribedType">
      <summary>Returns the type that is described by this descriptor.</summary>
      <value>Type instance or <c>null</c></value>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer">
      <summary>
        <para>
             Implementation of a container for networks of persistent 
             objects which are disconnected from a database. The 
             ObjectContainer
             implements change tracking and can be used later to reapply
             the offline changes to a database.
            </para>
      </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.#ctor">
      <summary>
            Constructs an empty ObjectContainer.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Add(System.Object)">
      <summary>
            Inserts an object of a persistence-capable class into 
            this ObjectContainer.
            </summary>
      <param name="obj">The persistence capable object to be added to 
             the ObjectContainer. It can also be an IEnumerable of objects to add.</param>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="obj" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
      <exception cref="T:System.ArgumentNullException">When 
             <paramref name="obj" /> is <c>null</c>.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
             When this instance is set to read-only.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Remove(System.Object)">
      <summary>
            Marks a persistent object as deleted. 
            </summary>
      <param name="persistent">The object to be removed from 
             the ObjectContainer. It can also be an IEnumerable of objects to remove.
             </param>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistent" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
             When this instance is set to read-only.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.MakeDirty(System.Object,System.String)">
      <summary>
            Marks the field of a persistent object explicitly as dirty. 
            Must be called before modifications occur.
            </summary>
      <param name="persistentObject">The persistent object to be 
            marked as dirty. It can also be an IEnumerable of objects to mark as dirty.</param>
      <param name="fieldName">The field of the persistent object to be 
            marked as dirty.</param>
      <exception cref="T:System.ArgumentException">
            When <paramref name="persistentObject" /> is not contained in this
            ObjectContainer.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            When this instance is set to read-only.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.IsDirty(System.Object)">
      <summary>
            Checks if a persistent object is in the 'DIRTY' state.
            </summary>
      <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
      <returns>Value <c>true</c> if object has been modified or has been 
             marked dirty explicitly; otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.IsDirty(System.Object,System.String)">
      <summary>
            Checks if a field of a persistent object is in the 'DIRTY' state.
            </summary>
      <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
      <param name="fieldName">The name of the field to be checked.</param>
      <returns>Value <c>true</c> if field has been modified or has been 
             marked dirty explicitly; otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.IsRemoved(System.Object)">
      <summary>
            Checks if a persistent object is in the 'DELETED' state.
            </summary>
      <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
      <returns>Value <c>true</c> if this object has been removed; 
             otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.IsNew(System.Object)">
      <summary>
            Checks if a persistent object is in the 'NEW' state.
            </summary>
      <param name="persistentObject">The object to be checked; 
            must be managed by this
            ObjectContainer.</param>
      <returns>Value <c>true</c> if the object has been inserted; 
             otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.IsHollow(System.Object)">
      <summary>
             Checks if a persistent object is in the 'DETACHED' state 
             and therefore its values cannot be read (is hollow).
             </summary>
      <param name="persistentObject">The object to checked; 
             must be managed by this
             ObjectContainer.</param>
      <returns>Value <c>true</c> if the object is actually a detached
             hollow object whose values cannot be read.</returns>
      <exception cref="T:System.ArgumentException">
             When <paramref name="persistentObject" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="persistentObject" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetObjectId(System.Object)">
      <summary>
            Returns the database object ID for the passed 
            persistent object.
            </summary>
      <param name="persistentObject">The persistent object of which the 
            database object ID is requested.</param>
      <returns>Database identity object.</returns>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotEnhancedException">
        <paramref name="persistentObject" /> is not 
            persistence capable (not enhanced or class is not declared
            [Persistent]
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetObjectById(Telerik.OpenAccess.IObjectId)">
      <summary>
            Returns the persistent object with the given database object ID.
            </summary>
      <param name="oid">The database object identity object.</param>
      <returns>Persistent object having the passed object ID from 
            this ObjectContainer 
            or <c>null</c> if the object is not available from this
            ObjectContainer.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetObjectById``1(Telerik.OpenAccess.IObjectId)">
      <summary>
            Returns the persistent object of the specified type with the given database object ID.
            </summary>
      <param name="objectId">The database object identity object.</param>
      <returns>Persistent object having the passed object ID from 
            this ObjectContainer 
            or <c>null</c> if the object is not available from this
            ObjectContainer.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Evict(System.Object)">
      <summary>
            Marks a persistent object as no longer needed in the object container.
            </summary>
      <param name="persistent">The instance to evict from the container. It can also be an IEnumerable of objects to evict.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeObjectId(System.Object,Telerik.OpenAccess.IObjectId)">
      <summary>
            Changes the id of a persistent object to another database object ID. 
            </summary>
      <param name="persistentObject">Object contained 
            in this writable ObjectContainer 
            whose OID is to be changed.</param>
      <param name="newIdObj">The new database object ID.</param>
      <exception cref="T:System.ArgumentException">
            When <paramref name="persistentObject" /> is not contained in this
            ObjectContainer.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            When this instance is set to read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
            When <paramref name="newIdObj" /> is not given.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            When <paramref name="newIdObj" /> is not valid.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException">
            When the state of <paramref name="persistentObject" /> 
            is not <c>NEW</c>.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.ToString">
      <summary>
            Returns a string describing all contained objects for 
            debugging purposes.
            </summary>
      <returns>Returns a string with a description of the state of 
            all contained objects.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetListNames">
      <summary>
            Returns an enumerator for all known list names.
            </summary>
      <returns>New enumerator instance of string values.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.NamedList(System.String)">
      <summary>
            Get an IList that is registered by the id 'name'.
            </summary>
      <param name="listName">An name of a registered IList</param>
      <returns>An instance of IList or <c>null</c>.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.NamedList(System.String,System.Boolean)">
      <summary>
            Get an IList that is registered by the id 'name'.
            </summary>
      <param name="listName">An name of a registered IList</param>
      <param name="implicitCreate">If <c>true</c>, the list will be created if necessary.</param>
      <returns>An instance of IList or <c>null</c>.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.NamedList``1(System.String)">
      <summary>
            Get an IList of the specified type that is registered by the id 'name'.
            </summary>
      <param name="listName">An name of a registered IList</param>
      <typeparam name="T">The type of the objects to be returned.</typeparam>
      <returns>An instance of IList or <c>null</c>.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.NamedList``1(System.String,System.Boolean)">
      <summary>
            Get an IList of the specified type that is registered by the id 'name'.
            </summary>
      <param name="listName">An name of a registered IList</param>
      <param name="implicitCreate">If <c>true</c>, the list will be created if necessary.</param>
      <typeparam name="T">The type of the objects to be returned.</typeparam>
      <returns>An instance of IList or <c>null</c>.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CopyFrom(Telerik.OpenAccess.IObjectScope,System.String,System.Object,Telerik.OpenAccess.IObjectCollector)">
      <summary>
            Creates a copy of each specified persistent root object and adds it to the 
            ObjectContainer.
            </summary>
      <param name="objectScope">The source IObjectScope to copy 
            from.</param>
      <param name="listName">The name of the list under which the added
            objects should be retrievable.
            </param>
      <param name="objectToBeAdded">Persistent object that is to be added to the
            container. Can also be of type IEnumerable or IEnumerator in which case all
            contained objects are added to the container.
            <para>
            In the case where a persistent capable class also implements IEnumerable or
            IEnumerator, the object network for only this class' object is calculated.
            The contained objects are not enumerated.
            </para></param>
      <param name="objectCollector">An implementation of the IObjectCollector interface
            used to calculate the object network for each of the root objects.
            <para>This parameter can be null, in which case only the root objects are added
            to the contatiner.</para></param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException">
            When the source scope object is not accessible.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException">
            When the source scope transaction mode is pessimistic and the
            object cannot be locked.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.NoSuchObjectException">
            When the source scope object was referenced but is deleted in the
            database.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify)">
      <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a default merge algorithm which failes
            when a conflict is detected.
            </summary>
      <param name="objectScope">The target IObjectScope to 
            copy to.</param>
      <param name="verifyMode">Specifies which verifiable objects 
            are verified and locked.
            </param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When the changes stored in the container cannot be applied to 
            the target object scope because the database content was changed
            concurrently.
            </exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException"> When
            an object could not be accessed from the database.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CommitChanges(Telerik.OpenAccess.ObjectContainer.ChangeSet,Telerik.OpenAccess.ObjectContainer.Verify,Telerik.OpenAccess.IObjectScope,System.Boolean,System.Boolean)">
      <summary>
            Commits the changes of an ObjectContainer into a database.
            </summary>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When changes have been made in the database concurrently.</exception>
      <param name="changes">The extracted changes of an ObjectContainer.</param>
      <param name="verifyMode">The verification mode to use.</param>
      <param name="targetScope">The target scope with inactive transaction.</param>
      <param name="allFields">Controls whether all fields should be overwritten 
            (usually <c>true</c>).</param>
      <param name="generateUpdateChanges">If <c>true</c>, the return value
            will be calculated; otherwise null is returned.</param>
      <returns>When generateUpdateChanges is <c>true</c>, a change set
            is generated; otherwise <c>null</c>.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CopyToWithUpdate(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify,System.Boolean)">
      <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a default merge algorithm which failes
            when a conflict is detected.
            </summary>
      <param name="allFields">true if all fields should be updated</param>
      <param name="verifyMode">The verification mode to use.</param>
      <param name="targetScope">The target scope with inactive transaction.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify,System.Boolean)">
      <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a default merge algorithm which failes
            when a conflict is detected. Can protect attributed object fields
            from being overwritten with the ObjectContainer content.
            </summary>
      <param name="objectScope">The target IObjectScope to copy 
            to.</param>
      <param name="verifyMode">Specifies which verifiable objects 
            are verified and locked.</param>
      <param name="allFields">Specifies if all object fields are 
            to be copied; 
             if <c>false</c> copies only fields not marked with the 
            <see cref="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite" /> attribute.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When the changes stored in the container cannot be applied to 
            the target object scope because the database content was changed
            concurrently.
            </exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException"> When
            an object could not be accessed from the database.
            </exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.CopyTo(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.ObjectContainer.Verify,Telerik.OpenAccess.RT.ContainerMerger,System.Collections.ArrayList)">
      <summary>
            Applies the changes contained in this ObjectContainer to the 
            given IObjectScope using a custom ObjectMerger object.
            </summary>
      <param name="objectScope">The target IObjectScope to copy 
            to.</param>
      <param name="verifyMode">Specifies which objects are verified 
            and locked.</param>
      <param name="merger">Specifies how conflicts are resolved and 
            how objects are copied. If 
            <c>null</c> is passed, only verification takes place and the target
            IObjectScope object is not changed.
            </param>
      <param name="InternalChgSet">When given, receives all changes.</param>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When the changes stored in the container cannot be applied to 
            the target object scope because the database content was changed
            concurrently.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.OptimisticVerificationException">
            When a conflict 
            between container content and database content could not
            be resolved.</exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.LockNotGrantedException"> When
            an object could not be locked in the target scope.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.ObjectNotAccessibleException"> When
            an object could not be accessed in the target scope.
            </exception>
      <exception cref="T:Telerik.OpenAccess.Exceptions.TransactionNotActiveException"> When
            an object could not be accessed in the target scope.
            </exception>
      <returns>Indicator whether intermediate commit is required or not.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Contains(System.Object)">
      <summary>
            Checks if a persistent object is contained by this ObjectContainer.
            </summary>
      <param name="obj">The object to test for.</param>
      <returns>Value <c>true</c> if the object is known; 
            <c>false</c> otherwise</returns>
      <exception cref="T:System.InvalidCastException">When 
            <paramref name="obj" /> is not an instance of a
            persistence-capable class (not marked with the [Persistent]
            attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Evict(Telerik.OpenAccess.IObjectId)">
      <summary>
            Evicts a contained clean/proxy object from the container.
            </summary>
      <param name="oid">The database object identity object.</param>
      <exception cref="T:System.ArgumentException">
            When the oid instance is not given.</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetPersistentVersion(System.Object)">
      <summary>
            Returns the persistent version information for persistent objects. 
            </summary>
      <returns>Version information of the object.</returns>
      <param name="verifiable">The object to verify.</param>
      <exception cref="T:System.ArgumentException">
             When <paramref name="verifiable" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="verifiable" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.SetPersistentVersion(System.Object,System.Object)">
      <summary>
            Sets the persistent version stamp for persistent objects of 
            verifiable classes. 
            </summary>
      <exception cref="T:System.ArgumentException">
             Class of <paramref name="verifiable" /> was not marked 
             as <c>Verifiable</c> during enhancement.
             </exception>
      <param name="verifiable">The verifiable object.</param>
      <param name="version">The new version information.</param>
      <exception cref="T:System.ArgumentException">
             When <paramref name="verifiable" /> is not contained in this
             ObjectContainer.</exception>
      <exception cref="T:System.InvalidCastException">When 
             <paramref name="verifiable" /> is not an instance of a
             persistence-capable class (not marked with the [Persistent]
             attribute or not enhanced).</exception>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Extent(System.Type)">
      <summary>
            Provides a read-only snapshot view of the content of this ObjectContainer filtered
            on the type specified.
            </summary>
      <param name="type">The type filter or <c>null</c>.</param>
      <returns>
            Read-only snapshot view of the content of the ObjectContainer
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Extent``1">
      <summary>
            Provides a read-only snapshot view of the content of this ObjectContainer filtered
            on the type specified.
            </summary>
      <typeparam name="T">The type of the objects to be returned.</typeparam>
      <returns>
            Read-only snapshot view of the content of the ObjectContainer
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetEnumerator">
      <summary>
            Returns an enumerator that can enumerate all objects directly reachable from
            the named sets not marked as to be deleted.
            </summary>
      <returns>New enumerator object.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetEnumerator(System.Type)">
      <summary>
            Returns an enumerator that can
            enumerate all objects directly reachable from the named sets not
            marked as to be deleted and of a given class.
            </summary>
      <param name="scope">The class used for scoping.</param>
      <returns>New enumerator object.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetAllEnumerator">
      <summary>
            Returns an enumerator that can iterate over all contained objects.
            </summary>
      <returns>New enumerator object.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetAllEnumerator(System.Type)">
      <summary>
            Returns an enumerator that can iterate over all contained 
            objects of a given class.
            </summary>
      <param name="scope">The class used for scoping.</param>
      <returns>New enumerator object.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetContent">
      <summary>
            Creates a new change set with the current content.
            </summary>
      <returns>
            A serializable object with the current content.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.GetChanges(Telerik.OpenAccess.ObjectContainer.Verify)">
      <summary>
            Creates a new change set with the actual modifications.
            </summary>
      <returns>
            A serializable object containing the current modífications.
            </returns>
      <param name="verificationMode">Controls, which objects must be present
            in the result (all or changed).</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet)">
      <summary>
            Updates this instance with the information from a change set.
            </summary>
      <param name="changes">The changes to be applied.</param>
      <returns>An array of all IObjectId instances representing objects that are added, refreshed or removed from the container.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.Apply(Telerik.OpenAccess.ObjectContainer.ChangeSet,System.Boolean)">
      <summary>
            Updates this instance with the information from a change set.
            </summary>
      <param name="changes">The changes to be applied.</param>
      <param name="force">Force mode</param>
      <returns>An array of all IObjectId instances representing objects that are added, refreshed or removed from the container.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
            Custom deserialization method implemenation.
            </summary>
      <param name="sender">The deserialization event sender.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom serialization method implemenation.
            </summary>
      <param name="sinfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Custom deserialization method implemenation.
            </summary>
      <param name="sinfo">The SerializationInfo object.</param>
      <param name="context">The StreamingContext object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.MarkContentAsNew">
      <summary>
            Marks the complete container content as new.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.MarkContentAsClean">
      <summary>
            Marks the complete container content as clean.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.Transaction">
      <summary>
            Gets the associated transaction instance.
            </summary>
      <value>The associated transaction instance.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.DBConnection">
      <summary>
            Controls the database connection.
            </summary>
      <value>An instance of IDBConnection.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.AutoSync">
      <summary>
            Controls the transactional behavior of the database connection.
            </summary>
      <value>An instance of IDBConnection.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.IsModified">
      <summary>
            Indicates whether the ObjectContainer was modified.
            </summary>
      <value>
        <c>true</c> if the ObjectContainer was 
            modified, <c>false</c> otherwise.</value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.IsReadOnly">
      <summary>
            Controls the modification behavior of the ObjectContainer.
            </summary>
      <value>
            If the value is <c>true</c>, modifcations to the container are 
            not allowed. Attempting to modify a container set to 
            read-only results in a 
            <see cref="T:Telerik.OpenAccess.Exceptions.InvalidOperationException" />.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.Count">
      <summary>
            Gets the number of persistent objects
            in the ObjectContainer including proxy objects and objects
            marked as to be deleted.
            </summary>
      <value>The number of persistent objects.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.Tracking">
      <summary>Gets the associated change tracking interface.</summary>
      <value>The associated tracking instance.</value>
    </member>
    <member name="E:Telerik.OpenAccess.ObjectContainer.ResolveProxy">
      <summary>
            Occurs when the user attempts to access the content of a proxy (hollow) object.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.ChangeSet">
      <summary>
            Serializable change set of an ObjectContainer.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.ChangeSet.format">
      <summary>
            Compatibility information.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.ChangeSet.changes">
      <summary>
            The binary encoded changes in byte form.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeSet.#ctor">
      <summary>
            Constructs a new change set.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeSet.#ctor(System.Object)">
      <summary>
            Constructs a new change set.
            </summary>
      <param name="x">The source object, usually a WSDL generated instance OR <c>null</c>.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainer.ChangeSet.CopyTo(System.Object)">
      <summary>
            Copies the data of this instance to another.
            </summary>
      <param name="target">Copy target instance.</param>
      <returns>The target instance</returns>
      <exception cref="T:System.Exception">Wrong type of target.</exception>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.ObjectMergerProtectOverwrite">
      <summary>
            Protects members of persistence capable classes from being 
            overwritten during ObjectContainer.CopyTo() .
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.Verify">
      <summary>
            Specification of the conflict detection and resolution for importing 
            objects into an object scope.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.All">
      <summary>
            All objects from the object source context will be verified 
            (except new objets).
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.Changed">
      <summary>
            Only changed/deleted objects from the object source context will
             be verified.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.None">
      <summary>
            No object from the object source context will be verified.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.Verify.Lock">
      <summary>
            All verified objects from the source context will also get locked.
            The lock mode used depends on action required (read or write/delete).
            The lock will be granted even if the optimistic verification 
            fails (there was
            a concurrent change to the object). 
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs">
      <summary>
            Provides data for an object resolution event.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.ProxyIdentity">
      <summary>
            Gets the database identities of the proxy instances which are requested to be resolved.
            </summary>
      <value>
            The database object identities for the instances to be resolved.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.FieldName">
      <summary>
            Gets the name of the field which was accessed for Read or Write.
            </summary>
      <value>
            The name of the accessed field when read or write access is performed; null otherwise.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Operation">
      <summary>
            Indicates the attempted operation.
            </summary>
      <value>
            Indication of the attempted operation.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action">
      <summary>
            Specification about an attempted operation on proxy instances.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action.Read">
      <summary>
            A read access was attempted.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action.Write">
      <summary>
            A write access was attempted.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventArgs.Action.Delete">
      <summary>
            A delete access was attempted.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectContainer.ResolveProxyEventHandler">
      <summary>
            Represents the method that will handle the ResolveProxy event.
            </summary>
      <param name="sender">The ObjectContainer instance in which the proxy is managed.</param>
      <param name="e">The ResolveProxyEventArgs instance containing the data for the event.</param>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainerEnumerator.MoveNext">
      <summary>
            Move enumerator to next object.
            </summary>
      <returns>true, if there is a next element; otherwise false</returns>
    </member>
    <member name="M:Telerik.OpenAccess.ObjectContainerEnumerator.Reset">
      <summary>
            Moves cursor to the position before the first element.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.ObjectContainerEnumerator.Current">
      <summary>
            Returns the current element of this enumerator.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.ObjectState">
      <summary>
            Specifies the state of an object.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectState.Clean">
      <summary>
            Object was not modified
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectState.New">
      <summary>
            Object was marked as to be inserted
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectState.Dirty">
      <summary>
            Object was modified and needs to be updated
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectState.Removed">
      <summary>
            Object was marked as to be removed
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.ObjectState.Hollow">
      <summary>
            Object was not loaded yet; ObjectContainer: fields cannot be accessed; ObjectScope: fields are lazy loaded
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.OIDHelper">
      <summary>
            Helper class for database object identity processing.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.OIDHelper.FromString(System.String)">
      <summary>
            Creates a new database object identifier from an externalized form.
            </summary>
      <exception cref="T:System.ArgumentNullException">No external string representation given.</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">The external string representation could not be parsed.</exception>
      <param name="externalizedForm">String representation of a database object id.</param>
      <returns>New IObjectId instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OIDHelper.ToString(Telerik.OpenAccess.IObjectId)">
      <summary>
            Creates the externalized representation of a database object identity.
            </summary>
      <exception cref="T:System.ArgumentNullException">No oid instance given.</exception>
      <param name="oid">Database object identifier.</param>
      <returns>Externalized form for the <paramref name="oid" />.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.OIDHelper.ParseObjectId(System.Type,System.String)">
      <summary>
             Creates database object identifiers by parsing a string representation for a given type.
             </summary>
      <param name="oidstr">
             Database object ID in string form.
             </param>
      <param name="t">
             The type of the object with the specified id. For internal identity,
             null can be specified.
             </param>
      <returns>
             New database object identifier.
             </returns>
    </member>
    <member name="M:Telerik.OpenAccess.OIDHelper.GetObjectId(System.Object)">
      <summary>
             Returns the object identity for the passed object.
             </summary>
      <returns>New database object identifier or <c>null</c> when internal identity is used and
             the persistence capable instance is not in managing context.</returns>
      <param name="persistenceCapable">The enhanced object.</param>
      <exception cref="T:System.ArgumentNullException">No instance given.</exception>
      <exception cref="T:Telerik.OpenAccess.OpenAccessException">No persistence capable instance given.</exception>
    </member>
    <member name="T:Telerik.OpenAccess.Query`1">
      <summary>
            Class for executing queries.
            </summary>
      <typeparam name="T">Return type of the executed query.
             </typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.#ctor(Telerik.OpenAccess.IObjectScope,Telerik.OpenAccess.IQuery)">
      <summary>
            For internal use only.
            </summary>
      <param name="scope">The <see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see> object.</param>
      <param name="query">The <see cref="T:Telerik.OpenAccess.IQuery" />IQuery object.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteBindingList">
      <overloads>Executes the specified query and returns the result.</overloads>
      <summary>
            Executes the specified query and returns the result as 
             QueryResultBindingList&lt;T&gt;.
            This method can only be used for queries without parameters.
            </summary>
      <returns>The result of the query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteBindingList(System.Object[])">
      <overloads>Executes the specified query and returns the result.</overloads>
      <summary>
            Executes the specified query using the paramaters passed
            and returns the result as QueryResultBindingList.
            </summary>
      <param name="parameters">The query parameters to use.</param>
      <returns>The result of the
             query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteList">
      <overloads>Executes the specified query and returns the result.</overloads>
      <summary>
            Executes the specified query and returns the result as 
             QueryResultList&lt;T&gt;.
            This method can only be used for queries without parameters.
            </summary>
      <returns>The result of the query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteList(System.Object[])">
      <overloads>Executes the specified query and returns the result.</overloads>
      <summary>
            Executes the specified query and returns the result as 
             QueryResultList&lt;T&gt;.
            This method can only be used for queries without parameters.
            </summary>
      <param name="parameters">The query parameters to use.</param>
      <returns>The result of the query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteEnumerable">
      <summary>
            Executes the specified query and returns the result.
            This method can only be used for queries without parameters.
            </summary>
      <returns>The result of the query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteEnumerable(System.Object[])">
      <summary>
            Executes the specified query using the paramaters passed
            and returns the result.
            </summary>
      <param name="parameters">The query parameters to use.</param>
      <returns>The result of the
             query execution.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteDirect">
      <summary>
            Executes the specified query and returns no result.
            This method can only be used for queries without parameters.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Query`1.ExecuteDirect(System.Object[])">
      <summary>
            Executes the specified query using the paramaters passed
            and returns no result.
            </summary>
      <param name="parameters">The query parameters to use.</param>
      <returns>The result of the
             query execution.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.IgnoreUncommitted">
      <summary>
            This property determines whether the query execution is allowed 
            to ignore the changes made in the current transaction, e.g. 
            return objects which have been deleted in the current transaction.
            </summary>
      <value>True (default), if uncommitted changes can be ignored.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.Skip">
      <summary>
            Controls the amount of data which is to be skipped before results are fetched.
            </summary>
      <value>Amount of data to skip. (Default:0)</value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.MaxResultCount">
      <summary>
            Limits the maximum number of instances to return.
            </summary>
      <value>The maximum number of instances to return by query execution.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.ParallelFetch">
      <summary>
            Controls whether parallel result fetching is allowed.
            </summary>
      <value>
        <c>True</c> when parallel result fetching is allowed, <c>false</c> (default) otherwise.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.Prefetch">
      <summary>
            Applies prefetch settings to the uncompiled query.
            </summary>
      <value>The prefetch value to be used.
            </value>
      <returns>The query with applied prefetch settings.</returns>
      <exception cref="T:System.InvalidOperationException">Query result has
            already been calculated.</exception>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.BackendQuery">
      <summary>
            Gets the generated backend query expression (e.g. SQL).
            </summary>
      <value>The native query expression.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.Expression">
      <summary>
            Provides the query expression from which this query was created.
            </summary>
      <value>The query expression.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.Query`1.Context">
      <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
      <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.QueryResultBindingList`1">
      <summary>
            Typed result of a database query execution.
            </summary>
      <typeparam name="T">The result type of the query.</typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.AddNewCore">
      <summary>
            Adds a new item to the end of the collection.
            </summary>
      <returns>The item that was added to the collection.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.ClearItems">
      <summary>
            Removes all elements from the collection.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.RemoveItem(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.InsertItem(System.Int32,`0)">
      <summary>
            Inserts the specified item in the list at the specified index.
            </summary>
      <param name="index">The zero-based index where the item is to be inserted.</param>
      <param name="item">The item to insert in the list.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.SetItem(System.Int32,`0)">
      <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
      <param name="index">The zero-based index of the item to replace.</param>
      <param name="item">The new value for the item at the specified index. 
            The value can be null for reference types.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
            Sorts the items.
            </summary>
      <param name="property">
            A  <see cref="T:System.ComponentModel.PropertyDescriptor">System.ComponentModel.PropertyDescriptor</see> 
            that specifies the property to sort on.
            </param>
      <param name="direction">
            One of the <see cref="T:System.ComponentModel.ListSortDirection">System.ComponentModel.ListSortDirection</see> values.
            </param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultBindingList`1.RemoveSortCore">
      <summary>
            Removes any sort applied.
            </summary>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.DeleteBehavior">
      <summary>
            Defines how remove on a list should be handled with regards to the database.
            </summary>
      <value>The value if the list remove operations should delete the database data.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.AddBehavior">
      <summary>
            Defines how add on a list should be handled with regards to the database.
            </summary>
      <value>The value if the list add operations should insert the data into the database.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.SupportsSortingCore">
      <summary>
            Gets a value indicating whether the list supports sorting. This will return true;
            </summary>
      <value>The value indicating whether the list supports sorting.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.IsSortedCore">
      <summary>
            Gets a value indicating whether the list is sorted.
            </summary>
      <value>The value indicating whether the list is sorted.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.SortDirectionCore">
      <summary>
            Gets the direction the list is sorted.
            </summary>
      <value>The direction the list is sorted.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.SortPropertyCore">
      <summary>
            Gets the property descriptor that is used for sorting the list.
            </summary>
      <value>The property descriptor that is used for sorting the list.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultBindingList`1.Context">
      <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
      <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.QueryResultEnumerable`1">
      <summary>
            Result of a database query execution.
            The result has to be disposed. 
            </summary>
      <typeparam name="T">The result type of the query.</typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1">
            System.Collections.Generic.IEnumerator&lt;T&gt;</see> 
            that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator">System.Collections.IEnumerator</see>   
            object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.GetTotalCount">
      <summary>
            Obtains the total number of results in a paging-independend fashion.
            </summary>
      <returns>The total number of results.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultEnumerable`1.ToList">
      <summary>
            Resolves the complete result and adds it to a real List
            </summary>
      <returns>Generic List with the complete fetched result.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultEnumerable`1.Context">
      <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
      <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultEnumerable`1.OutParameter">
      <summary>
            Returns a dictionary containing the stored procedure out parameter values.
            </summary>
      <value>
            Dictionary of out parameter values by name.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.QueryResultList`1">
      <summary>
            Result of a database query execution.
            </summary>
      <typeparam name="T">The result type of the query.</typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in the 
            list.
            </summary>
      <param name="item">The object to locate in the 
            <see cref="T:System.Collections.Generic.IList`1">System.Collections.Generic.IList&lt;T&gt;</see></param>
      <returns>The index of item if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item at the specified index.
            </summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Add(`0)">
      <summary>
            Adds an item to the List.
            </summary>
      <param name="item">The object to add to the List.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Clear">
      <summary>
            Removes all items from the List.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Contains(`0)">
      <summary>
             Determines whether the List contains a specific value.
            </summary>
      <param name="item">The object to locate in the List.</param>
      <returns>true if item is found in the List otherwise, false.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the elements of the List to an 
            System.Array, starting at a particular System.Array index.
            </summary>
      <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from List. The System.Array must have zero-based indexing.
            </param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from the List.
            </summary>
      <param name="item">
            The object to remove from the List.
            </param>
      <returns>
            true if item was successfully removed from the List
            otherwise, false. This method also returns false if item is not found in
            the original List.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1">
            System.Collections.Generic.IEnumerator&lt;T&gt;</see> 
            that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator">System.Collections.IEnumerator</see>   
            object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.GetTotalCount">
      <summary>
            Obtains the total number of results in a paging-independend fashion.
            </summary>
      <returns>The total number of results.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Add(System.Object)">
      <summary>
            Adds an item to the list.
            </summary>
      <param name="value">The object to add to the list.</param>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Contains(System.Object)">
      <summary>
            Determines whether the list contains a specific value.
            </summary>
      <param name="value">The object to locate in the list.</param>
      <returns>true if the System.Object is found in the System.Collections.IList; otherwise, false.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.IndexOf(System.Object)">
      <summary>
            Determines the index of a specific item in the list.
            </summary>
      <param name="value">The object to locate in the list.</param>
      <returns>The index of value if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Insert(System.Int32,System.Object)">
      <summary>
            Inserts an item to the list at the specified index.
            </summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The object to insert into the list.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Remove(System.Object)">
      <summary>
            Removes the first occurrence of a specific object from the list.
            </summary>
      <param name="value">The object to remove from the list.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the list to an array, starting at a particular array index.
            </summary>
      <param name="array">
            The one-dimensional array that is the destination of the elements 
            copied from list. The array must have zero-based 
            indexing.
            </param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.QueryResultList`1.ToList">
      <summary>
            Resolves the complete result and adds it to a real List
            </summary>
      <returns>Generic List with the complete fetched result.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.OutParameter">
      <summary>
            Returns a dictionary containing the stored procedure out parameter values.
            </summary>
      <value>
            Dictionary of out parameter values by name.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <value>The element at the specified index.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.Count">
      <summary>
            Gets the number of elements contained in the List.
            </summary>
      <value>The number of elements contained in the List.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.IsReadOnly">
      <summary>
            Gets a value indicating whether the List is read-only.
            </summary>
      <value>Value indicating whether the List is read-only.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.Context">
      <summary>
            Provides the context (IObjectScope) of the query.
            </summary>
      <value>The context (<see cref="T:Telerik.OpenAccess.IObjectScope">IObjectScope</see>)
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.IsFixedSize">
      <summary>
            Gets a value indicating whether the list has a fixed size.
            </summary>
      <value>true if list has fixed size; otherwise, false. </value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.System#Collections#IList#Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <value>The element at the specified index.</value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the list 
            is synchronized (thread safe).
            </summary>
      <value>
            true if access to the list is synchronized (thread safe); otherwise, false.
            </value>
    </member>
    <member name="P:Telerik.OpenAccess.QueryResultList`1.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the list.
            </summary>
      <value>
            An object that can be used to synchronize access to the list.
            </value>
    </member>
    <member name="T:Telerik.OpenAccess.TrackedBindingList`1">
      <summary>
            Base implementation of a generic binding list which tracks modifications.
            </summary>
      <typeparam name="T">The type of the elements in the list</typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.#ctor">
      <summary>
            Constructor generating new, empty and tracked BindingList.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Constructor generating new, tracked BindingList over the list given.
            </summary>
      <param name="src">List with existing values</param>
      <exception cref="T:System.ArgumentNullException">src is <c>null</c></exception>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.GetOwner">
      <summary>
            Gets the owner instance of this list.
            </summary>
      <returns>Owner instance or <c>null</c> when no change tracking is performed.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.GetFieldName">
      <summary>
            Gets the field name of the owning instance where this list is referenced.
            </summary>
      <returns>Field name of the owning instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.PostLoad">
      <summary>
            Override this function to get a notification after collection load.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.Equals(System.Object)">
      <summary>
            Compares for content equality including ordering.
            </summary>
      <param name="obj">Another TrackedBindingList instance for type <typeparamref name="T" /></param>
      <returns>True when content and order are equal</returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedBindingList`1.GetHashCode">
      <summary>
            Calculates a hash code for this instance.
            </summary>
      <returns>Hash code</returns>
    </member>
    <member name="T:Telerik.OpenAccess.TrackedList`1">
      <summary>
            Base implementation of a tracked list.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.#ctor">
      <summary>
            Creates a new empty and tracked list.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.#ctor(System.Int32)">
      <summary>
            Creates a new tracked list of the specified size.
            </summary>
      <param name="count">Number of elements to reserve space for.</param>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Creates a new tracked list with the given content.
            </summary>
      <param name="src">List instance to make tracked.</param>
      <exception cref="T:System.ArgumentNullException">src is <c>null</c></exception>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.GetOwner">
      <summary>
            Gets the owner instance of this list.
            </summary>
      <returns>Owner instance or <c>null</c> when no change tracking is performed.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.GetFieldName">
      <summary>
            Gets the field name of the owning instance where this list is referenced.
            </summary>
      <returns>Field name of the owning instance.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.PostLoad">
      <summary>
            Override this function to get a notification after collection load.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.Equals(System.Object)">
      <summary>
            Compares for content equality including ordering.
            </summary>
      <param name="obj">Another TrackedList instance for type <typeparamref name="T" /></param>
      <returns>True when content and order are equal</returns>
    </member>
    <member name="M:Telerik.OpenAccess.TrackedList`1.GetHashCode">
      <summary>
            Calculates a hash code for this instance.
            </summary>
      <returns>Hash code</returns>
    </member>
    <member name="T:Telerik.OpenAccess.TransactionMode">
      <summary>
            Specification of the concurrency control for a transaction.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionMode.OPTIMISTIC_NO_LOST_UPDATES">
      <summary>
            Commit will verify that modified objects have not been
            updated by another transaction meanwhile.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionMode.PESSIMISTIC_EXPLICIT">
      <summary>
            Write locks have to be set explicitely by ITransaction.Lock().
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionMode.PESSIMISTIC_WRITE_LOCK_WHEN_FETCHED">
      <summary>
            Objects are write-locked when fetched from the datastore.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.TransactionProvider">
      <summary>
             Specifies how transactions are provided.
             </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionProvider.OpenAccess">
      <summary>
            Use built-in transactions provided by Telerik.OpenAccess.
            This is the default setting.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionProvider.TransactionScope">
      <summary>
            Use the implicit transactional programming model (TransactionScope).
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionProvider.Explicit">
      <summary>
            Use the explicit transactional programming model.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.TransactionProvider.Automatic">
      <summary>
            Use the actual available transaction.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IFillerMethod">
      <summary>
            Interface for a method to calculates a collection of objects
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.IFillerMethod.Execute(Telerik.OpenAccess.IObjectScope)">
      <summary>
            Method to implement that provides an enumerable of persistent capable objects
            </summary>
      <param name="os">An IObjectScope with a started transaction.</param>
      <returns>IEumerable containing persistent capable objects</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IFillerObjectCollector">
      <summary>
            Interface for a method to determine the referenced object that has to be included
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.IFillerObjectCollector.GetCollector">
      <summary>
            Used to get an IObjectCollector implementation.
            </summary>
      <returns>An IObjectCollector implementation used to calculate reference objects to be 
            included</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Util.FillInstruction">
      <summary>
            Instructions to get a ChangeSet that can be applied to an ObjectContainer.
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstruction.Serialize(Telerik.OpenAccess.Util.FillInstruction)">
      <summary>
            Method to transform in a via ASP.NET transferable format
            </summary>
      <param name="fillInst">Object to serialize.</param>
      <returns>An object containing the serialized data.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstruction.Deserialize(Telerik.OpenAccess.Util.FillInstructionData)">
      <summary>
            Method to transform back from a via ASP.NET transferable format
            </summary>
      <param name="data">Object to deserialize.</param>
      <returns>A FillInstruction with the deserialized data.</returns>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstruction.#ctor(System.String,Telerik.OpenAccess.Util.IFillerMethod,Telerik.OpenAccess.Util.IFillerObjectCollector)">
      <summary>
            Constructs a FillInstruction.
            </summary>
      <param name="aName">A name for the set of resulting root objects.</param>
      <param name="aMethod">A method to get the root objects.</param>
      <param name="aCollector">An interface that provides the method to calculate the 
            referenced objects to include.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstruction.Execute(Telerik.OpenAccess.IObjectScope)">
      <summary>
            Executes the filler method and closure method and calculates a ChangeSet
            with the resulting root objects bound to name.
            </summary>
      <param name="os">An IObjectScope with a started transaction.</param>
      <returns>ChangeSet that can be applied to an ObjectContainer.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Util.FillInstruction.Name">
      <summary>
            Get the name of the method result.
            </summary>
      <value>The name for the result.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Util.FillerMethodOQLQuery">
      <summary>
            IFillerMethod implementation that executes an OQL query
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillerMethodOQLQuery.#ctor(System.String)">
      <summary>
            Contructs a method object
            </summary>
      <param name="query">An OQL query string</param>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillerMethodOQLQuery.Execute(Telerik.OpenAccess.IObjectScope)">
      <summary>
            Execute the OQL query
            </summary>
      <param name="os">An IObjectScope with a started transaction.</param>
      <returns>The query result.</returns>
    </member>
    <member name="P:Telerik.OpenAccess.Util.FillerMethodOQLQuery.Oqlquery">
      <summary>Get the OQL query string.</summary>
      <value>The OQL query string.</value>
    </member>
    <member name="T:Telerik.OpenAccess.Util.FillInstructionData">
      <summary>
            Serializable FillInstruction used for data transfer within ASP.NET Webmethods.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Util.FillInstructionData.format">
      <summary>
            Compatibility information.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Util.FillInstructionData.fillData">
      <summary>
            The binary encoded fill instruction in byte form.
            </summary>
    </member>
    <member name="F:Telerik.OpenAccess.Util.FillInstructionData.reserved">
      <summary>
            Reserved for further use. 
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstructionData.#ctor">
      <summary>Constructor.</summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstructionData.#ctor(System.Object)">
      <summary>
            Constructs an object and copies the corresponding field data of x
            </summary>
      <param name="x">An object of a from WSDL compiler generated FillInstructionData class</param>
    </member>
    <member name="M:Telerik.OpenAccess.Util.FillInstructionData.CopyTo(System.Object)">
      <summary>
            Copies the field data to the corresponding fields of object x.
            </summary>
      <param name="x">An object of a from WSDL compiler generated FillInstructionData class</param>
      <returns>The object x.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IDBConnection">
      <summary>
            Interface for the IDBConnection classes
            </summary>
    </member>
    <member name="M:Telerik.OpenAccess.Util.IDBConnection.Load(Telerik.OpenAccess.Util.FillInstructionData)">
      <summary>
            Load an ObjectContainer content
            </summary>
      <param name="data">Instruction to fill.</param>
      <returns>
            A serializable object containing the content.
            </returns>
    </member>
    <member name="M:Telerik.OpenAccess.Util.IDBConnection.Save(Telerik.OpenAccess.ObjectContainer.ChangeSet)">
      <summary>
            Save the changes made in an ObjectContainer.
            </summary>
      <param name="data">The changes.</param>
    </member>
    <member name="M:Telerik.OpenAccess.Util.IDBConnection.Sync(Telerik.OpenAccess.ObjectContainer.ChangeSet)">
      <summary>
            Save the changes made in an ObjectContainer and updates the
            local container to work on.
            </summary>
      <param name="data">The changes.</param>
      <returns>Container update info.</returns>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IObjectContainerProvider">
      <summary>
            Interface for the IObjectContainerProvider classes
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IObjectContextProvider">
      <summary>
            Interface for the ObjectContextProvider classes.
            </summary>
    </member>
    <member name="T:Telerik.OpenAccess.Util.IObjectScopeProvider">
      <summary>
            Interface for the ObjectScopeProvider classes.
            </summary>
    </member>
  </members>
</doc>